/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type GuidEntityWithDisplayNameDto = {
  displayText?: string | null;
  id?: string;
} | null;

export type ReferenceListItemValueDto = {
  item?: string | null;
  itemValue?: number | null;
} | null;

export type InspectionProjectDto = {
  name?: string | null;
  startDate?: string | null;
  endDate?: string | null;
  areaLevel1?: GuidEntityWithDisplayNameDto;
  status?: ReferenceListItemValueDto;
  statusComment?: string | null;
  hasActiveItems?: boolean | null;
  id?: string;
} | null;

export type ValidationErrorInfo = {
  message?: string | null;
  members?: string | null[] | null;
} | null;

export type ErrorInfo = {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
} | null;

export type InspectionProjectDtoListAjaxResponse = {
  result?: InspectionProjectDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AjaxResponseBase = {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AutocompleteItemDto = {
  value?: string | null;
  displayText?: string | null;
} | null;

export type AutocompleteItemDtoListAjaxResponse = {
  result?: AutocompleteItemDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type MarkAsCompletedInput = {
  comments?: string | null;
  id?: string;
} | null;

export type InspectionProjectDtoAjaxResponse = {
  result?: InspectionProjectDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type InspectionProjectDtoPagedResultDto = {
  totalCount?: number;
  items?: InspectionProjectDto[] | null;
} | null;

export type InspectionProjectDtoPagedResultDtoAjaxResponse = {
  result?: InspectionProjectDtoPagedResultDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type InspectionProjectCreateDto = {
  name?: string | null;
  startDate?: string | null;
  endDate?: string | null;
  areaLevel1?: GuidEntityWithDisplayNameDto;
  status?: ReferenceListItemValueDto;
} | null;

export type UpdateInspectionProjectDto = {
  name?: string | null;
  startDate?: string | null;
  endDate?: string | null;
  areaLevel1?: GuidEntityWithDisplayNameDto;
  id?: string;
} | null;

export type InspectionProjectGetProjectsProps = Omit<
  GetProps<InspectionProjectDtoListAjaxResponse, AjaxResponseBase, void>,
  'path'
>;

export const InspectionProjectGetProjects = (props: InspectionProjectGetProjectsProps) => (
  <Get<InspectionProjectDtoListAjaxResponse, AjaxResponseBase, void>
    path={`/api/services/propertyInspection/InspectionProject/GetProjects`}
    {...props}
  />
);

export type UseInspectionProjectGetProjectsProps = Omit<
  UseGetProps<InspectionProjectDtoListAjaxResponse, void>,
  'path'
>;

export const useInspectionProjectGetProjects = (props: UseInspectionProjectGetProjectsProps) =>
  useGet<InspectionProjectDtoListAjaxResponse, AjaxResponseBase, void>(
    `/api/services/propertyInspection/InspectionProject/GetProjects`,
    props
  );

export interface InspectionProjectAutocompleteQueryParams {
  term?: string | null;
}

export type InspectionProjectAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionProjectAutocompleteQueryParams>,
  'path'
>;

export const InspectionProjectAutocomplete = (props: InspectionProjectAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionProjectAutocompleteQueryParams>
    path={`/api/services/propertyInspection/InspectionProject/Autocomplete`}
    {...props}
  />
);

export type UseInspectionProjectAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, InspectionProjectAutocompleteQueryParams>,
  'path'
>;

export const useInspectionProjectAutocomplete = (props: UseInspectionProjectAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionProjectAutocompleteQueryParams>(
    `/api/services/propertyInspection/InspectionProject/Autocomplete`,
    props
  );

export type InspectionProjectMarkAsCompletedProps = Omit<
  MutateProps<void, unknown, void, MarkAsCompletedInput>,
  'path' | 'verb'
>;

export const InspectionProjectMarkAsCompleted = (props: InspectionProjectMarkAsCompletedProps) => (
  <Mutate<void, unknown, void, MarkAsCompletedInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProject/MarkAsCompleted`}
    {...props}
  />
);

export type UseInspectionProjectMarkAsCompletedProps = Omit<
  UseMutateProps<void, void, MarkAsCompletedInput>,
  'path' | 'verb'
>;

export const useInspectionProjectMarkAsCompleted = (props: UseInspectionProjectMarkAsCompletedProps) =>
  useMutate<void, unknown, void, MarkAsCompletedInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProject/MarkAsCompleted`,
    props
  );

export interface InspectionProjectGetQueryParams {
  Id?: string;
}

export type InspectionProjectGetProps = Omit<
  GetProps<InspectionProjectDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetQueryParams>,
  'path'
>;

export const InspectionProjectGet = (props: InspectionProjectGetProps) => (
  <Get<InspectionProjectDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetQueryParams>
    path={`/api/services/propertyInspection/InspectionProject/Get`}
    {...props}
  />
);

export type UseInspectionProjectGetProps = Omit<
  UseGetProps<InspectionProjectDtoAjaxResponse, InspectionProjectGetQueryParams>,
  'path'
>;

export const useInspectionProjectGet = (props: UseInspectionProjectGetProps) =>
  useGet<InspectionProjectDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetQueryParams>(
    `/api/services/propertyInspection/InspectionProject/Get`,
    props
  );

export interface InspectionProjectGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type InspectionProjectGetAllProps = Omit<
  GetProps<InspectionProjectDtoPagedResultDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetAllQueryParams>,
  'path'
>;

export const InspectionProjectGetAll = (props: InspectionProjectGetAllProps) => (
  <Get<InspectionProjectDtoPagedResultDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetAllQueryParams>
    path={`/api/services/propertyInspection/InspectionProject/GetAll`}
    {...props}
  />
);

export type UseInspectionProjectGetAllProps = Omit<
  UseGetProps<InspectionProjectDtoPagedResultDtoAjaxResponse, InspectionProjectGetAllQueryParams>,
  'path'
>;

export const useInspectionProjectGetAll = (props: UseInspectionProjectGetAllProps) =>
  useGet<InspectionProjectDtoPagedResultDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetAllQueryParams>(
    `/api/services/propertyInspection/InspectionProject/GetAll`,
    props
  );

export type InspectionProjectCreateProps = Omit<
  MutateProps<InspectionProjectDtoAjaxResponse, AjaxResponseBase, void, InspectionProjectCreateDto>,
  'path' | 'verb'
>;

export const InspectionProjectCreate = (props: InspectionProjectCreateProps) => (
  <Mutate<InspectionProjectDtoAjaxResponse, AjaxResponseBase, void, InspectionProjectCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProject/Create`}
    {...props}
  />
);

export type UseInspectionProjectCreateProps = Omit<
  UseMutateProps<InspectionProjectDtoAjaxResponse, void, InspectionProjectCreateDto>,
  'path' | 'verb'
>;

export const useInspectionProjectCreate = (props: UseInspectionProjectCreateProps) =>
  useMutate<InspectionProjectDtoAjaxResponse, AjaxResponseBase, void, InspectionProjectCreateDto>(
    'POST',
    `/api/services/propertyInspection/InspectionProject/Create`,
    props
  );

export type InspectionProjectUpdateProps = Omit<
  MutateProps<InspectionProjectDtoAjaxResponse, AjaxResponseBase, void, UpdateInspectionProjectDto>,
  'path' | 'verb'
>;

export const InspectionProjectUpdate = (props: InspectionProjectUpdateProps) => (
  <Mutate<InspectionProjectDtoAjaxResponse, AjaxResponseBase, void, UpdateInspectionProjectDto>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionProject/Update`}
    {...props}
  />
);

export type UseInspectionProjectUpdateProps = Omit<
  UseMutateProps<InspectionProjectDtoAjaxResponse, void, UpdateInspectionProjectDto>,
  'path' | 'verb'
>;

export const useInspectionProjectUpdate = (props: UseInspectionProjectUpdateProps) =>
  useMutate<InspectionProjectDtoAjaxResponse, AjaxResponseBase, void, UpdateInspectionProjectDto>(
    'PUT',
    `/api/services/propertyInspection/InspectionProject/Update`,
    props
  );

export interface InspectionProjectDeleteQueryParams {
  Id?: string;
}

export type InspectionProjectDeleteProps = Omit<
  MutateProps<void, unknown, InspectionProjectDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const InspectionProjectDelete = (props: InspectionProjectDeleteProps) => (
  <Mutate<void, unknown, InspectionProjectDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/InspectionProject/Delete`}
    {...props}
  />
);

export type UseInspectionProjectDeleteProps = Omit<
  UseMutateProps<void, InspectionProjectDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const useInspectionProjectDelete = (props: UseInspectionProjectDeleteProps) =>
  useMutate<void, unknown, InspectionProjectDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/InspectionProject/Delete`,
    props
  );
