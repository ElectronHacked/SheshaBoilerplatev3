/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type InspectorDto = {
  fullName?: string | null;
  shortName?: string | null;
  userName?: string | null;
  id?: string;
} | null;

export type GuidNullableEntityWithDisplayNameDto = {
  displayText?: string | null;
  id?: string | null;
} | null;

export type ReferenceListItemValueDto = {
  item?: string | null;
  itemValue?: number | null;
} | null;

export type AreaDto = {
  name?: string | null;
  shortName?: string | null;
  parentArea?: GuidNullableEntityWithDisplayNameDto;
  comments?: string | null;
  areaType?: ReferenceListItemValueDto;
  id?: string;
} | null;

export type InspectionTeamDto = {
  teamLead?: InspectorDto;
  name?: string | null;
  areaLevel1?: AreaDto;
  id?: string;
} | null;

export type ValidationErrorInfo = {
  message?: string | null;
  members?: string | null[] | null;
} | null;

export type ErrorInfo = {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
} | null;

export type InspectionTeamDtoListAjaxResponse = {
  result?: InspectionTeamDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AjaxResponseBase = {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type TeamMemberDto = {
  role?: number | null;
  shortName?: string | null;
  personId?: string;
  id?: string;
} | null;

export type TeamMemberDtoListAjaxResponse = {
  result?: TeamMemberDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type PersonDto = {
  userName?: string | null;
  password?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  mobileNumber?: string | null;
  emailAddress?: string | null;
  id?: string;
} | null;

export type InspectionTeamCreateDto = {
  teamLead?: PersonDto;
  name?: string | null;
  areaLevel1?: AreaDto;
} | null;

export type InspectionTeamDtoAjaxResponse = {
  result?: InspectionTeamDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AutocompleteItemDto = {
  value?: string | null;
  displayText?: string | null;
} | null;

export type AutocompleteItemDtoListAjaxResponse = {
  result?: AutocompleteItemDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AddInspectionTeamMemberInput = {
  teamId?: string;
  personId?: string;
} | null;

export type GuidEntityDto = {
  id?: string;
} | null;

export type CalendarEventDto = {
  id?: string | null;
  title?: string | null;
  description?: string | null;
  allDay?: boolean;
  start?: string;
  end?: string | null;
  editable?: boolean;
} | null;

export type AvailableAreaDto = {
  name?: string | null;
  parentId?: string | null;
  id?: string;
} | null;

export type AvailableAreaDtoListAjaxResponse = {
  result?: AvailableAreaDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type InspectionTeamDtoPagedResultDto = {
  totalCount?: number;
  items?: InspectionTeamDto[] | null;
} | null;

export type InspectionTeamDtoPagedResultDtoAjaxResponse = {
  result?: InspectionTeamDtoPagedResultDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type InspectionTeamGetMyTeamsProps = Omit<
  GetProps<InspectionTeamDtoListAjaxResponse, AjaxResponseBase, void>,
  'path'
>;

export const InspectionTeamGetMyTeams = (props: InspectionTeamGetMyTeamsProps) => (
  <Get<InspectionTeamDtoListAjaxResponse, AjaxResponseBase, void>
    path={`/api/services/propertyInspection/InspectionTeam/GetMyTeams`}
    {...props}
  />
);

export type UseInspectionTeamGetMyTeamsProps = Omit<UseGetProps<InspectionTeamDtoListAjaxResponse, void>, 'path'>;

export const useInspectionTeamGetMyTeams = (props: UseInspectionTeamGetMyTeamsProps) =>
  useGet<InspectionTeamDtoListAjaxResponse, AjaxResponseBase, void>(
    `/api/services/propertyInspection/InspectionTeam/GetMyTeams`,
    props
  );

export interface InspectionTeamGetTeamMembersQueryParams {
  id?: string;
}

export type InspectionTeamGetTeamMembersProps = Omit<
  GetProps<TeamMemberDtoListAjaxResponse, AjaxResponseBase, InspectionTeamGetTeamMembersQueryParams>,
  'path'
>;

export const InspectionTeamGetTeamMembers = (props: InspectionTeamGetTeamMembersProps) => (
  <Get<TeamMemberDtoListAjaxResponse, AjaxResponseBase, InspectionTeamGetTeamMembersQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetTeamMembers`}
    {...props}
  />
);

export type UseInspectionTeamGetTeamMembersProps = Omit<
  UseGetProps<TeamMemberDtoListAjaxResponse, InspectionTeamGetTeamMembersQueryParams>,
  'path'
>;

export const useInspectionTeamGetTeamMembers = (props: UseInspectionTeamGetTeamMembersProps) =>
  useGet<TeamMemberDtoListAjaxResponse, AjaxResponseBase, InspectionTeamGetTeamMembersQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetTeamMembers`,
    props
  );

export type InspectionTeamCreateProps = Omit<
  MutateProps<InspectionTeamDtoAjaxResponse, AjaxResponseBase, void, InspectionTeamCreateDto>,
  'path' | 'verb'
>;

export const InspectionTeamCreate = (props: InspectionTeamCreateProps) => (
  <Mutate<InspectionTeamDtoAjaxResponse, AjaxResponseBase, void, InspectionTeamCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionTeam/Create`}
    {...props}
  />
);

export type UseInspectionTeamCreateProps = Omit<
  UseMutateProps<InspectionTeamDtoAjaxResponse, void, InspectionTeamCreateDto>,
  'path' | 'verb'
>;

export const useInspectionTeamCreate = (props: UseInspectionTeamCreateProps) =>
  useMutate<InspectionTeamDtoAjaxResponse, AjaxResponseBase, void, InspectionTeamCreateDto>(
    'POST',
    `/api/services/propertyInspection/InspectionTeam/Create`,
    props
  );

export interface InspectionTeamAutocompleteQueryParams {
  term?: string | null;
}

export type InspectionTeamAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionTeamAutocompleteQueryParams>,
  'path'
>;

export const InspectionTeamAutocomplete = (props: InspectionTeamAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionTeamAutocompleteQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/Autocomplete`}
    {...props}
  />
);

export type UseInspectionTeamAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, InspectionTeamAutocompleteQueryParams>,
  'path'
>;

export const useInspectionTeamAutocomplete = (props: UseInspectionTeamAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionTeamAutocompleteQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/Autocomplete`,
    props
  );

export type InspectionTeamAddMemberProps = Omit<
  MutateProps<void, unknown, void, AddInspectionTeamMemberInput>,
  'path' | 'verb'
>;

export const InspectionTeamAddMember = (props: InspectionTeamAddMemberProps) => (
  <Mutate<void, unknown, void, AddInspectionTeamMemberInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionTeam/AddMember`}
    {...props}
  />
);

export type UseInspectionTeamAddMemberProps = Omit<
  UseMutateProps<void, void, AddInspectionTeamMemberInput>,
  'path' | 'verb'
>;

export const useInspectionTeamAddMember = (props: UseInspectionTeamAddMemberProps) =>
  useMutate<void, unknown, void, AddInspectionTeamMemberInput>(
    'POST',
    `/api/services/propertyInspection/InspectionTeam/AddMember`,
    props
  );

export type InspectionTeamRemoveMemberProps = Omit<MutateProps<void, unknown, void, GuidEntityDto>, 'path' | 'verb'>;

export const InspectionTeamRemoveMember = (props: InspectionTeamRemoveMemberProps) => (
  <Mutate<void, unknown, void, GuidEntityDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionTeam/RemoveMember`}
    {...props}
  />
);

export type UseInspectionTeamRemoveMemberProps = Omit<UseMutateProps<void, void, GuidEntityDto>, 'path' | 'verb'>;

export const useInspectionTeamRemoveMember = (props: UseInspectionTeamRemoveMemberProps) =>
  useMutate<void, unknown, void, GuidEntityDto>(
    'POST',
    `/api/services/propertyInspection/InspectionTeam/RemoveMember`,
    props
  );

export interface InspectionTeamGetTeamCalendarQueryParams {
  id?: string;
  currentEventId?: string | null;
  start?: string;
  end?: string;
}

export type InspectionTeamGetTeamCalendarProps = Omit<
  GetProps<CalendarEventDto[] | null, unknown, InspectionTeamGetTeamCalendarQueryParams>,
  'path'
>;

export const InspectionTeamGetTeamCalendar = (props: InspectionTeamGetTeamCalendarProps) => (
  <Get<CalendarEventDto[] | null, unknown, InspectionTeamGetTeamCalendarQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetTeamCalendar`}
    {...props}
  />
);

export type UseInspectionTeamGetTeamCalendarProps = Omit<
  UseGetProps<CalendarEventDto[] | null, InspectionTeamGetTeamCalendarQueryParams>,
  'path'
>;

export const useInspectionTeamGetTeamCalendar = (props: UseInspectionTeamGetTeamCalendarProps) =>
  useGet<CalendarEventDto[] | null, unknown, InspectionTeamGetTeamCalendarQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetTeamCalendar`,
    props
  );

export type InspectionTeamUpdateProps = Omit<
  MutateProps<InspectionTeamDtoAjaxResponse, AjaxResponseBase, void, InspectionTeamDto>,
  'path' | 'verb'
>;

export const InspectionTeamUpdate = (props: InspectionTeamUpdateProps) => (
  <Mutate<InspectionTeamDtoAjaxResponse, AjaxResponseBase, void, InspectionTeamDto>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionTeam/Update`}
    {...props}
  />
);

export type UseInspectionTeamUpdateProps = Omit<
  UseMutateProps<InspectionTeamDtoAjaxResponse, void, InspectionTeamDto>,
  'path' | 'verb'
>;

export const useInspectionTeamUpdate = (props: UseInspectionTeamUpdateProps) =>
  useMutate<InspectionTeamDtoAjaxResponse, AjaxResponseBase, void, InspectionTeamDto>(
    'PUT',
    `/api/services/propertyInspection/InspectionTeam/Update`,
    props
  );

export type InspectionTeamGetAvailableAreasProps = Omit<
  GetProps<AvailableAreaDtoListAjaxResponse, AjaxResponseBase, void>,
  'path'
>;

export const InspectionTeamGetAvailableAreas = (props: InspectionTeamGetAvailableAreasProps) => (
  <Get<AvailableAreaDtoListAjaxResponse, AjaxResponseBase, void>
    path={`/api/services/propertyInspection/InspectionTeam/GetAvailableAreas`}
    {...props}
  />
);

export type UseInspectionTeamGetAvailableAreasProps = Omit<UseGetProps<AvailableAreaDtoListAjaxResponse, void>, 'path'>;

export const useInspectionTeamGetAvailableAreas = (props: UseInspectionTeamGetAvailableAreasProps) =>
  useGet<AvailableAreaDtoListAjaxResponse, AjaxResponseBase, void>(
    `/api/services/propertyInspection/InspectionTeam/GetAvailableAreas`,
    props
  );

export interface InspectionTeamGetAvailableSuburbsQueryParams {
  areaId?: string | null;
}

export type InspectionTeamGetAvailableSuburbsProps = Omit<
  GetProps<AvailableAreaDtoListAjaxResponse, AjaxResponseBase, InspectionTeamGetAvailableSuburbsQueryParams>,
  'path'
>;

export const InspectionTeamGetAvailableSuburbs = (props: InspectionTeamGetAvailableSuburbsProps) => (
  <Get<AvailableAreaDtoListAjaxResponse, AjaxResponseBase, InspectionTeamGetAvailableSuburbsQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetAvailableSuburbs`}
    {...props}
  />
);

export type UseInspectionTeamGetAvailableSuburbsProps = Omit<
  UseGetProps<AvailableAreaDtoListAjaxResponse, InspectionTeamGetAvailableSuburbsQueryParams>,
  'path'
>;

export const useInspectionTeamGetAvailableSuburbs = (props: UseInspectionTeamGetAvailableSuburbsProps) =>
  useGet<AvailableAreaDtoListAjaxResponse, AjaxResponseBase, InspectionTeamGetAvailableSuburbsQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetAvailableSuburbs`,
    props
  );

export interface InspectionTeamGetQueryParams {
  Id?: string;
}

export type InspectionTeamGetProps = Omit<
  GetProps<InspectionTeamDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetQueryParams>,
  'path'
>;

export const InspectionTeamGet = (props: InspectionTeamGetProps) => (
  <Get<InspectionTeamDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/Get`}
    {...props}
  />
);

export type UseInspectionTeamGetProps = Omit<
  UseGetProps<InspectionTeamDtoAjaxResponse, InspectionTeamGetQueryParams>,
  'path'
>;

export const useInspectionTeamGet = (props: UseInspectionTeamGetProps) =>
  useGet<InspectionTeamDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/Get`,
    props
  );

export interface InspectionTeamGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type InspectionTeamGetAllProps = Omit<
  GetProps<InspectionTeamDtoPagedResultDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetAllQueryParams>,
  'path'
>;

export const InspectionTeamGetAll = (props: InspectionTeamGetAllProps) => (
  <Get<InspectionTeamDtoPagedResultDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetAllQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetAll`}
    {...props}
  />
);

export type UseInspectionTeamGetAllProps = Omit<
  UseGetProps<InspectionTeamDtoPagedResultDtoAjaxResponse, InspectionTeamGetAllQueryParams>,
  'path'
>;

export const useInspectionTeamGetAll = (props: UseInspectionTeamGetAllProps) =>
  useGet<InspectionTeamDtoPagedResultDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetAllQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetAll`,
    props
  );

export interface InspectionTeamDeleteQueryParams {
  Id?: string;
}

export type InspectionTeamDeleteProps = Omit<
  MutateProps<void, unknown, InspectionTeamDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const InspectionTeamDelete = (props: InspectionTeamDeleteProps) => (
  <Mutate<void, unknown, InspectionTeamDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/InspectionTeam/Delete`}
    {...props}
  />
);

export type UseInspectionTeamDeleteProps = Omit<
  UseMutateProps<void, InspectionTeamDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const useInspectionTeamDelete = (props: UseInspectionTeamDeleteProps) =>
  useMutate<void, unknown, InspectionTeamDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/InspectionTeam/Delete`,
    props
  );
