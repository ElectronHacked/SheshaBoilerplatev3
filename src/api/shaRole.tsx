/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type CreateShaRoleDto = {
  name: string;
  nameSpace?: string | null;
  description?: string | null;
  canAssignToMultiple?: boolean;
  canAssignToPerson?: boolean;
  canAssignToRole?: boolean;
  canAssignToOrganisationRoleLevel?: boolean;
  canAssignToUnit?: boolean;
} | null;

export type ShaRoleDto = {
  name: string;
  nameSpace?: string | null;
  description?: string | null;
  isRegionSpecific?: boolean;
  canAssignToMultiple?: boolean;
  canAssignToPerson?: boolean;
  canAssignToRole?: boolean;
  canAssignToOrganisationRoleLevel?: boolean;
  canAssignToUnit?: boolean;
  id?: string;
} | null;

export type ValidationErrorInfo = {
  message?: string | null;
  members?: string | null[] | null;
} | null;

export type ErrorInfo = {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
} | null;

export type ShaRoleDtoAjaxResponse = {
  result?: ShaRoleDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AjaxResponseBase = {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type ShaRoleDtoPagedResultDto = {
  totalCount?: number;
  items?: ShaRoleDto[] | null;
} | null;

export type ShaRoleDtoPagedResultDtoAjaxResponse = {
  result?: ShaRoleDtoPagedResultDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type ShaRoleCreateProps = Omit<
  MutateProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, void, CreateShaRoleDto>,
  'path' | 'verb'
>;

export const ShaRoleCreate = (props: ShaRoleCreateProps) => (
  <Mutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, void, CreateShaRoleDto>
    verb="POST"
    path={`/api/services/app/ShaRole/Create`}
    {...props}
  />
);

export type UseShaRoleCreateProps = Omit<
  UseMutateProps<ShaRoleDtoAjaxResponse, void, CreateShaRoleDto>,
  'path' | 'verb'
>;

export const useShaRoleCreate = (props: UseShaRoleCreateProps) =>
  useMutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, void, CreateShaRoleDto>(
    'POST',
    `/api/services/app/ShaRole/Create`,
    props
  );

export type ShaRoleUpdateProps = Omit<
  MutateProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, void, ShaRoleDto>,
  'path' | 'verb'
>;

export const ShaRoleUpdate = (props: ShaRoleUpdateProps) => (
  <Mutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, void, ShaRoleDto>
    verb="PUT"
    path={`/api/services/app/ShaRole/Update`}
    {...props}
  />
);

export type UseShaRoleUpdateProps = Omit<UseMutateProps<ShaRoleDtoAjaxResponse, void, ShaRoleDto>, 'path' | 'verb'>;

export const useShaRoleUpdate = (props: UseShaRoleUpdateProps) =>
  useMutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, void, ShaRoleDto>(
    'PUT',
    `/api/services/app/ShaRole/Update`,
    props
  );

export interface ShaRoleDeleteQueryParams {
  Id?: string;
}

export type ShaRoleDeleteProps = Omit<MutateProps<void, unknown, ShaRoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const ShaRoleDelete = (props: ShaRoleDeleteProps) => (
  <Mutate<void, unknown, ShaRoleDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/ShaRole/Delete`}
    {...props}
  />
);

export type UseShaRoleDeleteProps = Omit<UseMutateProps<void, ShaRoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const useShaRoleDelete = (props: UseShaRoleDeleteProps) =>
  useMutate<void, unknown, ShaRoleDeleteQueryParams, void>('DELETE', `/api/services/app/ShaRole/Delete`, props);

export interface ShaRoleGetQueryParams {
  Id?: string;
}

export type ShaRoleGetProps = Omit<GetProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams>, 'path'>;

export const ShaRoleGet = (props: ShaRoleGetProps) => (
  <Get<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams>
    path={`/api/services/app/ShaRole/Get`}
    {...props}
  />
);

export type UseShaRoleGetProps = Omit<UseGetProps<ShaRoleDtoAjaxResponse, ShaRoleGetQueryParams>, 'path'>;

export const useShaRoleGet = (props: UseShaRoleGetProps) =>
  useGet<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams>(`/api/services/app/ShaRole/Get`, props);

export interface ShaRoleGetAllQueryParams {
  Keyword?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type ShaRoleGetAllProps = Omit<
  GetProps<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams>,
  'path'
>;

export const ShaRoleGetAll = (props: ShaRoleGetAllProps) => (
  <Get<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams>
    path={`/api/services/app/ShaRole/GetAll`}
    {...props}
  />
);

export type UseShaRoleGetAllProps = Omit<
  UseGetProps<ShaRoleDtoPagedResultDtoAjaxResponse, ShaRoleGetAllQueryParams>,
  'path'
>;

export const useShaRoleGetAll = (props: UseShaRoleGetAllProps) =>
  useGet<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams>(
    `/api/services/app/ShaRole/GetAll`,
    props
  );
