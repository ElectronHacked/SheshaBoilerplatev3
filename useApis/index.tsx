/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type IsTenantAvailableInput = {
  tenancyName: string;
} | null;

export type TenantAvailabilityState = number;

export type IsTenantAvailableOutput = {
  state?: TenantAvailabilityState;
  tenantId?: number | null;
} | null;

export type RegisterInput = {
  name: string;
  surname: string;
  userName: string;
  emailAddress: string;
  password: string;
  captchaResponse?: string | null;
} | null;

export type RegisterOutput = {
  canLogin?: boolean;
} | null;

export type GetAppointmentsInput = { [key: string]: any } | null;

export type RefListPropertyTypeNullable = number | null;

export type RefListPropertyOccupantTypeNullable = number | null;

/**
 * Property DTO
 */
export type InspectionPropertyDto = {
  id?: string;
  area?: string | null;
  suburb?: string | null;
  buildingComplexName?: string | null;
  unitNo?: string | null;
  erfNo?: string | null;
  streetName?: string | null;
  streetNumber?: string | null;
  locationDescription?: string | null;
  lat?: number | null;
  long?: number | null;
  propertyType?: RefListPropertyTypeNullable;
  occupantType?: RefListPropertyOccupantTypeNullable;
  title?: string | null;
  firstname?: string | null;
  lastname?: string | null;
  idNumber?: string | null;
  mobileNumber?: string | null;
  /**
   * Id of the property Group (transformer). todo: make it mandatory after clarifications (or remove this comment)
   */
  propertyGroupId?: string | null;
  batchAssignmentId?: string | null;
} | null;

export type RefListPropertyInspectionStatus = number;

export type InspectorDto = {
  fullName?: string | null;
  shortName?: string | null;
  userName?: string | null;
  id?: string;
} | null;

export type RefListInspectionAppointmentStatusNullable = number | null;

export type PropertyInspectionDto = {
  orderIndex?: number;
  refNo?: string | null;
  status?: RefListPropertyInspectionStatus;
  statusUpdatedDate?: string | null;
  assignedTo?: InspectorDto;
  notes?: string | null;
  revisitAppointmentDate?: string | null;
  revisitAppointmentEndDate?: string | null;
  revisitAppointmentStatus?: RefListInspectionAppointmentStatusNullable;
  id?: string;
} | null;

export type RefListCheckInResultNullable = number | null;

export type RefListAccessResultNullable = number | null;

export type RefListVisitTypeNullable = number | null;

export type PropertyVisitDto = {
  checkInLat?: number | null;
  checkInLong?: number | null;
  checkInTimestamp?: string | null;
  checkInResult?: RefListCheckInResultNullable;
  completedBy?: InspectorDto;
  completedDate?: string | null;
  accessResult?: RefListAccessResultNullable;
  noAccessRef?: string | null;
  visitType?: RefListVisitTypeNullable;
  notes?: string | null;
  id?: string;
} | null;

export type AppointmentDto = {
  property?: InspectionPropertyDto;
  propertyInspection?: PropertyInspectionDto;
  lastVisit?: PropertyVisitDto;
} | null;

/**
 * Generic DTO of the simple autocomplete item
 */
export type AutocompleteItemDto = {
  value?: string | null;
  displayText?: string | null;
} | null;

export type ValidationErrorInfo = {
  message?: string | null;
  members?: string | null[] | null;
} | null;

export type ErrorInfo = {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
} | null;

export type AutocompleteItemDtoListAjaxResponse = {
  result?: AutocompleteItemDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AjaxResponseBase = {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AreaDto = {
  name?: string | null;
  shortName?: string | null;
  id?: string;
} | null;

export type AreaDtoAjaxResponse = {
  result?: AreaDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AreaDtoPagedResultDto = {
  totalCount?: number;
  items?: AreaDto[] | null;
} | null;

export type AreaCreateDto = {
  name?: string | null;
  shortName?: string | null;
} | null;

export type DataTableColumnDto = {
  propertyName?: string | null;
  filterCaption?: string | null;
  name?: string | null;
  caption?: string | null;
  allowShowHide?: boolean;
  dataType?: string | null;
  visible?: boolean;
} | null;

export type DataTableConfigDto = {
  id?: string | null;
  pageSize?: number;
  columns?: DataTableColumnDto[] | null;
} | null;

export type ColumnSortingDto = {
  id?: string | null;
  desc?: boolean;
} | null;

export type Object = { [key: string]: any } | null;

export type ColumnFilterDto = {
  columnId?: string | null;
  filterOption?: string | null;
  filter?: Object;
} | null;

export type DataTableGetDataInput = {
  id?: string | null;
  pageSize?: number;
  quickSearch?: string | null;
  currentPage?: number;
  parentEntityId?: string | null;
  sorting?: ColumnSortingDto[] | null;
  filter?: ColumnFilterDto[] | null;
} | null;

/**
 * Represents the data of the table used by DataTables  on the client-side
 */
export type DataTableData = {
  /**
   * Total number of rows after filters
   */
  totalRows?: number;
  /**
   * Total number of rows before filters
   */
  totalRowsBeforeFilter?: number;
  /**
   * Total number of pages
   */
  totalPages?: number;
  echo?: number;
  rows?:
    | {
        [key: string]: Object;
      }
    | null[]
    | null;
} | null;

export type SmtpSettingsInput = {
  /**
   * SMTP Host name/IP.
   */
  host?: string | null;
  /**
   * SMTP Port.
   */
  port?: number;
  /**
   * User name to login to SMTP server.
   */
  userName?: string | null;
  /**
   * Password to login to SMTP server.
   */
  password?: string | null;
  /**
   * Domain name to login to SMTP server.
   */
  domain?: string | null;
  /**
   * Is SSL enabled?
   */
  enableSsl?: boolean;
  /**
   * Use default credentials?
   */
  useDefaultCredentials?: boolean;
} | null;

export type EmailSettingsInput = {
  /**
   * Default from address.
   */
  defaultFromAddress?: string | null;
  /**
   * Default display name.
   */
  defaultFromDisplayName?: string | null;
} | null;

export type SendTestEmailInput = {
  to: string;
  subject: string;
  body: string;
} | null;

export type SendTestEmailDto = {
  success?: boolean;
} | null;

export type RefListInspectionBatchAssignmentStatusNullable = number | null;

export type RefListPropertyGroupTypeNullable = number | null;

export type InspectionBatchWithStatisticDto = {
  totalUnits?: number | null;
  completedUnits?: number | null;
  verifiedUnits?: number | null;
  /**
   * Id of the PropertyGroup (transformer)
   */
  propertyGroupId?: string | null;
  projectName?: string | null;
  regionName?: string | null;
  status?: RefListInspectionBatchAssignmentStatusNullable;
  propertyGroupType?: RefListPropertyGroupTypeNullable;
  plannedStartDate?: string | null;
  plannedCompletionDate?: string | null;
  suburb?: string | null;
  transNo?: string | null;
  notes?: string | null;
  lat?: number | null;
  long?: number | null;
  id?: string;
} | null;

export type RefListPropertyInspectionStatusNullable = number | null;

export type InspectionBatchPropertyDto = {
  id?: string;
  area?: string | null;
  suburb?: string | null;
  buildingComplexName?: string | null;
  unitNo?: string | null;
  erfNo?: string | null;
  streetName?: string | null;
  streetNumber?: string | null;
  locationDescription?: string | null;
  lat?: number | null;
  long?: number | null;
  propertyType?: RefListPropertyTypeNullable;
  occupantType?: RefListPropertyOccupantTypeNullable;
  title?: string | null;
  firstname?: string | null;
  lastname?: string | null;
  idNumber?: string | null;
  mobileNumber?: string | null;
  propertyInspectionId?: string | null;
  status?: RefListPropertyInspectionStatusNullable;
  isVerified?: boolean | null;
  statusUpdatedDate?: string | null;
  assignedTo?: InspectorDto;
} | null;

export type PropertyGroupCreateDto = {
  projectId: string;
  teamId: string;
  name: string;
  suburb: string;
  propertyGroupType?: RefListPropertyGroupTypeNullable;
  lat?: number | null;
  long?: number | null;
  notes?: string | null;
} | null;

export type PropertyGroupDto = {
  name: string;
  suburb: string;
  propertyGroupType?: RefListPropertyGroupTypeNullable;
  areaLevel1?: AreaDto;
  /**
   * Id of the `InspectionBatchAssignment` (is used only when batch is created with assignment at once)
   */
  inspectionBatchAssignmentId?: string | null;
  id?: string;
} | null;

export type UpdateTransformerDetailsInput = {
  projectId?: string;
  notes?: string | null;
  suburb?: string | null;
  lat?: number | null;
  long?: number | null;
  id?: string;
} | null;

/**
 * Generic entity Dto with display text
 */
export type GuidNullableEntityWithDisplayNameDto = {
  displayText?: string | null;
  id?: string | null;
} | null;

export type InspectionBatchAssignmentDto = {
  project?: GuidNullableEntityWithDisplayNameDto;
  propertyGroup?: GuidNullableEntityWithDisplayNameDto;
  assignedTeam?: GuidNullableEntityWithDisplayNameDto;
  plannedStartDate?: string | null;
  plannedCompletionDate?: string | null;
  area?: string | null;
  region?: string | null;
  suburb?: string | null;
  numProperties?: number;
  numPropertiesInspected?: number;
  numPropertiesNoAccess?: number;
  numMeters?: number;
  id?: string;
} | null;

export type InspectionBatchAssignmentDtoAjaxResponse = {
  result?: InspectionBatchAssignmentDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type InspectionBatchAssignmentCreateDto = {
  projectId?: string;
  regionId?: string | null;
  propertyGroupId?: string;
  assignedTeamId?: string;
  plannedStartDate: string;
  plannedCompletionDate: string;
} | null;

export type InspectionBatchAssignmentDtoPagedResultDto = {
  totalCount?: number;
  items?: InspectionBatchAssignmentDto[] | null;
} | null;

export type InspectionProjectDto = {
  name?: string | null;
  startDate?: string | null;
  endDate?: string | null;
  areaLevel1?: AreaDto;
  id?: string;
} | null;

export type InspectionProjectDtoAjaxResponse = {
  result?: InspectionProjectDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type InspectionProjectDtoPagedResultDto = {
  totalCount?: number;
  items?: InspectionProjectDto[] | null;
} | null;

export type InspectionProjectCreateDto = {
  name?: string | null;
  startDate?: string | null;
  endDate?: string | null;
  areaLevel1?: AreaDto;
} | null;

/**
 * Property DTO
 */
export type CreateInspectionPropertyDto = {
  area?: string | null;
  suburb?: string | null;
  buildingComplexName?: string | null;
  unitNo?: string | null;
  erfNo?: string | null;
  streetName?: string | null;
  streetNumber?: string | null;
  locationDescription?: string | null;
  lat?: number | null;
  long?: number | null;
  propertyType?: RefListPropertyTypeNullable;
  occupantType?: RefListPropertyOccupantTypeNullable;
  title?: string | null;
  firstname?: string | null;
  lastname?: string | null;
  idNumber?: string | null;
  mobileNumber?: string | null;
  /**
   * Id of the property Group (transformer). todo: make it mandatory after clarifications (or remove this comment)
   */
  propertyGroupId?: string | null;
  batchAssignmentId?: string | null;
} | null;

export type UpdatePropertyDetailsInput = {
  propertyInspectionId?: string;
  area?: string | null;
  suburb?: string | null;
  buildingComplexName?: string | null;
  unitNo?: string | null;
  erfNo?: string | null;
  streetName?: string | null;
  streetNumber?: string | null;
  locationDescription?: string | null;
  lat?: number | null;
  long?: number | null;
  propertyType?: RefListPropertyTypeNullable;
  id?: string;
} | null;

/**
 * Property DTO
 */
export type UpdateInspectionPropertyDetailsInput = {
  area?: string | null;
  suburb?: string | null;
  buildingComplexName?: string | null;
  unitNo?: string | null;
  erfNo?: string | null;
  streetName?: string | null;
  streetNumber?: string | null;
  locationDescription?: string | null;
  lat?: number | null;
  long?: number | null;
  propertyType?: RefListPropertyTypeNullable;
  id?: string;
} | null;

export type UpdateCustomerDetailsInput = {
  title?: string | null;
  firstname?: string | null;
  lastname?: string | null;
  idNumber?: string | null;
  mobileNumber?: string | null;
  occupantType?: RefListPropertyOccupantTypeNullable;
  id?: string;
} | null;

export type UpdateInspectionStatusInput = {
  status?: RefListPropertyInspectionStatus;
  id?: string;
} | null;

export type InspectionPropertyCheckInInput = {
  lat?: number | null;
  long?: number | null;
  outside?: boolean;
  propertyInspectionId?: string;
} | null;

export type InspectionPropertyCheckInDto = {
  /**
   * Id of the `PropertyVisit`, is used to save the data of the visit (no access/entry refused etc.)
   */
  propertyVisitId?: string;
  checkInTimestamp?: string | null;
} | null;

export type AssignInspectorInput = {
  propertyIds?: string[] | null;
  inspectorId?: string;
  batchId?: string;
} | null;

export type NoAccessInput = {
  /**
   * Id of the `PropertyVisit`, the system sends it to inspector on check-in
   */
  propertyVisitId?: string;
  noAccessRef: string;
  notes?: string | null;
  accessResult?: RefListAccessResultNullable;
  hasLeftLetter?: boolean;
} | null;

export type PropertyVisitInput = {
  /**
   * Id of the `PropertyVisit`, the system sends it to inspector on check-in
   */
  propertyVisitId?: string;
} | null;

export type ReportFindingsInput = {
  /**
   * Id of the `PropertyVisit`, the system sends it to inspector on check-in
   */
  propertyVisitId?: string;
  accessResult?: RefListAccessResultNullable;
} | null;

export type ReassignPropertyInput = {
  propertyInspectionId: string;
  inspectorId: string;
} | null;

export type InspectionTeamDto = {
  teamLead?: InspectorDto;
  name?: string | null;
  areaLevel1?: AreaDto;
  id?: string;
} | null;

export type TeamMemberDto = {
  role?: number | null;
  shortName?: string | null;
  personId?: string;
  id?: string;
} | null;

export type PersonDto = {
  userName?: string | null;
  password?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  mobileNumber?: string | null;
  emailAddress?: string | null;
  id?: string;
} | null;

export type InspectionTeamCreateDto = {
  teamLead?: PersonDto;
  name?: string | null;
  areaLevel1?: AreaDto;
} | null;

export type InspectionTeamDtoAjaxResponse = {
  result?: InspectionTeamDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type AddInspectionTeamMemberInput = {
  teamId?: string;
  personId?: string;
} | null;

export type GuidEntityDto = {
  id?: string;
} | null;

export type CalendarEventDto = {
  id?: string | null;
  title?: string | null;
  description?: string | null;
  allDay?: boolean;
  /**
   * Original comment:
   * Date. Required.
   * The date/time an event begins.
   * When specifying Event Objects for events or eventSources, you may specify a string in IETF format (ex: "Wed, 18 Oct 2009 13:00:00 EST"), a string in ISO8601 format (ex: "2009-11-05T13:15:30Z") or a UNIX timestamp.
   */
  start?: string;
  /**
   * Original comment:
   * Date. Optional.
   * The date/time an event ends.
   * As with start, you may specify it in IETF, ISO8601, or UNIX timestamp format.
   * If an event is all-day...
   * the end date is inclusive. This means an event with start Nov 10 and end Nov 12 will span 3 days on the calendar.
   * If an event is NOT all-day...
   * the end date is exclusive. This is only a gotcha when your end has time 00:00. It means your event ends on midnight, and it will not span through the next day.
   */
  end?: string | null;
  /**
   * true or false. Optional.
   * Overrides the master editable option for this single event.
   */
  editable?: boolean;
} | null;

export type InspectionTeamDtoPagedResultDto = {
  totalCount?: number;
  items?: InspectionTeamDto[] | null;
} | null;

export type RefListMeterAuditFindingNullable = number | null;

export type RefListMeterTypeNullable = number | null;

/**
 * Meter with last inspections result DTO
 */
export type MeterWithInspectionDto = {
  propertyVisitId?: string | null;
  serialNo?: string | null;
  meterReading?: number;
  meterReading2?: number;
  finding?: RefListMeterAuditFindingNullable;
  notes?: string | null;
  propertyId?: string;
  meterType?: RefListMeterTypeNullable;
  description?: string | null;
  id?: string;
} | null;

export type CreateMeterDto = {
  propertyId?: string;
  serialNo: string;
  meterType: RefListMeterTypeNullable;
  description?: string | null;
} | null;

/**
 * Meter DTO
 */
export type MeterDto = {
  propertyId?: string;
  serialNo?: string | null;
  meterType?: RefListMeterTypeNullable;
  description?: string | null;
  id?: string;
} | null;

export type MeterInspectionInput = {
  propertyVisitId?: string;
  meterId?: string;
  meterReading?: number;
  meterReading2?: number;
  finding?: RefListMeterAuditFindingNullable;
  notes?: string | null;
} | null;

export type MeterInspectionDto = {
  propertyVisitId?: string;
  meterId?: string;
  serialNo?: string | null;
  meterReading?: number;
  meterReading2?: number;
  finding?: RefListMeterAuditFindingNullable;
  notes?: string | null;
  id?: string;
} | null;

export type OtpSendType = number;

export type SendPinInput = {
  /**
   * Mobile number/email address (depending on the `send type`) to which the OTP should be sent
   */
  sendTo?: string | null;
  sendType: OtpSendType;
  recipientType?: string | null;
  recipientId?: string | null;
  /**
   * Lifetime of the one time password in seconds
   */
  lifetime?: number | null;
} | null;

export type SendPinDto = {
  /**
   * Unique runtime identifier of the operation. Is used for resending
   */
  operationId?: string;
  /**
   * Mobile number/email address (depending on the `send type`) to which the OTP has been sent. Is used when we send OTP to the user or another entity
   */
  sentTo?: string | null;
} | null;

export type VerifyPinInput = {
  /**
   * Unique runtime identifier of the operation. Is used for resending
   */
  operationId?: string;
  /**
   * Value of the One Time Pin
   */
  pin?: string | null;
} | null;

export type VerifyPinResponse = {
  /**
   * Indicates that the OTP matches to the sent one
   */
  isSuccess?: boolean;
  /**
   * Error message
   */
  errorMessage?: string | null;
} | null;

export type CreatePersonAccountDto = {
  userName: string;
  password: string;
  firstName: string;
  lastName: string;
  mobileNumber?: string | null;
  emailAddress: string;
} | null;

export type PersonAccountDto = {
  userName: string;
  firstName: string;
  lastName: string;
  mobileNumber?: string | null;
  emailAddress: string;
  id?: string;
} | null;

export type PersonAccountDtoAjaxResponse = {
  result?: PersonAccountDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type PersonAccountDtoPagedResultDto = {
  totalCount?: number;
  items?: PersonAccountDto[] | null;
} | null;

export type PropertyGroupDtoPagedResultDto = {
  totalCount?: number;
  items?: PropertyGroupDto[] | null;
} | null;

export type PropertyInspectionDtoAjaxResponse = {
  result?: PropertyInspectionDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type ReferenceListItemValueDto = {
  item?: string | null;
  itemValue?: number;
} | null;

export type PropertyInspectionDetailsDto = {
  status?: ReferenceListItemValueDto;
  refNo?: string | null;
  statusUpdatedDate?: string | null;
  assignedTo?: InspectorDto;
  team?: InspectionTeamDto;
  transformer?: string | null;
  notes?: string | null;
  revisitAppointmentDate?: string | null;
  revisitAppointmentEndDate?: string | null;
  revisitAppointmentStatus?: ReferenceListItemValueDto;
  region?: AreaDto;
  area?: AreaDto;
  suburb?: string | null;
  buildingComplexName?: string | null;
  unitNo?: string | null;
  erfNo?: string | null;
  streetName?: string | null;
  streetNumber?: string | null;
  locationDescription?: string | null;
  lat?: number | null;
  long?: number | null;
  propertyType?: ReferenceListItemValueDto;
  occupantType?: ReferenceListItemValueDto;
  title?: string | null;
  firstname?: string | null;
  lastname?: string | null;
  idNumber?: string | null;
  mobileNumber?: string | null;
  id?: string;
} | null;

export type PropertyInspectionDetailsDtoAjaxResponse = {
  result?: PropertyInspectionDetailsDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type StoredFileDto = {
  error?: string | null;
  id?: string | null;
  name?: string | null;
  fileCategory?: number | null;
  url?: string | null;
  size?: number;
  type?: string | null;
} | null;

export type StoredFileDtoListAjaxResponse = {
  result?: StoredFileDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
} | null;

export type UpdateRevisitInput = {
  propertyInspectionId?: string;
  revisitAppointmentDate?: string;
  revisitAppointmentEndDate?: string;
} | null;

export type PropertyInspectionDtoPagedResultDto = {
  totalCount?: number;
  items?: PropertyInspectionDto[] | null;
} | null;

export type PropertyInspectionCreateDto = {
  orderIndex?: number;
  status?: RefListPropertyInspectionStatus;
  statusUpdatedDate?: string | null;
  assignedTo?: InspectorDto;
  notes?: string | null;
  revisitAppointmentDate?: string | null;
  revisitAppointmentStatus?: RefListInspectionAppointmentStatusNullable;
} | null;

export type RevisitDto = {
  property?: InspectionPropertyDto;
  propertyInspection?: PropertyInspectionDto;
  lastVisit?: PropertyVisitDto;
} | null;

export type CreateRoleDto = {
  name: string;
  displayName: string;
  normalizedName?: string | null;
  description?: string | null;
  grantedPermissions?: string | null[] | null;
} | null;

export type RoleDto = {
  name: string;
  displayName: string;
  normalizedName?: string | null;
  description?: string | null;
  grantedPermissions?: string | null[] | null;
  id?: number;
} | null;

export type RoleListDto = {
  name?: string | null;
  displayName?: string | null;
  isStatic?: boolean;
  isDefault?: boolean;
  creationTime?: string;
  id?: number;
} | null;

export type RoleListDtoListResultDto = {
  items?: RoleListDto[] | null;
} | null;

export type PermissionDto = {
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
  id?: number;
} | null;

export type PermissionDtoListResultDto = {
  items?: PermissionDto[] | null;
} | null;

export type RoleEditDto = {
  name: string;
  displayName: string;
  description?: string | null;
  isStatic?: boolean;
  id?: number;
} | null;

export type FlatPermissionDto = {
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
} | null;

export type GetRoleForEditOutput = {
  role?: RoleEditDto;
  permissions?: FlatPermissionDto[] | null;
  grantedPermissionNames?: string | null[] | null;
} | null;

export type RoleDtoPagedResultDto = {
  totalCount?: number;
  items?: RoleDto[] | null;
} | null;

export type ApplicationInfoDto = {
  version?: string | null;
  releaseDate?: string;
  features?: {
    [key: string]: boolean;
  } | null;
} | null;

export type UserLoginInfoDto = {
  accountFound?: boolean;
  userName?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  fullName?: string | null;
  picture?: string | null;
  email?: string | null;
  mobileNumber?: string | null;
  hasRegistered?: boolean;
  loginProvider?: string | null;
  homeUrl?: string | null;
  isSelfServiceUser?: boolean;
  id?: number;
} | null;

export type TenantLoginInfoDto = {
  tenancyName?: string | null;
  name?: string | null;
  id?: number;
} | null;

export type GetCurrentLoginInformationsOutput = {
  application?: ApplicationInfoDto;
  user?: UserLoginInfoDto;
  tenant?: TenantLoginInfoDto;
} | null;

export type DeleteStoredFileInput = {
  fileId?: string;
  ownerId: string;
  ownerType: string;
  filesCategory?: number | null;
  propertyName?: string | null;
} | null;

export type CreateTenantDto = {
  tenancyName: string;
  name: string;
  adminEmailAddress: string;
  connectionString?: string | null;
  isActive?: boolean;
} | null;

export type TenantDto = {
  tenancyName: string;
  name: string;
  isActive?: boolean;
  id?: number;
} | null;

export type TenantDtoPagedResultDto = {
  totalCount?: number;
  items?: TenantDto[] | null;
} | null;

export type AuthenticateModel = {
  userNameOrEmailAddress: string;
  password: string;
} | null;

export type AuthenticateResultModel = {
  accessToken?: string | null;
  encryptedAccessToken?: string | null;
  expireInSeconds?: number;
  expireOn?: string;
  userId?: number;
} | null;

export type ExternalLoginProviderInfoModel = {
  name?: string | null;
  clientId?: string | null;
} | null;

export type ExternalAuthenticateModel = {
  authProvider: string;
  providerKey: string;
  providerAccessCode: string;
} | null;

export type ExternalAuthenticateResultModel = {
  accessToken?: string | null;
  encryptedAccessToken?: string | null;
  expireInSeconds?: number;
  waitingForActivation?: boolean;
} | null;

export type CreateUserDto = {
  userName: string;
  name: string;
  surname: string;
  emailAddress: string;
  isActive?: boolean;
  roleNames?: string | null[] | null;
  password: string;
} | null;

export type UserDto = {
  userName: string;
  name: string;
  surname: string;
  emailAddress: string;
  isActive?: boolean;
  fullName?: string | null;
  lastLoginTime?: string | null;
  creationTime?: string;
  roleNames?: string | null[] | null;
  id?: number;
} | null;

export type RoleDtoListResultDto = {
  items?: RoleDto[] | null;
} | null;

export type ChangeUserLanguageDto = {
  languageName: string;
} | null;

export type ResetPasswordSendOtpResponse = {
  /**
   * Unique runtime identifier of the operation. Is used for resending
   */
  operationId?: string;
} | null;

export type ResetPasswordVerifyOtpInput = {
  mobileNo: string;
  /**
   * Unique runtime identifier of the operation. Is used for resending
   */
  operationId?: string;
  /**
   * Value of the One Time Pin
   */
  pin?: string | null;
} | null;

export type ResetPasswordVerifyOtpResponse = {
  token?: string | null;
  username?: string | null;
  /**
   * Indicates that the OTP matches to the sent one
   */
  isSuccess?: boolean;
  /**
   * Error message
   */
  errorMessage?: string | null;
} | null;

export type ResetPasswordUsingTokenInput = {
  username: string;
  token: string;
  newPassword: string;
} | null;

export type ChangePasswordDto = {
  currentPassword: string;
  newPassword: string;
} | null;

export type ResetPasswordDto = {
  adminPassword: string;
  userId: number;
  newPassword: string;
} | null;

export type UserDtoPagedResultDto = {
  totalCount?: number;
  items?: UserDto[] | null;
} | null;

export type AccountIsTenantAvailableProps = Omit<
  MutateProps<IsTenantAvailableOutput, unknown, void, IsTenantAvailableInput>,
  'path' | 'verb'
>;

export const AccountIsTenantAvailable = (props: AccountIsTenantAvailableProps) => (
  <Mutate<IsTenantAvailableOutput, unknown, void, IsTenantAvailableInput>
    verb="POST"
    path={`/api/services/app/Account/IsTenantAvailable`}
    {...props}
  />
);

export type UseAccountIsTenantAvailableProps = Omit<
  UseMutateProps<IsTenantAvailableOutput, void, IsTenantAvailableInput>,
  'path' | 'verb'
>;

export const useAccountIsTenantAvailable = (props: UseAccountIsTenantAvailableProps) =>
  useMutate<IsTenantAvailableOutput, unknown, void, IsTenantAvailableInput>(
    'POST',
    `/api/services/app/Account/IsTenantAvailable`,
    props
  );

export type AccountRegisterProps = Omit<MutateProps<RegisterOutput, unknown, void, RegisterInput>, 'path' | 'verb'>;

export const AccountRegister = (props: AccountRegisterProps) => (
  <Mutate<RegisterOutput, unknown, void, RegisterInput>
    verb="POST"
    path={`/api/services/app/Account/Register`}
    {...props}
  />
);

export type UseAccountRegisterProps = Omit<UseMutateProps<RegisterOutput, void, RegisterInput>, 'path' | 'verb'>;

export const useAccountRegister = (props: UseAccountRegisterProps) =>
  useMutate<RegisterOutput, unknown, void, RegisterInput>('POST', `/api/services/app/Account/Register`, props);

export interface AppointmentGetAllQueryParams {
  input?: GetAppointmentsInput;
}

export type AppointmentGetAllProps = Omit<
  GetProps<AppointmentDto[] | null, unknown, AppointmentGetAllQueryParams>,
  'path'
>;

export const AppointmentGetAll = (props: AppointmentGetAllProps) => (
  <Get<AppointmentDto[] | null, unknown, AppointmentGetAllQueryParams>
    path={`/api/services/propertyInspection/Appointment/GetAll`}
    {...props}
  />
);

export type UseAppointmentGetAllProps = Omit<
  UseGetProps<AppointmentDto[] | null, AppointmentGetAllQueryParams>,
  'path'
>;

export const useAppointmentGetAll = (props: UseAppointmentGetAllProps) =>
  useGet<AppointmentDto[] | null, unknown, AppointmentGetAllQueryParams>(
    `/api/services/propertyInspection/Appointment/GetAll`,
    props
  );

export interface AreaAutocompleteQueryParams {
  term?: string | null;
}

export type AreaAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, AreaAutocompleteQueryParams>,
  'path'
>;

export const AreaAutocomplete = (props: AreaAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, AreaAutocompleteQueryParams>
    path={`/api/services/app/Area/Autocomplete`}
    {...props}
  />
);

export type UseAreaAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AreaAutocompleteQueryParams>,
  'path'
>;

export const useAreaAutocomplete = (props: UseAreaAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, AreaAutocompleteQueryParams>(
    `/api/services/app/Area/Autocomplete`,
    props
  );

export interface AreaGetQueryParams {
  Id?: string;
}

export type AreaGetProps = Omit<GetProps<AreaDtoAjaxResponse, AjaxResponseBase, AreaGetQueryParams>, 'path'>;

export const AreaGet = (props: AreaGetProps) => (
  <Get<AreaDtoAjaxResponse, AjaxResponseBase, AreaGetQueryParams> path={`/api/services/app/Area/Get`} {...props} />
);

export type UseAreaGetProps = Omit<UseGetProps<AreaDtoAjaxResponse, AreaGetQueryParams>, 'path'>;

export const useAreaGet = (props: UseAreaGetProps) =>
  useGet<AreaDtoAjaxResponse, AjaxResponseBase, AreaGetQueryParams>(`/api/services/app/Area/Get`, props);

export interface AreaGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type AreaGetAllProps = Omit<GetProps<AreaDtoPagedResultDto, AjaxResponseBase, AreaGetAllQueryParams>, 'path'>;

export const AreaGetAll = (props: AreaGetAllProps) => (
  <Get<AreaDtoPagedResultDto, AjaxResponseBase, AreaGetAllQueryParams>
    path={`/api/services/app/Area/GetAll`}
    {...props}
  />
);

export type UseAreaGetAllProps = Omit<UseGetProps<AreaDtoPagedResultDto, AreaGetAllQueryParams>, 'path'>;

export const useAreaGetAll = (props: UseAreaGetAllProps) =>
  useGet<AreaDtoPagedResultDto, AjaxResponseBase, AreaGetAllQueryParams>(`/api/services/app/Area/GetAll`, props);

export type AreaCreateProps = Omit<MutateProps<AreaDto, AjaxResponseBase, void, AreaCreateDto>, 'path' | 'verb'>;

export const AreaCreate = (props: AreaCreateProps) => (
  <Mutate<AreaDto, AjaxResponseBase, void, AreaCreateDto>
    verb="POST"
    path={`/api/services/app/Area/Create`}
    {...props}
  />
);

export type UseAreaCreateProps = Omit<UseMutateProps<AreaDto, void, AreaCreateDto>, 'path' | 'verb'>;

export const useAreaCreate = (props: UseAreaCreateProps) =>
  useMutate<AreaDto, AjaxResponseBase, void, AreaCreateDto>('POST', `/api/services/app/Area/Create`, props);

export type AreaUpdateProps = Omit<MutateProps<AreaDto, AjaxResponseBase, void, AreaDto>, 'path' | 'verb'>;

export const AreaUpdate = (props: AreaUpdateProps) => (
  <Mutate<AreaDto, AjaxResponseBase, void, AreaDto> verb="PUT" path={`/api/services/app/Area/Update`} {...props} />
);

export type UseAreaUpdateProps = Omit<UseMutateProps<AreaDto, void, AreaDto>, 'path' | 'verb'>;

export const useAreaUpdate = (props: UseAreaUpdateProps) =>
  useMutate<AreaDto, AjaxResponseBase, void, AreaDto>('PUT', `/api/services/app/Area/Update`, props);

export interface AreaDeleteQueryParams {
  Id?: string;
}

export type AreaDeleteProps = Omit<MutateProps<void, AjaxResponseBase, AreaDeleteQueryParams, void>, 'path' | 'verb'>;

export const AreaDelete = (props: AreaDeleteProps) => (
  <Mutate<void, AjaxResponseBase, AreaDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/Area/Delete`}
    {...props}
  />
);

export type UseAreaDeleteProps = Omit<UseMutateProps<void, AreaDeleteQueryParams, void>, 'path' | 'verb'>;

export const useAreaDelete = (props: UseAreaDeleteProps) =>
  useMutate<void, AjaxResponseBase, AreaDeleteQueryParams, void>('DELETE', `/api/services/app/Area/Delete`, props);

export interface DataTableGetConfigurationQueryParams {
  id?: string | null;
}

export type DataTableGetConfigurationProps = Omit<
  GetProps<DataTableConfigDto, unknown, DataTableGetConfigurationQueryParams>,
  'path'
>;

/**
 * Returns configuration of the DataTable by id
 */
export const DataTableGetConfiguration = (props: DataTableGetConfigurationProps) => (
  <Get<DataTableConfigDto, unknown, DataTableGetConfigurationQueryParams>
    path={`/api/DataTable/GetConfiguration`}
    {...props}
  />
);

export type UseDataTableGetConfigurationProps = Omit<
  UseGetProps<DataTableConfigDto, DataTableGetConfigurationQueryParams>,
  'path'
>;

/**
 * Returns configuration of the DataTable by id
 */
export const useDataTableGetConfiguration = (props: UseDataTableGetConfigurationProps) =>
  useGet<DataTableConfigDto, unknown, DataTableGetConfigurationQueryParams>(`/api/DataTable/GetConfiguration`, props);

export type DataTableGetDataProps = Omit<
  MutateProps<DataTableData, unknown, void, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Returns data for the DateTable control
 */
export const DataTableGetData = (props: DataTableGetDataProps) => (
  <Mutate<DataTableData, unknown, void, DataTableGetDataInput> verb="POST" path={`/api/DataTable/GetData`} {...props} />
);

export type UseDataTableGetDataProps = Omit<
  UseMutateProps<DataTableData, void, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Returns data for the DateTable control
 */
export const useDataTableGetData = (props: UseDataTableGetDataProps) =>
  useMutate<DataTableData, unknown, void, DataTableGetDataInput>('POST', `/api/DataTable/GetData`, props);

export type DataTableExportToExcelProps = Omit<
  MutateProps<void, unknown, void, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Exports DataTable to Excel
 */
export const DataTableExportToExcel = (props: DataTableExportToExcelProps) => (
  <Mutate<void, unknown, void, DataTableGetDataInput> verb="POST" path={`/api/DataTable/ExportToExcel`} {...props} />
);

export type UseDataTableExportToExcelProps = Omit<UseMutateProps<void, void, DataTableGetDataInput>, 'path' | 'verb'>;

/**
 * Exports DataTable to Excel
 */
export const useDataTableExportToExcel = (props: UseDataTableExportToExcelProps) =>
  useMutate<void, unknown, void, DataTableGetDataInput>('POST', `/api/DataTable/ExportToExcel`, props);

export type EmailSenderConfigureSmtpProps = Omit<
  MutateProps<boolean, unknown, void, SmtpSettingsInput>,
  'path' | 'verb'
>;

export const EmailSenderConfigureSmtp = (props: EmailSenderConfigureSmtpProps) => (
  <Mutate<boolean, unknown, void, SmtpSettingsInput> verb="POST" path={`/api/EmailSender/ConfigureSmtp`} {...props} />
);

export type UseEmailSenderConfigureSmtpProps = Omit<UseMutateProps<boolean, void, SmtpSettingsInput>, 'path' | 'verb'>;

export const useEmailSenderConfigureSmtp = (props: UseEmailSenderConfigureSmtpProps) =>
  useMutate<boolean, unknown, void, SmtpSettingsInput>('POST', `/api/EmailSender/ConfigureSmtp`, props);

export type EmailSenderConfigureEmailProps = Omit<
  MutateProps<boolean, unknown, void, EmailSettingsInput>,
  'path' | 'verb'
>;

export const EmailSenderConfigureEmail = (props: EmailSenderConfigureEmailProps) => (
  <Mutate<boolean, unknown, void, EmailSettingsInput> verb="POST" path={`/api/EmailSender/ConfigureEmail`} {...props} />
);

export type UseEmailSenderConfigureEmailProps = Omit<
  UseMutateProps<boolean, void, EmailSettingsInput>,
  'path' | 'verb'
>;

export const useEmailSenderConfigureEmail = (props: UseEmailSenderConfigureEmailProps) =>
  useMutate<boolean, unknown, void, EmailSettingsInput>('POST', `/api/EmailSender/ConfigureEmail`, props);

export type EmailSenderSendEmailProps = Omit<
  MutateProps<SendTestEmailDto, unknown, void, SendTestEmailInput>,
  'path' | 'verb'
>;

export const EmailSenderSendEmail = (props: EmailSenderSendEmailProps) => (
  <Mutate<SendTestEmailDto, unknown, void, SendTestEmailInput>
    verb="POST"
    path={`/api/EmailSender/SendEmail`}
    {...props}
  />
);

export type UseEmailSenderSendEmailProps = Omit<
  UseMutateProps<SendTestEmailDto, void, SendTestEmailInput>,
  'path' | 'verb'
>;

export const useEmailSenderSendEmail = (props: UseEmailSenderSendEmailProps) =>
  useMutate<SendTestEmailDto, unknown, void, SendTestEmailInput>('POST', `/api/EmailSender/SendEmail`, props);

export type FrameworkTestDynamicRepoProps = Omit<GetProps<string | null, unknown, void>, 'path'>;

/**
 * NOTE: to be removed
 */
export const FrameworkTestDynamicRepo = (props: FrameworkTestDynamicRepoProps) => (
  <Get<string | null, unknown, void> path={`/api/Framework/TestDynamicRepo`} {...props} />
);

export type UseFrameworkTestDynamicRepoProps = Omit<UseGetProps<string | null, void>, 'path'>;

/**
 * NOTE: to be removed
 */
export const useFrameworkTestDynamicRepo = (props: UseFrameworkTestDynamicRepoProps) =>
  useGet<string | null, unknown, void>(`/api/Framework/TestDynamicRepo`, props);

export type FrameworkTestSettingsProps = Omit<GetProps<string | null, unknown, void>, 'path'>;

/**
 * NOTE: to be removed
 */
export const FrameworkTestSettings = (props: FrameworkTestSettingsProps) => (
  <Get<string | null, unknown, void> path={`/api/Framework/TestSettings`} {...props} />
);

export type UseFrameworkTestSettingsProps = Omit<UseGetProps<string | null, void>, 'path'>;

/**
 * NOTE: to be removed
 */
export const useFrameworkTestSettings = (props: UseFrameworkTestSettingsProps) =>
  useGet<string | null, unknown, void>(`/api/Framework/TestSettings`, props);

export type FrameworkConfigureTestLdapProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

/**
 * NOTE: to be removed
 */
export const FrameworkConfigureTestLdap = (props: FrameworkConfigureTestLdapProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Framework/ConfigureTestLdap`} {...props} />
);

export type UseFrameworkConfigureTestLdapProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

/**
 * NOTE: to be removed
 */
export const useFrameworkConfigureTestLdap = (props: UseFrameworkConfigureTestLdapProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Framework/ConfigureTestLdap`, props);

export type FrameworkConfigureTestAzureADProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

/**
 * NOTE: to be removed
 */
export const FrameworkConfigureTestAzureAD = (props: FrameworkConfigureTestAzureADProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Framework/ConfigureTestAzureAD`} {...props} />
);

export type UseFrameworkConfigureTestAzureADProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

/**
 * NOTE: to be removed
 */
export const useFrameworkConfigureTestAzureAD = (props: UseFrameworkConfigureTestAzureADProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Framework/ConfigureTestAzureAD`, props);

export type FrameworkTestEntitiesProps = Omit<GetProps<string | null, unknown, void>, 'path'>;

/**
 * NOTE: to be removed
 */
export const FrameworkTestEntities = (props: FrameworkTestEntitiesProps) => (
  <Get<string | null, unknown, void> path={`/api/Framework/TestEntities`} {...props} />
);

export type UseFrameworkTestEntitiesProps = Omit<UseGetProps<string | null, void>, 'path'>;

/**
 * NOTE: to be removed
 */
export const useFrameworkTestEntities = (props: UseFrameworkTestEntitiesProps) =>
  useGet<string | null, unknown, void>(`/api/Framework/TestEntities`, props);

export type FrameworkBootstrapReferenceListsProps = Omit<
  MutateProps<string | null, unknown, void, void>,
  'path' | 'verb'
>;

export const FrameworkBootstrapReferenceLists = (props: FrameworkBootstrapReferenceListsProps) => (
  <Mutate<string | null, unknown, void, void> verb="POST" path={`/api/Framework/BootstrapReferenceLists`} {...props} />
);

export type UseFrameworkBootstrapReferenceListsProps = Omit<UseMutateProps<string | null, void, void>, 'path' | 'verb'>;

export const useFrameworkBootstrapReferenceLists = (props: UseFrameworkBootstrapReferenceListsProps) =>
  useMutate<string | null, unknown, void, void>('POST', `/api/Framework/BootstrapReferenceLists`, props);

export interface FrameworkConfigureUploadFolderQueryParams {
  folder?: string | null;
}

export type FrameworkConfigureUploadFolderProps = Omit<
  MutateProps<void, unknown, FrameworkConfigureUploadFolderQueryParams, void>,
  'path' | 'verb'
>;

/**
 * NOTE: to be removed
 */
export const FrameworkConfigureUploadFolder = (props: FrameworkConfigureUploadFolderProps) => (
  <Mutate<void, unknown, FrameworkConfigureUploadFolderQueryParams, void>
    verb="POST"
    path={`/api/Framework/ConfigureUploadFolder`}
    {...props}
  />
);

export type UseFrameworkConfigureUploadFolderProps = Omit<
  UseMutateProps<void, FrameworkConfigureUploadFolderQueryParams, void>,
  'path' | 'verb'
>;

/**
 * NOTE: to be removed
 */
export const useFrameworkConfigureUploadFolder = (props: UseFrameworkConfigureUploadFolderProps) =>
  useMutate<void, unknown, FrameworkConfigureUploadFolderQueryParams, void>(
    'POST',
    `/api/Framework/ConfigureUploadFolder`,
    props
  );

export type InspectionBatchGetAllProps = Omit<
  GetProps<InspectionBatchWithStatisticDto[] | null, unknown, void>,
  'path'
>;

export const InspectionBatchGetAll = (props: InspectionBatchGetAllProps) => (
  <Get<InspectionBatchWithStatisticDto[] | null, unknown, void>
    path={`/api/services/propertyInspection/InspectionBatch/GetAll`}
    {...props}
  />
);

export type UseInspectionBatchGetAllProps = Omit<UseGetProps<InspectionBatchWithStatisticDto[] | null, void>, 'path'>;

export const useInspectionBatchGetAll = (props: UseInspectionBatchGetAllProps) =>
  useGet<InspectionBatchWithStatisticDto[] | null, unknown, void>(
    `/api/services/propertyInspection/InspectionBatch/GetAll`,
    props
  );

export interface InspectionBatchGetPropertiesQueryParams {
  /**
   * Id of the InspectionBatchAssignment
   */
  Id?: string;
}

export type InspectionBatchGetPropertiesProps = Omit<
  GetProps<InspectionBatchPropertyDto[] | null, unknown, InspectionBatchGetPropertiesQueryParams>,
  'path'
>;

export const InspectionBatchGetProperties = (props: InspectionBatchGetPropertiesProps) => (
  <Get<InspectionBatchPropertyDto[] | null, unknown, InspectionBatchGetPropertiesQueryParams>
    path={`/api/services/propertyInspection/InspectionBatch/GetProperties`}
    {...props}
  />
);

export type UseInspectionBatchGetPropertiesProps = Omit<
  UseGetProps<InspectionBatchPropertyDto[] | null, InspectionBatchGetPropertiesQueryParams>,
  'path'
>;

export const useInspectionBatchGetProperties = (props: UseInspectionBatchGetPropertiesProps) =>
  useGet<InspectionBatchPropertyDto[] | null, unknown, InspectionBatchGetPropertiesQueryParams>(
    `/api/services/propertyInspection/InspectionBatch/GetProperties`,
    props
  );

export type InspectionBatchCreateProps = Omit<
  MutateProps<PropertyGroupDto, unknown, void, PropertyGroupCreateDto>,
  'path' | 'verb'
>;

export const InspectionBatchCreate = (props: InspectionBatchCreateProps) => (
  <Mutate<PropertyGroupDto, unknown, void, PropertyGroupCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionBatch/Create`}
    {...props}
  />
);

export type UseInspectionBatchCreateProps = Omit<
  UseMutateProps<PropertyGroupDto, void, PropertyGroupCreateDto>,
  'path' | 'verb'
>;

export const useInspectionBatchCreate = (props: UseInspectionBatchCreateProps) =>
  useMutate<PropertyGroupDto, unknown, void, PropertyGroupCreateDto>(
    'POST',
    `/api/services/propertyInspection/InspectionBatch/Create`,
    props
  );

export type InspectionBatchVerifyTransformerProps = Omit<
  MutateProps<void, unknown, void, UpdateTransformerDetailsInput>,
  'path' | 'verb'
>;

export const InspectionBatchVerifyTransformer = (props: InspectionBatchVerifyTransformerProps) => (
  <Mutate<void, unknown, void, UpdateTransformerDetailsInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionBatch/VerifyTransformer`}
    {...props}
  />
);

export type UseInspectionBatchVerifyTransformerProps = Omit<
  UseMutateProps<void, void, UpdateTransformerDetailsInput>,
  'path' | 'verb'
>;

export const useInspectionBatchVerifyTransformer = (props: UseInspectionBatchVerifyTransformerProps) =>
  useMutate<void, unknown, void, UpdateTransformerDetailsInput>(
    'POST',
    `/api/services/propertyInspection/InspectionBatch/VerifyTransformer`,
    props
  );

export interface InspectionBatchAssignmentGetQueryParams {
  Id?: string;
}

export type InspectionBatchAssignmentGetProps = Omit<
  GetProps<InspectionBatchAssignmentDtoAjaxResponse, AjaxResponseBase, InspectionBatchAssignmentGetQueryParams>,
  'path'
>;

export const InspectionBatchAssignmentGet = (props: InspectionBatchAssignmentGetProps) => (
  <Get<InspectionBatchAssignmentDtoAjaxResponse, AjaxResponseBase, InspectionBatchAssignmentGetQueryParams>
    path={`/api/services/propertyInspection/InspectionBatchAssignment/Get`}
    {...props}
  />
);

export type UseInspectionBatchAssignmentGetProps = Omit<
  UseGetProps<InspectionBatchAssignmentDtoAjaxResponse, InspectionBatchAssignmentGetQueryParams>,
  'path'
>;

export const useInspectionBatchAssignmentGet = (props: UseInspectionBatchAssignmentGetProps) =>
  useGet<InspectionBatchAssignmentDtoAjaxResponse, AjaxResponseBase, InspectionBatchAssignmentGetQueryParams>(
    `/api/services/propertyInspection/InspectionBatchAssignment/Get`,
    props
  );

export type InspectionBatchAssignmentCreateProps = Omit<
  MutateProps<InspectionBatchAssignmentDtoAjaxResponse, AjaxResponseBase, void, InspectionBatchAssignmentCreateDto>,
  'path' | 'verb'
>;

export const InspectionBatchAssignmentCreate = (props: InspectionBatchAssignmentCreateProps) => (
  <Mutate<InspectionBatchAssignmentDtoAjaxResponse, AjaxResponseBase, void, InspectionBatchAssignmentCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionBatchAssignment/Create`}
    {...props}
  />
);

export type UseInspectionBatchAssignmentCreateProps = Omit<
  UseMutateProps<InspectionBatchAssignmentDtoAjaxResponse, void, InspectionBatchAssignmentCreateDto>,
  'path' | 'verb'
>;

export const useInspectionBatchAssignmentCreate = (props: UseInspectionBatchAssignmentCreateProps) =>
  useMutate<InspectionBatchAssignmentDtoAjaxResponse, AjaxResponseBase, void, InspectionBatchAssignmentCreateDto>(
    'POST',
    `/api/services/propertyInspection/InspectionBatchAssignment/Create`,
    props
  );

export type InspectionBatchAssignmentUpdateProps = Omit<
  MutateProps<InspectionBatchAssignmentDto, AjaxResponseBase, void, InspectionBatchAssignmentDto>,
  'path' | 'verb'
>;

export const InspectionBatchAssignmentUpdate = (props: InspectionBatchAssignmentUpdateProps) => (
  <Mutate<InspectionBatchAssignmentDto, AjaxResponseBase, void, InspectionBatchAssignmentDto>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionBatchAssignment/Update`}
    {...props}
  />
);

export type UseInspectionBatchAssignmentUpdateProps = Omit<
  UseMutateProps<InspectionBatchAssignmentDto, void, InspectionBatchAssignmentDto>,
  'path' | 'verb'
>;

export const useInspectionBatchAssignmentUpdate = (props: UseInspectionBatchAssignmentUpdateProps) =>
  useMutate<InspectionBatchAssignmentDto, AjaxResponseBase, void, InspectionBatchAssignmentDto>(
    'PUT',
    `/api/services/propertyInspection/InspectionBatchAssignment/Update`,
    props
  );

export interface InspectionBatchAssignmentGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type InspectionBatchAssignmentGetAllProps = Omit<
  GetProps<InspectionBatchAssignmentDtoPagedResultDto, AjaxResponseBase, InspectionBatchAssignmentGetAllQueryParams>,
  'path'
>;

export const InspectionBatchAssignmentGetAll = (props: InspectionBatchAssignmentGetAllProps) => (
  <Get<InspectionBatchAssignmentDtoPagedResultDto, AjaxResponseBase, InspectionBatchAssignmentGetAllQueryParams>
    path={`/api/services/propertyInspection/InspectionBatchAssignment/GetAll`}
    {...props}
  />
);

export type UseInspectionBatchAssignmentGetAllProps = Omit<
  UseGetProps<InspectionBatchAssignmentDtoPagedResultDto, InspectionBatchAssignmentGetAllQueryParams>,
  'path'
>;

export const useInspectionBatchAssignmentGetAll = (props: UseInspectionBatchAssignmentGetAllProps) =>
  useGet<InspectionBatchAssignmentDtoPagedResultDto, AjaxResponseBase, InspectionBatchAssignmentGetAllQueryParams>(
    `/api/services/propertyInspection/InspectionBatchAssignment/GetAll`,
    props
  );

export interface InspectionBatchAssignmentDeleteQueryParams {
  Id?: string;
}

export type InspectionBatchAssignmentDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, InspectionBatchAssignmentDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const InspectionBatchAssignmentDelete = (props: InspectionBatchAssignmentDeleteProps) => (
  <Mutate<void, AjaxResponseBase, InspectionBatchAssignmentDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/InspectionBatchAssignment/Delete`}
    {...props}
  />
);

export type UseInspectionBatchAssignmentDeleteProps = Omit<
  UseMutateProps<void, InspectionBatchAssignmentDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const useInspectionBatchAssignmentDelete = (props: UseInspectionBatchAssignmentDeleteProps) =>
  useMutate<void, AjaxResponseBase, InspectionBatchAssignmentDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/InspectionBatchAssignment/Delete`,
    props
  );

export type InspectionProjectGetProjectsProps = Omit<
  GetProps<InspectionProjectDto[] | null, AjaxResponseBase, void>,
  'path'
>;

export const InspectionProjectGetProjects = (props: InspectionProjectGetProjectsProps) => (
  <Get<InspectionProjectDto[] | null, AjaxResponseBase, void>
    path={`/api/services/propertyInspection/InspectionProject/GetProjects`}
    {...props}
  />
);

export type UseInspectionProjectGetProjectsProps = Omit<UseGetProps<InspectionProjectDto[] | null, void>, 'path'>;

export const useInspectionProjectGetProjects = (props: UseInspectionProjectGetProjectsProps) =>
  useGet<InspectionProjectDto[] | null, AjaxResponseBase, void>(
    `/api/services/propertyInspection/InspectionProject/GetProjects`,
    props
  );

export interface InspectionProjectAutocompleteQueryParams {
  term?: string | null;
}

export type InspectionProjectAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionProjectAutocompleteQueryParams>,
  'path'
>;

export const InspectionProjectAutocomplete = (props: InspectionProjectAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionProjectAutocompleteQueryParams>
    path={`/api/services/propertyInspection/InspectionProject/Autocomplete`}
    {...props}
  />
);

export type UseInspectionProjectAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, InspectionProjectAutocompleteQueryParams>,
  'path'
>;

export const useInspectionProjectAutocomplete = (props: UseInspectionProjectAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionProjectAutocompleteQueryParams>(
    `/api/services/propertyInspection/InspectionProject/Autocomplete`,
    props
  );

export interface InspectionProjectGetQueryParams {
  Id?: string;
}

export type InspectionProjectGetProps = Omit<
  GetProps<InspectionProjectDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetQueryParams>,
  'path'
>;

export const InspectionProjectGet = (props: InspectionProjectGetProps) => (
  <Get<InspectionProjectDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetQueryParams>
    path={`/api/services/propertyInspection/InspectionProject/Get`}
    {...props}
  />
);

export type UseInspectionProjectGetProps = Omit<
  UseGetProps<InspectionProjectDtoAjaxResponse, InspectionProjectGetQueryParams>,
  'path'
>;

export const useInspectionProjectGet = (props: UseInspectionProjectGetProps) =>
  useGet<InspectionProjectDtoAjaxResponse, AjaxResponseBase, InspectionProjectGetQueryParams>(
    `/api/services/propertyInspection/InspectionProject/Get`,
    props
  );

export interface InspectionProjectGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type InspectionProjectGetAllProps = Omit<
  GetProps<InspectionProjectDtoPagedResultDto, AjaxResponseBase, InspectionProjectGetAllQueryParams>,
  'path'
>;

export const InspectionProjectGetAll = (props: InspectionProjectGetAllProps) => (
  <Get<InspectionProjectDtoPagedResultDto, AjaxResponseBase, InspectionProjectGetAllQueryParams>
    path={`/api/services/propertyInspection/InspectionProject/GetAll`}
    {...props}
  />
);

export type UseInspectionProjectGetAllProps = Omit<
  UseGetProps<InspectionProjectDtoPagedResultDto, InspectionProjectGetAllQueryParams>,
  'path'
>;

export const useInspectionProjectGetAll = (props: UseInspectionProjectGetAllProps) =>
  useGet<InspectionProjectDtoPagedResultDto, AjaxResponseBase, InspectionProjectGetAllQueryParams>(
    `/api/services/propertyInspection/InspectionProject/GetAll`,
    props
  );

export type InspectionProjectCreateProps = Omit<
  MutateProps<InspectionProjectDto, AjaxResponseBase, void, InspectionProjectCreateDto>,
  'path' | 'verb'
>;

export const InspectionProjectCreate = (props: InspectionProjectCreateProps) => (
  <Mutate<InspectionProjectDto, AjaxResponseBase, void, InspectionProjectCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProject/Create`}
    {...props}
  />
);

export type UseInspectionProjectCreateProps = Omit<
  UseMutateProps<InspectionProjectDto, void, InspectionProjectCreateDto>,
  'path' | 'verb'
>;

export const useInspectionProjectCreate = (props: UseInspectionProjectCreateProps) =>
  useMutate<InspectionProjectDto, AjaxResponseBase, void, InspectionProjectCreateDto>(
    'POST',
    `/api/services/propertyInspection/InspectionProject/Create`,
    props
  );

export type InspectionProjectUpdateProps = Omit<
  MutateProps<InspectionProjectDto, AjaxResponseBase, void, InspectionProjectDto>,
  'path' | 'verb'
>;

export const InspectionProjectUpdate = (props: InspectionProjectUpdateProps) => (
  <Mutate<InspectionProjectDto, AjaxResponseBase, void, InspectionProjectDto>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionProject/Update`}
    {...props}
  />
);

export type UseInspectionProjectUpdateProps = Omit<
  UseMutateProps<InspectionProjectDto, void, InspectionProjectDto>,
  'path' | 'verb'
>;

export const useInspectionProjectUpdate = (props: UseInspectionProjectUpdateProps) =>
  useMutate<InspectionProjectDto, AjaxResponseBase, void, InspectionProjectDto>(
    'PUT',
    `/api/services/propertyInspection/InspectionProject/Update`,
    props
  );

export interface InspectionProjectDeleteQueryParams {
  Id?: string;
}

export type InspectionProjectDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, InspectionProjectDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const InspectionProjectDelete = (props: InspectionProjectDeleteProps) => (
  <Mutate<void, AjaxResponseBase, InspectionProjectDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/InspectionProject/Delete`}
    {...props}
  />
);

export type UseInspectionProjectDeleteProps = Omit<
  UseMutateProps<void, InspectionProjectDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const useInspectionProjectDelete = (props: UseInspectionProjectDeleteProps) =>
  useMutate<void, AjaxResponseBase, InspectionProjectDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/InspectionProject/Delete`,
    props
  );

export interface InspectionPropertyGetQueryParams {
  id?: string;
}

export type InspectionPropertyGetProps = Omit<
  GetProps<InspectionPropertyDto, unknown, InspectionPropertyGetQueryParams>,
  'path'
>;

export const InspectionPropertyGet = (props: InspectionPropertyGetProps) => (
  <Get<InspectionPropertyDto, unknown, InspectionPropertyGetQueryParams>
    path={`/api/services/propertyInspection/InspectionProperty/Get`}
    {...props}
  />
);

export type UseInspectionPropertyGetProps = Omit<
  UseGetProps<InspectionPropertyDto, InspectionPropertyGetQueryParams>,
  'path'
>;

export const useInspectionPropertyGet = (props: UseInspectionPropertyGetProps) =>
  useGet<InspectionPropertyDto, unknown, InspectionPropertyGetQueryParams>(
    `/api/services/propertyInspection/InspectionProperty/Get`,
    props
  );

export type InspectionPropertyCreateProps = Omit<
  MutateProps<InspectionPropertyDto, unknown, void, CreateInspectionPropertyDto>,
  'path' | 'verb'
>;

export const InspectionPropertyCreate = (props: InspectionPropertyCreateProps) => (
  <Mutate<InspectionPropertyDto, unknown, void, CreateInspectionPropertyDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/Create`}
    {...props}
  />
);

export type UseInspectionPropertyCreateProps = Omit<
  UseMutateProps<InspectionPropertyDto, void, CreateInspectionPropertyDto>,
  'path' | 'verb'
>;

export const useInspectionPropertyCreate = (props: UseInspectionPropertyCreateProps) =>
  useMutate<InspectionPropertyDto, unknown, void, CreateInspectionPropertyDto>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/Create`,
    props
  );

export type InspectionPropertyUpdatePropertyDetailsProps = Omit<
  MutateProps<InspectionPropertyDto, unknown, void, UpdatePropertyDetailsInput>,
  'path' | 'verb'
>;

export const InspectionPropertyUpdatePropertyDetails = (props: InspectionPropertyUpdatePropertyDetailsProps) => (
  <Mutate<InspectionPropertyDto, unknown, void, UpdatePropertyDetailsInput>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionProperty/UpdatePropertyDetails`}
    {...props}
  />
);

export type UseInspectionPropertyUpdatePropertyDetailsProps = Omit<
  UseMutateProps<InspectionPropertyDto, void, UpdatePropertyDetailsInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyUpdatePropertyDetails = (props: UseInspectionPropertyUpdatePropertyDetailsProps) =>
  useMutate<InspectionPropertyDto, unknown, void, UpdatePropertyDetailsInput>(
    'PUT',
    `/api/services/propertyInspection/InspectionProperty/UpdatePropertyDetails`,
    props
  );

export type InspectionPropertyVerifyPropertyProps = Omit<
  MutateProps<void, unknown, void, UpdateInspectionPropertyDetailsInput>,
  'path' | 'verb'
>;

export const InspectionPropertyVerifyProperty = (props: InspectionPropertyVerifyPropertyProps) => (
  <Mutate<void, unknown, void, UpdateInspectionPropertyDetailsInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/VerifyProperty`}
    {...props}
  />
);

export type UseInspectionPropertyVerifyPropertyProps = Omit<
  UseMutateProps<void, void, UpdateInspectionPropertyDetailsInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyVerifyProperty = (props: UseInspectionPropertyVerifyPropertyProps) =>
  useMutate<void, unknown, void, UpdateInspectionPropertyDetailsInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/VerifyProperty`,
    props
  );

export type InspectionPropertyUpdateCustomerDetailsProps = Omit<
  MutateProps<InspectionPropertyDto, unknown, void, UpdateCustomerDetailsInput>,
  'path' | 'verb'
>;

export const InspectionPropertyUpdateCustomerDetails = (props: InspectionPropertyUpdateCustomerDetailsProps) => (
  <Mutate<InspectionPropertyDto, unknown, void, UpdateCustomerDetailsInput>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionProperty/UpdateCustomerDetails`}
    {...props}
  />
);

export type UseInspectionPropertyUpdateCustomerDetailsProps = Omit<
  UseMutateProps<InspectionPropertyDto, void, UpdateCustomerDetailsInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyUpdateCustomerDetails = (props: UseInspectionPropertyUpdateCustomerDetailsProps) =>
  useMutate<InspectionPropertyDto, unknown, void, UpdateCustomerDetailsInput>(
    'PUT',
    `/api/services/propertyInspection/InspectionProperty/UpdateCustomerDetails`,
    props
  );

export type InspectionPropertyUpdateInspectionStatusProps = Omit<
  MutateProps<InspectionPropertyDto, unknown, void, UpdateInspectionStatusInput>,
  'path' | 'verb'
>;

export const InspectionPropertyUpdateInspectionStatus = (props: InspectionPropertyUpdateInspectionStatusProps) => (
  <Mutate<InspectionPropertyDto, unknown, void, UpdateInspectionStatusInput>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionProperty/UpdateInspectionStatus`}
    {...props}
  />
);

export type UseInspectionPropertyUpdateInspectionStatusProps = Omit<
  UseMutateProps<InspectionPropertyDto, void, UpdateInspectionStatusInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyUpdateInspectionStatus = (props: UseInspectionPropertyUpdateInspectionStatusProps) =>
  useMutate<InspectionPropertyDto, unknown, void, UpdateInspectionStatusInput>(
    'PUT',
    `/api/services/propertyInspection/InspectionProperty/UpdateInspectionStatus`,
    props
  );

export type InspectionPropertyCheckInProps = Omit<
  MutateProps<InspectionPropertyCheckInDto, unknown, void, InspectionPropertyCheckInInput>,
  'path' | 'verb'
>;

export const InspectionPropertyCheckIn = (props: InspectionPropertyCheckInProps) => (
  <Mutate<InspectionPropertyCheckInDto, unknown, void, InspectionPropertyCheckInInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/CheckIn`}
    {...props}
  />
);

export type UseInspectionPropertyCheckInProps = Omit<
  UseMutateProps<InspectionPropertyCheckInDto, void, InspectionPropertyCheckInInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyCheckIn = (props: UseInspectionPropertyCheckInProps) =>
  useMutate<InspectionPropertyCheckInDto, unknown, void, InspectionPropertyCheckInInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/CheckIn`,
    props
  );

export type InspectionPropertyAssignInspectorProps = Omit<
  MutateProps<void, unknown, void, AssignInspectorInput>,
  'path' | 'verb'
>;

export const InspectionPropertyAssignInspector = (props: InspectionPropertyAssignInspectorProps) => (
  <Mutate<void, unknown, void, AssignInspectorInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/AssignInspector`}
    {...props}
  />
);

export type UseInspectionPropertyAssignInspectorProps = Omit<
  UseMutateProps<void, void, AssignInspectorInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyAssignInspector = (props: UseInspectionPropertyAssignInspectorProps) =>
  useMutate<void, unknown, void, AssignInspectorInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/AssignInspector`,
    props
  );

export type InspectionPropertyNoAccessProps = Omit<MutateProps<void, unknown, void, NoAccessInput>, 'path' | 'verb'>;

export const InspectionPropertyNoAccess = (props: InspectionPropertyNoAccessProps) => (
  <Mutate<void, unknown, void, NoAccessInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/NoAccess`}
    {...props}
  />
);

export type UseInspectionPropertyNoAccessProps = Omit<UseMutateProps<void, void, NoAccessInput>, 'path' | 'verb'>;

export const useInspectionPropertyNoAccess = (props: UseInspectionPropertyNoAccessProps) =>
  useMutate<void, unknown, void, NoAccessInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/NoAccess`,
    props
  );

export type InspectionPropertyUnElectrifiedHouseProps = Omit<
  MutateProps<void, unknown, void, PropertyVisitInput>,
  'path' | 'verb'
>;

export const InspectionPropertyUnElectrifiedHouse = (props: InspectionPropertyUnElectrifiedHouseProps) => (
  <Mutate<void, unknown, void, PropertyVisitInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/UnElectrifiedHouse`}
    {...props}
  />
);

export type UseInspectionPropertyUnElectrifiedHouseProps = Omit<
  UseMutateProps<void, void, PropertyVisitInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyUnElectrifiedHouse = (props: UseInspectionPropertyUnElectrifiedHouseProps) =>
  useMutate<void, unknown, void, PropertyVisitInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/UnElectrifiedHouse`,
    props
  );

export type InspectionPropertyAccessGrantedProps = Omit<
  MutateProps<void, unknown, void, PropertyVisitInput>,
  'path' | 'verb'
>;

export const InspectionPropertyAccessGranted = (props: InspectionPropertyAccessGrantedProps) => (
  <Mutate<void, unknown, void, PropertyVisitInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/AccessGranted`}
    {...props}
  />
);

export type UseInspectionPropertyAccessGrantedProps = Omit<
  UseMutateProps<void, void, PropertyVisitInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyAccessGranted = (props: UseInspectionPropertyAccessGrantedProps) =>
  useMutate<void, unknown, void, PropertyVisitInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/AccessGranted`,
    props
  );

export type InspectionPropertyReportVisitFindingsProps = Omit<
  MutateProps<void, unknown, void, ReportFindingsInput>,
  'path' | 'verb'
>;

export const InspectionPropertyReportVisitFindings = (props: InspectionPropertyReportVisitFindingsProps) => (
  <Mutate<void, unknown, void, ReportFindingsInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/ReportVisitFindings`}
    {...props}
  />
);

export type UseInspectionPropertyReportVisitFindingsProps = Omit<
  UseMutateProps<void, void, ReportFindingsInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyReportVisitFindings = (props: UseInspectionPropertyReportVisitFindingsProps) =>
  useMutate<void, unknown, void, ReportFindingsInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/ReportVisitFindings`,
    props
  );

export type InspectionPropertyReassignProps = Omit<
  MutateProps<void, unknown, void, ReassignPropertyInput>,
  'path' | 'verb'
>;

export const InspectionPropertyReassign = (props: InspectionPropertyReassignProps) => (
  <Mutate<void, unknown, void, ReassignPropertyInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionProperty/Reassign`}
    {...props}
  />
);

export type UseInspectionPropertyReassignProps = Omit<
  UseMutateProps<void, void, ReassignPropertyInput>,
  'path' | 'verb'
>;

export const useInspectionPropertyReassign = (props: UseInspectionPropertyReassignProps) =>
  useMutate<void, unknown, void, ReassignPropertyInput>(
    'POST',
    `/api/services/propertyInspection/InspectionProperty/Reassign`,
    props
  );

export type InspectionTeamGetMyTeamsProps = Omit<GetProps<InspectionTeamDto[] | null, AjaxResponseBase, void>, 'path'>;

export const InspectionTeamGetMyTeams = (props: InspectionTeamGetMyTeamsProps) => (
  <Get<InspectionTeamDto[] | null, AjaxResponseBase, void>
    path={`/api/services/propertyInspection/InspectionTeam/GetMyTeams`}
    {...props}
  />
);

export type UseInspectionTeamGetMyTeamsProps = Omit<UseGetProps<InspectionTeamDto[] | null, void>, 'path'>;

export const useInspectionTeamGetMyTeams = (props: UseInspectionTeamGetMyTeamsProps) =>
  useGet<InspectionTeamDto[] | null, AjaxResponseBase, void>(
    `/api/services/propertyInspection/InspectionTeam/GetMyTeams`,
    props
  );

export interface InspectionTeamGetTeamMembersQueryParams {
  id?: string;
}

export type InspectionTeamGetTeamMembersProps = Omit<
  GetProps<TeamMemberDto[] | null, AjaxResponseBase, InspectionTeamGetTeamMembersQueryParams>,
  'path'
>;

export const InspectionTeamGetTeamMembers = (props: InspectionTeamGetTeamMembersProps) => (
  <Get<TeamMemberDto[] | null, AjaxResponseBase, InspectionTeamGetTeamMembersQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetTeamMembers`}
    {...props}
  />
);

export type UseInspectionTeamGetTeamMembersProps = Omit<
  UseGetProps<TeamMemberDto[] | null, InspectionTeamGetTeamMembersQueryParams>,
  'path'
>;

export const useInspectionTeamGetTeamMembers = (props: UseInspectionTeamGetTeamMembersProps) =>
  useGet<TeamMemberDto[] | null, AjaxResponseBase, InspectionTeamGetTeamMembersQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetTeamMembers`,
    props
  );

export type InspectionTeamCreateProps = Omit<
  MutateProps<InspectionTeamDto, AjaxResponseBase, void, InspectionTeamCreateDto>,
  'path' | 'verb'
>;

export const InspectionTeamCreate = (props: InspectionTeamCreateProps) => (
  <Mutate<InspectionTeamDto, AjaxResponseBase, void, InspectionTeamCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionTeam/Create`}
    {...props}
  />
);

export type UseInspectionTeamCreateProps = Omit<
  UseMutateProps<InspectionTeamDto, void, InspectionTeamCreateDto>,
  'path' | 'verb'
>;

export const useInspectionTeamCreate = (props: UseInspectionTeamCreateProps) =>
  useMutate<InspectionTeamDto, AjaxResponseBase, void, InspectionTeamCreateDto>(
    'POST',
    `/api/services/propertyInspection/InspectionTeam/Create`,
    props
  );

export interface InspectionTeamAutocompleteQueryParams {
  term?: string | null;
}

export type InspectionTeamAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionTeamAutocompleteQueryParams>,
  'path'
>;

export const InspectionTeamAutocomplete = (props: InspectionTeamAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionTeamAutocompleteQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/Autocomplete`}
    {...props}
  />
);

export type UseInspectionTeamAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, InspectionTeamAutocompleteQueryParams>,
  'path'
>;

export const useInspectionTeamAutocomplete = (props: UseInspectionTeamAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, InspectionTeamAutocompleteQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/Autocomplete`,
    props
  );

export interface InspectionTeamGetQueryParams {
  Id?: string;
}

export type InspectionTeamGetProps = Omit<
  GetProps<InspectionTeamDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetQueryParams>,
  'path'
>;

export const InspectionTeamGet = (props: InspectionTeamGetProps) => (
  <Get<InspectionTeamDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/Get`}
    {...props}
  />
);

export type UseInspectionTeamGetProps = Omit<
  UseGetProps<InspectionTeamDtoAjaxResponse, InspectionTeamGetQueryParams>,
  'path'
>;

export const useInspectionTeamGet = (props: UseInspectionTeamGetProps) =>
  useGet<InspectionTeamDtoAjaxResponse, AjaxResponseBase, InspectionTeamGetQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/Get`,
    props
  );

export type InspectionTeamAddMemberProps = Omit<
  MutateProps<void, AjaxResponseBase, void, AddInspectionTeamMemberInput>,
  'path' | 'verb'
>;

/**
 * Adds team member
 */
export const InspectionTeamAddMember = (props: InspectionTeamAddMemberProps) => (
  <Mutate<void, AjaxResponseBase, void, AddInspectionTeamMemberInput>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionTeam/AddMember`}
    {...props}
  />
);

export type UseInspectionTeamAddMemberProps = Omit<
  UseMutateProps<void, void, AddInspectionTeamMemberInput>,
  'path' | 'verb'
>;

/**
 * Adds team member
 */
export const useInspectionTeamAddMember = (props: UseInspectionTeamAddMemberProps) =>
  useMutate<void, AjaxResponseBase, void, AddInspectionTeamMemberInput>(
    'POST',
    `/api/services/propertyInspection/InspectionTeam/AddMember`,
    props
  );

export type InspectionTeamRemoveMemberProps = Omit<
  MutateProps<void, AjaxResponseBase, void, GuidEntityDto>,
  'path' | 'verb'
>;

/**
 * Removes team member
 */
export const InspectionTeamRemoveMember = (props: InspectionTeamRemoveMemberProps) => (
  <Mutate<void, AjaxResponseBase, void, GuidEntityDto>
    verb="POST"
    path={`/api/services/propertyInspection/InspectionTeam/RemoveMember`}
    {...props}
  />
);

export type UseInspectionTeamRemoveMemberProps = Omit<UseMutateProps<void, void, GuidEntityDto>, 'path' | 'verb'>;

/**
 * Removes team member
 */
export const useInspectionTeamRemoveMember = (props: UseInspectionTeamRemoveMemberProps) =>
  useMutate<void, AjaxResponseBase, void, GuidEntityDto>(
    'POST',
    `/api/services/propertyInspection/InspectionTeam/RemoveMember`,
    props
  );

export interface InspectionTeamGetTeamCalendarQueryParams {
  /**
   * Id of the inspection team
   */
  id?: string;
  currentEventId?: string | null;
  start?: string;
  end?: string;
}

export type InspectionTeamGetTeamCalendarProps = Omit<
  GetProps<CalendarEventDto[] | null, AjaxResponseBase, InspectionTeamGetTeamCalendarQueryParams>,
  'path'
>;

/**
 * Returns calendar events for the inspection team
 */
export const InspectionTeamGetTeamCalendar = (props: InspectionTeamGetTeamCalendarProps) => (
  <Get<CalendarEventDto[] | null, AjaxResponseBase, InspectionTeamGetTeamCalendarQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetTeamCalendar`}
    {...props}
  />
);

export type UseInspectionTeamGetTeamCalendarProps = Omit<
  UseGetProps<CalendarEventDto[] | null, InspectionTeamGetTeamCalendarQueryParams>,
  'path'
>;

/**
 * Returns calendar events for the inspection team
 */
export const useInspectionTeamGetTeamCalendar = (props: UseInspectionTeamGetTeamCalendarProps) =>
  useGet<CalendarEventDto[] | null, AjaxResponseBase, InspectionTeamGetTeamCalendarQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetTeamCalendar`,
    props
  );

export type InspectionTeamUpdateProps = Omit<
  MutateProps<InspectionTeamDto, AjaxResponseBase, void, InspectionTeamDto>,
  'path' | 'verb'
>;

export const InspectionTeamUpdate = (props: InspectionTeamUpdateProps) => (
  <Mutate<InspectionTeamDto, AjaxResponseBase, void, InspectionTeamDto>
    verb="PUT"
    path={`/api/services/propertyInspection/InspectionTeam/Update`}
    {...props}
  />
);

export type UseInspectionTeamUpdateProps = Omit<
  UseMutateProps<InspectionTeamDto, void, InspectionTeamDto>,
  'path' | 'verb'
>;

export const useInspectionTeamUpdate = (props: UseInspectionTeamUpdateProps) =>
  useMutate<InspectionTeamDto, AjaxResponseBase, void, InspectionTeamDto>(
    'PUT',
    `/api/services/propertyInspection/InspectionTeam/Update`,
    props
  );

export interface InspectionTeamGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type InspectionTeamGetAllProps = Omit<
  GetProps<InspectionTeamDtoPagedResultDto, AjaxResponseBase, InspectionTeamGetAllQueryParams>,
  'path'
>;

export const InspectionTeamGetAll = (props: InspectionTeamGetAllProps) => (
  <Get<InspectionTeamDtoPagedResultDto, AjaxResponseBase, InspectionTeamGetAllQueryParams>
    path={`/api/services/propertyInspection/InspectionTeam/GetAll`}
    {...props}
  />
);

export type UseInspectionTeamGetAllProps = Omit<
  UseGetProps<InspectionTeamDtoPagedResultDto, InspectionTeamGetAllQueryParams>,
  'path'
>;

export const useInspectionTeamGetAll = (props: UseInspectionTeamGetAllProps) =>
  useGet<InspectionTeamDtoPagedResultDto, AjaxResponseBase, InspectionTeamGetAllQueryParams>(
    `/api/services/propertyInspection/InspectionTeam/GetAll`,
    props
  );

export interface InspectionTeamDeleteQueryParams {
  Id?: string;
}

export type InspectionTeamDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, InspectionTeamDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const InspectionTeamDelete = (props: InspectionTeamDeleteProps) => (
  <Mutate<void, AjaxResponseBase, InspectionTeamDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/InspectionTeam/Delete`}
    {...props}
  />
);

export type UseInspectionTeamDeleteProps = Omit<
  UseMutateProps<void, InspectionTeamDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const useInspectionTeamDelete = (props: UseInspectionTeamDeleteProps) =>
  useMutate<void, AjaxResponseBase, InspectionTeamDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/InspectionTeam/Delete`,
    props
  );

export interface MeterGetMetersQueryParams {
  id?: string;
}

export type MeterGetMetersProps = Omit<
  GetProps<MeterWithInspectionDto[] | null, unknown, MeterGetMetersQueryParams>,
  'path'
>;

export const MeterGetMeters = (props: MeterGetMetersProps) => (
  <Get<MeterWithInspectionDto[] | null, unknown, MeterGetMetersQueryParams>
    path={`/api/services/meterInspection/Meter/GetMeters`}
    {...props}
  />
);

export type UseMeterGetMetersProps = Omit<
  UseGetProps<MeterWithInspectionDto[] | null, MeterGetMetersQueryParams>,
  'path'
>;

export const useMeterGetMeters = (props: UseMeterGetMetersProps) =>
  useGet<MeterWithInspectionDto[] | null, unknown, MeterGetMetersQueryParams>(
    `/api/services/meterInspection/Meter/GetMeters`,
    props
  );

export type MeterCreateProps = Omit<MutateProps<MeterDto, unknown, void, CreateMeterDto>, 'path' | 'verb'>;

/**
 * Creates new meter
 */
export const MeterCreate = (props: MeterCreateProps) => (
  <Mutate<MeterDto, unknown, void, CreateMeterDto>
    verb="POST"
    path={`/api/services/meterInspection/Meter/Create`}
    {...props}
  />
);

export type UseMeterCreateProps = Omit<UseMutateProps<MeterDto, void, CreateMeterDto>, 'path' | 'verb'>;

/**
 * Creates new meter
 */
export const useMeterCreate = (props: UseMeterCreateProps) =>
  useMutate<MeterDto, unknown, void, CreateMeterDto>('POST', `/api/services/meterInspection/Meter/Create`, props);

export interface MeterGetQueryParams {
  id?: string;
}

export type MeterGetProps = Omit<GetProps<MeterDto, unknown, MeterGetQueryParams>, 'path'>;

/**
 * Returns details of the meter with selected id
 */
export const MeterGet = (props: MeterGetProps) => (
  <Get<MeterDto, unknown, MeterGetQueryParams> path={`/api/services/meterInspection/Meter/Get`} {...props} />
);

export type UseMeterGetProps = Omit<UseGetProps<MeterDto, MeterGetQueryParams>, 'path'>;

/**
 * Returns details of the meter with selected id
 */
export const useMeterGet = (props: UseMeterGetProps) =>
  useGet<MeterDto, unknown, MeterGetQueryParams>(`/api/services/meterInspection/Meter/Get`, props);

export type MeterSubmitInspectionResultProps = Omit<
  MutateProps<MeterInspectionDto, unknown, void, MeterInspectionInput>,
  'path' | 'verb'
>;

/**
 * Submits meter inspection results
 */
export const MeterSubmitInspectionResult = (props: MeterSubmitInspectionResultProps) => (
  <Mutate<MeterInspectionDto, unknown, void, MeterInspectionInput>
    verb="POST"
    path={`/api/services/meterInspection/Meter/SubmitInspectionResult`}
    {...props}
  />
);

export type UseMeterSubmitInspectionResultProps = Omit<
  UseMutateProps<MeterInspectionDto, void, MeterInspectionInput>,
  'path' | 'verb'
>;

/**
 * Submits meter inspection results
 */
export const useMeterSubmitInspectionResult = (props: UseMeterSubmitInspectionResultProps) =>
  useMutate<MeterInspectionDto, unknown, void, MeterInspectionInput>(
    'POST',
    `/api/services/meterInspection/Meter/SubmitInspectionResult`,
    props
  );

export type OtpSendPinProps = Omit<MutateProps<SendPinDto, unknown, void, SendPinInput>, 'path' | 'verb'>;

export const OtpSendPin = (props: OtpSendPinProps) => (
  <Mutate<SendPinDto, unknown, void, SendPinInput> verb="POST" path={`/api/services/app/Otp/SendPin`} {...props} />
);

export type UseOtpSendPinProps = Omit<UseMutateProps<SendPinDto, void, SendPinInput>, 'path' | 'verb'>;

export const useOtpSendPin = (props: UseOtpSendPinProps) =>
  useMutate<SendPinDto, unknown, void, SendPinInput>('POST', `/api/services/app/Otp/SendPin`, props);

export type OtpVerifyPinProps = Omit<MutateProps<VerifyPinResponse, unknown, void, VerifyPinInput>, 'path' | 'verb'>;

export const OtpVerifyPin = (props: OtpVerifyPinProps) => (
  <Mutate<VerifyPinResponse, unknown, void, VerifyPinInput>
    verb="POST"
    path={`/api/services/app/Otp/VerifyPin`}
    {...props}
  />
);

export type UseOtpVerifyPinProps = Omit<UseMutateProps<VerifyPinResponse, void, VerifyPinInput>, 'path' | 'verb'>;

export const useOtpVerifyPin = (props: UseOtpVerifyPinProps) =>
  useMutate<VerifyPinResponse, unknown, void, VerifyPinInput>('POST', `/api/services/app/Otp/VerifyPin`, props);

export type PersonCreateProps = Omit<
  MutateProps<PersonAccountDto, AjaxResponseBase, void, CreatePersonAccountDto>,
  'path' | 'verb'
>;

export const PersonCreate = (props: PersonCreateProps) => (
  <Mutate<PersonAccountDto, AjaxResponseBase, void, CreatePersonAccountDto>
    verb="POST"
    path={`/api/services/app/Person/Create`}
    {...props}
  />
);

export type UsePersonCreateProps = Omit<
  UseMutateProps<PersonAccountDto, void, CreatePersonAccountDto>,
  'path' | 'verb'
>;

export const usePersonCreate = (props: UsePersonCreateProps) =>
  useMutate<PersonAccountDto, AjaxResponseBase, void, CreatePersonAccountDto>(
    'POST',
    `/api/services/app/Person/Create`,
    props
  );

export interface PersonGetQueryParams {
  Id?: string;
}

export type PersonGetProps = Omit<
  GetProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams>,
  'path'
>;

export const PersonGet = (props: PersonGetProps) => (
  <Get<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams>
    path={`/api/services/app/Person/Get`}
    {...props}
  />
);

export type UsePersonGetProps = Omit<UseGetProps<PersonAccountDtoAjaxResponse, PersonGetQueryParams>, 'path'>;

export const usePersonGet = (props: UsePersonGetProps) =>
  useGet<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams>(`/api/services/app/Person/Get`, props);

export interface PersonAutocompleteByNameQueryParams {
  term?: string | null;
}

export type PersonAutocompleteByNameProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams>,
  'path'
>;

export const PersonAutocompleteByName = (props: PersonAutocompleteByNameProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams>
    path={`/api/services/app/Person/AutocompleteByName`}
    {...props}
  />
);

export type UsePersonAutocompleteByNameProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, PersonAutocompleteByNameQueryParams>,
  'path'
>;

export const usePersonAutocompleteByName = (props: UsePersonAutocompleteByNameProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams>(
    `/api/services/app/Person/AutocompleteByName`,
    props
  );

export interface PersonGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type PersonGetAllProps = Omit<
  GetProps<PersonAccountDtoPagedResultDto, AjaxResponseBase, PersonGetAllQueryParams>,
  'path'
>;

export const PersonGetAll = (props: PersonGetAllProps) => (
  <Get<PersonAccountDtoPagedResultDto, AjaxResponseBase, PersonGetAllQueryParams>
    path={`/api/services/app/Person/GetAll`}
    {...props}
  />
);

export type UsePersonGetAllProps = Omit<UseGetProps<PersonAccountDtoPagedResultDto, PersonGetAllQueryParams>, 'path'>;

export const usePersonGetAll = (props: UsePersonGetAllProps) =>
  useGet<PersonAccountDtoPagedResultDto, AjaxResponseBase, PersonGetAllQueryParams>(
    `/api/services/app/Person/GetAll`,
    props
  );

export type PersonUpdateProps = Omit<
  MutateProps<PersonAccountDto, AjaxResponseBase, void, PersonAccountDto>,
  'path' | 'verb'
>;

export const PersonUpdate = (props: PersonUpdateProps) => (
  <Mutate<PersonAccountDto, AjaxResponseBase, void, PersonAccountDto>
    verb="PUT"
    path={`/api/services/app/Person/Update`}
    {...props}
  />
);

export type UsePersonUpdateProps = Omit<UseMutateProps<PersonAccountDto, void, PersonAccountDto>, 'path' | 'verb'>;

export const usePersonUpdate = (props: UsePersonUpdateProps) =>
  useMutate<PersonAccountDto, AjaxResponseBase, void, PersonAccountDto>(
    'PUT',
    `/api/services/app/Person/Update`,
    props
  );

export interface PersonDeleteQueryParams {
  Id?: string;
}

export type PersonDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, PersonDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const PersonDelete = (props: PersonDeleteProps) => (
  <Mutate<void, AjaxResponseBase, PersonDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/Person/Delete`}
    {...props}
  />
);

export type UsePersonDeleteProps = Omit<UseMutateProps<void, PersonDeleteQueryParams, void>, 'path' | 'verb'>;

export const usePersonDelete = (props: UsePersonDeleteProps) =>
  useMutate<void, AjaxResponseBase, PersonDeleteQueryParams, void>('DELETE', `/api/services/app/Person/Delete`, props);

export interface PropertyGroupAutocompleteQueryParams {
  term?: string | null;
}

export type PropertyGroupAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PropertyGroupAutocompleteQueryParams>,
  'path'
>;

export const PropertyGroupAutocomplete = (props: PropertyGroupAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PropertyGroupAutocompleteQueryParams>
    path={`/api/services/propertyInspection/PropertyGroup/Autocomplete`}
    {...props}
  />
);

export type UsePropertyGroupAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, PropertyGroupAutocompleteQueryParams>,
  'path'
>;

export const usePropertyGroupAutocomplete = (props: UsePropertyGroupAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PropertyGroupAutocompleteQueryParams>(
    `/api/services/propertyInspection/PropertyGroup/Autocomplete`,
    props
  );

export interface PropertyGroupGetQueryParams {
  Id?: string;
}

export type PropertyGroupGetProps = Omit<
  GetProps<PropertyGroupDto, AjaxResponseBase, PropertyGroupGetQueryParams>,
  'path'
>;

export const PropertyGroupGet = (props: PropertyGroupGetProps) => (
  <Get<PropertyGroupDto, AjaxResponseBase, PropertyGroupGetQueryParams>
    path={`/api/services/propertyInspection/PropertyGroup/Get`}
    {...props}
  />
);

export type UsePropertyGroupGetProps = Omit<UseGetProps<PropertyGroupDto, PropertyGroupGetQueryParams>, 'path'>;

export const usePropertyGroupGet = (props: UsePropertyGroupGetProps) =>
  useGet<PropertyGroupDto, AjaxResponseBase, PropertyGroupGetQueryParams>(
    `/api/services/propertyInspection/PropertyGroup/Get`,
    props
  );

export interface PropertyGroupGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type PropertyGroupGetAllProps = Omit<
  GetProps<PropertyGroupDtoPagedResultDto, AjaxResponseBase, PropertyGroupGetAllQueryParams>,
  'path'
>;

export const PropertyGroupGetAll = (props: PropertyGroupGetAllProps) => (
  <Get<PropertyGroupDtoPagedResultDto, AjaxResponseBase, PropertyGroupGetAllQueryParams>
    path={`/api/services/propertyInspection/PropertyGroup/GetAll`}
    {...props}
  />
);

export type UsePropertyGroupGetAllProps = Omit<
  UseGetProps<PropertyGroupDtoPagedResultDto, PropertyGroupGetAllQueryParams>,
  'path'
>;

export const usePropertyGroupGetAll = (props: UsePropertyGroupGetAllProps) =>
  useGet<PropertyGroupDtoPagedResultDto, AjaxResponseBase, PropertyGroupGetAllQueryParams>(
    `/api/services/propertyInspection/PropertyGroup/GetAll`,
    props
  );

export type PropertyGroupCreateProps = Omit<
  MutateProps<PropertyGroupDto, AjaxResponseBase, void, PropertyGroupCreateDto>,
  'path' | 'verb'
>;

export const PropertyGroupCreate = (props: PropertyGroupCreateProps) => (
  <Mutate<PropertyGroupDto, AjaxResponseBase, void, PropertyGroupCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/PropertyGroup/Create`}
    {...props}
  />
);

export type UsePropertyGroupCreateProps = Omit<
  UseMutateProps<PropertyGroupDto, void, PropertyGroupCreateDto>,
  'path' | 'verb'
>;

export const usePropertyGroupCreate = (props: UsePropertyGroupCreateProps) =>
  useMutate<PropertyGroupDto, AjaxResponseBase, void, PropertyGroupCreateDto>(
    'POST',
    `/api/services/propertyInspection/PropertyGroup/Create`,
    props
  );

export type PropertyGroupUpdateProps = Omit<
  MutateProps<PropertyGroupDto, AjaxResponseBase, void, PropertyGroupDto>,
  'path' | 'verb'
>;

export const PropertyGroupUpdate = (props: PropertyGroupUpdateProps) => (
  <Mutate<PropertyGroupDto, AjaxResponseBase, void, PropertyGroupDto>
    verb="PUT"
    path={`/api/services/propertyInspection/PropertyGroup/Update`}
    {...props}
  />
);

export type UsePropertyGroupUpdateProps = Omit<
  UseMutateProps<PropertyGroupDto, void, PropertyGroupDto>,
  'path' | 'verb'
>;

export const usePropertyGroupUpdate = (props: UsePropertyGroupUpdateProps) =>
  useMutate<PropertyGroupDto, AjaxResponseBase, void, PropertyGroupDto>(
    'PUT',
    `/api/services/propertyInspection/PropertyGroup/Update`,
    props
  );

export interface PropertyGroupDeleteQueryParams {
  Id?: string;
}

export type PropertyGroupDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, PropertyGroupDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const PropertyGroupDelete = (props: PropertyGroupDeleteProps) => (
  <Mutate<void, AjaxResponseBase, PropertyGroupDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/PropertyGroup/Delete`}
    {...props}
  />
);

export type UsePropertyGroupDeleteProps = Omit<
  UseMutateProps<void, PropertyGroupDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const usePropertyGroupDelete = (props: UsePropertyGroupDeleteProps) =>
  useMutate<void, AjaxResponseBase, PropertyGroupDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/PropertyGroup/Delete`,
    props
  );

export interface PropertyInspectionGetQueryParams {
  Id?: string;
}

export type PropertyInspectionGetProps = Omit<
  GetProps<PropertyInspectionDtoAjaxResponse, AjaxResponseBase, PropertyInspectionGetQueryParams>,
  'path'
>;

export const PropertyInspectionGet = (props: PropertyInspectionGetProps) => (
  <Get<PropertyInspectionDtoAjaxResponse, AjaxResponseBase, PropertyInspectionGetQueryParams>
    path={`/api/services/propertyInspection/PropertyInspection/Get`}
    {...props}
  />
);

export type UsePropertyInspectionGetProps = Omit<
  UseGetProps<PropertyInspectionDtoAjaxResponse, PropertyInspectionGetQueryParams>,
  'path'
>;

export const usePropertyInspectionGet = (props: UsePropertyInspectionGetProps) =>
  useGet<PropertyInspectionDtoAjaxResponse, AjaxResponseBase, PropertyInspectionGetQueryParams>(
    `/api/services/propertyInspection/PropertyInspection/Get`,
    props
  );

export interface PropertyInspectionGetLastVisitQueryParams {
  id?: string;
}

export type PropertyInspectionGetLastVisitProps = Omit<
  GetProps<PropertyVisitDto, AjaxResponseBase, PropertyInspectionGetLastVisitQueryParams>,
  'path'
>;

export const PropertyInspectionGetLastVisit = (props: PropertyInspectionGetLastVisitProps) => (
  <Get<PropertyVisitDto, AjaxResponseBase, PropertyInspectionGetLastVisitQueryParams>
    path={`/api/services/propertyInspection/PropertyInspection/GetLastVisit`}
    {...props}
  />
);

export type UsePropertyInspectionGetLastVisitProps = Omit<
  UseGetProps<PropertyVisitDto, PropertyInspectionGetLastVisitQueryParams>,
  'path'
>;

export const usePropertyInspectionGetLastVisit = (props: UsePropertyInspectionGetLastVisitProps) =>
  useGet<PropertyVisitDto, AjaxResponseBase, PropertyInspectionGetLastVisitQueryParams>(
    `/api/services/propertyInspection/PropertyInspection/GetLastVisit`,
    props
  );

export interface PropertyInspectionGetDetailsQueryParams {
  Id?: string;
}

export type PropertyInspectionGetDetailsProps = Omit<
  GetProps<PropertyInspectionDetailsDtoAjaxResponse, AjaxResponseBase, PropertyInspectionGetDetailsQueryParams>,
  'path'
>;

export const PropertyInspectionGetDetails = (props: PropertyInspectionGetDetailsProps) => (
  <Get<PropertyInspectionDetailsDtoAjaxResponse, AjaxResponseBase, PropertyInspectionGetDetailsQueryParams>
    path={`/api/services/propertyInspection/PropertyInspection/GetDetails`}
    {...props}
  />
);

export type UsePropertyInspectionGetDetailsProps = Omit<
  UseGetProps<PropertyInspectionDetailsDtoAjaxResponse, PropertyInspectionGetDetailsQueryParams>,
  'path'
>;

export const usePropertyInspectionGetDetails = (props: UsePropertyInspectionGetDetailsProps) =>
  useGet<PropertyInspectionDetailsDtoAjaxResponse, AjaxResponseBase, PropertyInspectionGetDetailsQueryParams>(
    `/api/services/propertyInspection/PropertyInspection/GetDetails`,
    props
  );

export type PropertyInspectionUpdateProps = Omit<
  MutateProps<PropertyInspectionDtoAjaxResponse, AjaxResponseBase, void, PropertyInspectionDetailsDto>,
  'path' | 'verb'
>;

export const PropertyInspectionUpdate = (props: PropertyInspectionUpdateProps) => (
  <Mutate<PropertyInspectionDtoAjaxResponse, AjaxResponseBase, void, PropertyInspectionDetailsDto>
    verb="PUT"
    path={`/api/services/propertyInspection/PropertyInspection/Update`}
    {...props}
  />
);

export type UsePropertyInspectionUpdateProps = Omit<
  UseMutateProps<PropertyInspectionDtoAjaxResponse, void, PropertyInspectionDetailsDto>,
  'path' | 'verb'
>;

export const usePropertyInspectionUpdate = (props: UsePropertyInspectionUpdateProps) =>
  useMutate<PropertyInspectionDtoAjaxResponse, AjaxResponseBase, void, PropertyInspectionDetailsDto>(
    'PUT',
    `/api/services/propertyInspection/PropertyInspection/Update`,
    props
  );

export interface PropertyInspectionGetVisitsPhotosQueryParams {
  Id?: string;
}

export type PropertyInspectionGetVisitsPhotosProps = Omit<
  GetProps<StoredFileDtoListAjaxResponse, AjaxResponseBase, PropertyInspectionGetVisitsPhotosQueryParams>,
  'path'
>;

/**
 * Returns list of images attached to property visits
 */
export const PropertyInspectionGetVisitsPhotos = (props: PropertyInspectionGetVisitsPhotosProps) => (
  <Get<StoredFileDtoListAjaxResponse, AjaxResponseBase, PropertyInspectionGetVisitsPhotosQueryParams>
    path={`/api/services/propertyInspection/PropertyInspection/GetVisitsPhotos`}
    {...props}
  />
);

export type UsePropertyInspectionGetVisitsPhotosProps = Omit<
  UseGetProps<StoredFileDtoListAjaxResponse, PropertyInspectionGetVisitsPhotosQueryParams>,
  'path'
>;

/**
 * Returns list of images attached to property visits
 */
export const usePropertyInspectionGetVisitsPhotos = (props: UsePropertyInspectionGetVisitsPhotosProps) =>
  useGet<StoredFileDtoListAjaxResponse, AjaxResponseBase, PropertyInspectionGetVisitsPhotosQueryParams>(
    `/api/services/propertyInspection/PropertyInspection/GetVisitsPhotos`,
    props
  );

export interface PropertyInspectionGetMeterInspectionsPhotosQueryParams {
  Id?: string;
}

export type PropertyInspectionGetMeterInspectionsPhotosProps = Omit<
  GetProps<StoredFileDtoListAjaxResponse, AjaxResponseBase, PropertyInspectionGetMeterInspectionsPhotosQueryParams>,
  'path'
>;

/**
 * Returns list of images attached to meter inspections
 */
export const PropertyInspectionGetMeterInspectionsPhotos = (
  props: PropertyInspectionGetMeterInspectionsPhotosProps
) => (
  <Get<StoredFileDtoListAjaxResponse, AjaxResponseBase, PropertyInspectionGetMeterInspectionsPhotosQueryParams>
    path={`/api/services/propertyInspection/PropertyInspection/GetMeterInspectionsPhotos`}
    {...props}
  />
);

export type UsePropertyInspectionGetMeterInspectionsPhotosProps = Omit<
  UseGetProps<StoredFileDtoListAjaxResponse, PropertyInspectionGetMeterInspectionsPhotosQueryParams>,
  'path'
>;

/**
 * Returns list of images attached to meter inspections
 */
export const usePropertyInspectionGetMeterInspectionsPhotos = (
  props: UsePropertyInspectionGetMeterInspectionsPhotosProps
) =>
  useGet<StoredFileDtoListAjaxResponse, AjaxResponseBase, PropertyInspectionGetMeterInspectionsPhotosQueryParams>(
    `/api/services/propertyInspection/PropertyInspection/GetMeterInspectionsPhotos`,
    props
  );

export type PropertyInspectionUpdateRevisitProps = Omit<
  MutateProps<void, AjaxResponseBase, void, UpdateRevisitInput>,
  'path' | 'verb'
>;

/**
 * Updates date of revisit
 */
export const PropertyInspectionUpdateRevisit = (props: PropertyInspectionUpdateRevisitProps) => (
  <Mutate<void, AjaxResponseBase, void, UpdateRevisitInput>
    verb="POST"
    path={`/api/services/propertyInspection/PropertyInspection/UpdateRevisit`}
    {...props}
  />
);

export type UsePropertyInspectionUpdateRevisitProps = Omit<
  UseMutateProps<void, void, UpdateRevisitInput>,
  'path' | 'verb'
>;

/**
 * Updates date of revisit
 */
export const usePropertyInspectionUpdateRevisit = (props: UsePropertyInspectionUpdateRevisitProps) =>
  useMutate<void, AjaxResponseBase, void, UpdateRevisitInput>(
    'POST',
    `/api/services/propertyInspection/PropertyInspection/UpdateRevisit`,
    props
  );

export interface PropertyInspectionGetAllQueryParams {
  Sorting?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type PropertyInspectionGetAllProps = Omit<
  GetProps<PropertyInspectionDtoPagedResultDto, AjaxResponseBase, PropertyInspectionGetAllQueryParams>,
  'path'
>;

export const PropertyInspectionGetAll = (props: PropertyInspectionGetAllProps) => (
  <Get<PropertyInspectionDtoPagedResultDto, AjaxResponseBase, PropertyInspectionGetAllQueryParams>
    path={`/api/services/propertyInspection/PropertyInspection/GetAll`}
    {...props}
  />
);

export type UsePropertyInspectionGetAllProps = Omit<
  UseGetProps<PropertyInspectionDtoPagedResultDto, PropertyInspectionGetAllQueryParams>,
  'path'
>;

export const usePropertyInspectionGetAll = (props: UsePropertyInspectionGetAllProps) =>
  useGet<PropertyInspectionDtoPagedResultDto, AjaxResponseBase, PropertyInspectionGetAllQueryParams>(
    `/api/services/propertyInspection/PropertyInspection/GetAll`,
    props
  );

export type PropertyInspectionCreateProps = Omit<
  MutateProps<PropertyInspectionDto, AjaxResponseBase, void, PropertyInspectionCreateDto>,
  'path' | 'verb'
>;

export const PropertyInspectionCreate = (props: PropertyInspectionCreateProps) => (
  <Mutate<PropertyInspectionDto, AjaxResponseBase, void, PropertyInspectionCreateDto>
    verb="POST"
    path={`/api/services/propertyInspection/PropertyInspection/Create`}
    {...props}
  />
);

export type UsePropertyInspectionCreateProps = Omit<
  UseMutateProps<PropertyInspectionDto, void, PropertyInspectionCreateDto>,
  'path' | 'verb'
>;

export const usePropertyInspectionCreate = (props: UsePropertyInspectionCreateProps) =>
  useMutate<PropertyInspectionDto, AjaxResponseBase, void, PropertyInspectionCreateDto>(
    'POST',
    `/api/services/propertyInspection/PropertyInspection/Create`,
    props
  );

export interface PropertyInspectionDeleteQueryParams {
  Id?: string;
}

export type PropertyInspectionDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, PropertyInspectionDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const PropertyInspectionDelete = (props: PropertyInspectionDeleteProps) => (
  <Mutate<void, AjaxResponseBase, PropertyInspectionDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/propertyInspection/PropertyInspection/Delete`}
    {...props}
  />
);

export type UsePropertyInspectionDeleteProps = Omit<
  UseMutateProps<void, PropertyInspectionDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const usePropertyInspectionDelete = (props: UsePropertyInspectionDeleteProps) =>
  useMutate<void, AjaxResponseBase, PropertyInspectionDeleteQueryParams, void>(
    'DELETE',
    `/api/services/propertyInspection/PropertyInspection/Delete`,
    props
  );

export type RevisitGetAllProps = Omit<GetProps<RevisitDto[] | null, unknown, void>, 'path'>;

export const RevisitGetAll = (props: RevisitGetAllProps) => (
  <Get<RevisitDto[] | null, unknown, void> path={`/api/services/propertyInspection/Revisit/GetAll`} {...props} />
);

export type UseRevisitGetAllProps = Omit<UseGetProps<RevisitDto[] | null, void>, 'path'>;

export const useRevisitGetAll = (props: UseRevisitGetAllProps) =>
  useGet<RevisitDto[] | null, unknown, void>(`/api/services/propertyInspection/Revisit/GetAll`, props);

export type RoleCreateProps = Omit<MutateProps<RoleDto, unknown, void, CreateRoleDto>, 'path' | 'verb'>;

export const RoleCreate = (props: RoleCreateProps) => (
  <Mutate<RoleDto, unknown, void, CreateRoleDto> verb="POST" path={`/api/services/app/Role/Create`} {...props} />
);

export type UseRoleCreateProps = Omit<UseMutateProps<RoleDto, void, CreateRoleDto>, 'path' | 'verb'>;

export const useRoleCreate = (props: UseRoleCreateProps) =>
  useMutate<RoleDto, unknown, void, CreateRoleDto>('POST', `/api/services/app/Role/Create`, props);

export interface RoleGetRolesQueryParams {
  Permission?: string | null;
}

export type RoleGetRolesProps = Omit<GetProps<RoleListDtoListResultDto, unknown, RoleGetRolesQueryParams>, 'path'>;

export const RoleGetRoles = (props: RoleGetRolesProps) => (
  <Get<RoleListDtoListResultDto, unknown, RoleGetRolesQueryParams>
    path={`/api/services/app/Role/GetRoles`}
    {...props}
  />
);

export type UseRoleGetRolesProps = Omit<UseGetProps<RoleListDtoListResultDto, RoleGetRolesQueryParams>, 'path'>;

export const useRoleGetRoles = (props: UseRoleGetRolesProps) =>
  useGet<RoleListDtoListResultDto, unknown, RoleGetRolesQueryParams>(`/api/services/app/Role/GetRoles`, props);

export type RoleUpdateProps = Omit<MutateProps<RoleDto, unknown, void, RoleDto>, 'path' | 'verb'>;

export const RoleUpdate = (props: RoleUpdateProps) => (
  <Mutate<RoleDto, unknown, void, RoleDto> verb="PUT" path={`/api/services/app/Role/Update`} {...props} />
);

export type UseRoleUpdateProps = Omit<UseMutateProps<RoleDto, void, RoleDto>, 'path' | 'verb'>;

export const useRoleUpdate = (props: UseRoleUpdateProps) =>
  useMutate<RoleDto, unknown, void, RoleDto>('PUT', `/api/services/app/Role/Update`, props);

export interface RoleDeleteQueryParams {
  Id?: number;
}

export type RoleDeleteProps = Omit<MutateProps<void, unknown, RoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const RoleDelete = (props: RoleDeleteProps) => (
  <Mutate<void, unknown, RoleDeleteQueryParams, void> verb="DELETE" path={`/api/services/app/Role/Delete`} {...props} />
);

export type UseRoleDeleteProps = Omit<UseMutateProps<void, RoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const useRoleDelete = (props: UseRoleDeleteProps) =>
  useMutate<void, unknown, RoleDeleteQueryParams, void>('DELETE', `/api/services/app/Role/Delete`, props);

export type RoleGetAllPermissionsProps = Omit<GetProps<PermissionDtoListResultDto, unknown, void>, 'path'>;

export const RoleGetAllPermissions = (props: RoleGetAllPermissionsProps) => (
  <Get<PermissionDtoListResultDto, unknown, void> path={`/api/services/app/Role/GetAllPermissions`} {...props} />
);

export type UseRoleGetAllPermissionsProps = Omit<UseGetProps<PermissionDtoListResultDto, void>, 'path'>;

export const useRoleGetAllPermissions = (props: UseRoleGetAllPermissionsProps) =>
  useGet<PermissionDtoListResultDto, unknown, void>(`/api/services/app/Role/GetAllPermissions`, props);

export interface RoleGetRoleForEditQueryParams {
  Id?: number;
}

export type RoleGetRoleForEditProps = Omit<
  GetProps<GetRoleForEditOutput, unknown, RoleGetRoleForEditQueryParams>,
  'path'
>;

export const RoleGetRoleForEdit = (props: RoleGetRoleForEditProps) => (
  <Get<GetRoleForEditOutput, unknown, RoleGetRoleForEditQueryParams>
    path={`/api/services/app/Role/GetRoleForEdit`}
    {...props}
  />
);

export type UseRoleGetRoleForEditProps = Omit<UseGetProps<GetRoleForEditOutput, RoleGetRoleForEditQueryParams>, 'path'>;

export const useRoleGetRoleForEdit = (props: UseRoleGetRoleForEditProps) =>
  useGet<GetRoleForEditOutput, unknown, RoleGetRoleForEditQueryParams>(`/api/services/app/Role/GetRoleForEdit`, props);

export interface RoleGetQueryParams {
  Id?: number;
}

export type RoleGetProps = Omit<GetProps<RoleDto, unknown, RoleGetQueryParams>, 'path'>;

export const RoleGet = (props: RoleGetProps) => (
  <Get<RoleDto, unknown, RoleGetQueryParams> path={`/api/services/app/Role/Get`} {...props} />
);

export type UseRoleGetProps = Omit<UseGetProps<RoleDto, RoleGetQueryParams>, 'path'>;

export const useRoleGet = (props: UseRoleGetProps) =>
  useGet<RoleDto, unknown, RoleGetQueryParams>(`/api/services/app/Role/Get`, props);

export interface RoleGetAllQueryParams {
  Keyword?: string | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type RoleGetAllProps = Omit<GetProps<RoleDtoPagedResultDto, unknown, RoleGetAllQueryParams>, 'path'>;

export const RoleGetAll = (props: RoleGetAllProps) => (
  <Get<RoleDtoPagedResultDto, unknown, RoleGetAllQueryParams> path={`/api/services/app/Role/GetAll`} {...props} />
);

export type UseRoleGetAllProps = Omit<UseGetProps<RoleDtoPagedResultDto, RoleGetAllQueryParams>, 'path'>;

export const useRoleGetAll = (props: UseRoleGetAllProps) =>
  useGet<RoleDtoPagedResultDto, unknown, RoleGetAllQueryParams>(`/api/services/app/Role/GetAll`, props);

export type SessionGetCurrentLoginInformationsProps = Omit<
  GetProps<GetCurrentLoginInformationsOutput, unknown, void>,
  'path'
>;

export const SessionGetCurrentLoginInformations = (props: SessionGetCurrentLoginInformationsProps) => (
  <Get<GetCurrentLoginInformationsOutput, unknown, void>
    path={`/api/services/app/Session/GetCurrentLoginInformations`}
    {...props}
  />
);

export type UseSessionGetCurrentLoginInformationsProps = Omit<
  UseGetProps<GetCurrentLoginInformationsOutput, void>,
  'path'
>;

export const useSessionGetCurrentLoginInformations = (props: UseSessionGetCurrentLoginInformationsProps) =>
  useGet<GetCurrentLoginInformationsOutput, unknown, void>(
    `/api/services/app/Session/GetCurrentLoginInformations`,
    props
  );

export interface StoredFileDownloadQueryParams {
  id?: string;
  versionNo?: number | null;
}

export type StoredFileDownloadProps = Omit<GetProps<void, unknown, StoredFileDownloadQueryParams>, 'path'>;

export const StoredFileDownload = (props: StoredFileDownloadProps) => (
  <Get<void, unknown, StoredFileDownloadQueryParams> path={`/api/StoredFile/Download`} {...props} />
);

export type UseStoredFileDownloadProps = Omit<UseGetProps<void, StoredFileDownloadQueryParams>, 'path'>;

export const useStoredFileDownload = (props: UseStoredFileDownloadProps) =>
  useGet<void, unknown, StoredFileDownloadQueryParams>(`/api/StoredFile/Download`, props);

export type StoredFileUploadProps = Omit<MutateProps<StoredFileDto, unknown, void, void>, 'path' | 'verb'>;

export const StoredFileUpload = (props: StoredFileUploadProps) => (
  <Mutate<StoredFileDto, unknown, void, void> verb="POST" path={`/api/StoredFile/Upload`} {...props} />
);

export type UseStoredFileUploadProps = Omit<UseMutateProps<StoredFileDto, void, void>, 'path' | 'verb'>;

export const useStoredFileUpload = (props: UseStoredFileUploadProps) =>
  useMutate<StoredFileDto, unknown, void, void>('POST', `/api/StoredFile/Upload`, props);

export type StoredFileDeleteProps = Omit<MutateProps<boolean, unknown, void, DeleteStoredFileInput>, 'path' | 'verb'>;

export const StoredFileDelete = (props: StoredFileDeleteProps) => (
  <Mutate<boolean, unknown, void, DeleteStoredFileInput> verb="DELETE" path={`/api/StoredFile/Delete`} {...props} />
);

export type UseStoredFileDeleteProps = Omit<UseMutateProps<boolean, void, DeleteStoredFileInput>, 'path' | 'verb'>;

export const useStoredFileDelete = (props: UseStoredFileDeleteProps) =>
  useMutate<boolean, unknown, void, DeleteStoredFileInput>('DELETE', `/api/StoredFile/Delete`, props);

export interface StoredFileDownloadZipQueryParams {
  AllCategories?: boolean;
  OwnerId?: string | null;
  OwnerType?: string | null;
  FilesCategory?: number | null;
  PropertyName?: string | null;
}

export type StoredFileDownloadZipProps = Omit<GetProps<void, unknown, StoredFileDownloadZipQueryParams>, 'path'>;

export const StoredFileDownloadZip = (props: StoredFileDownloadZipProps) => (
  <Get<void, unknown, StoredFileDownloadZipQueryParams> path={`/api/StoredFile/DownloadZip`} {...props} />
);

export type UseStoredFileDownloadZipProps = Omit<UseGetProps<void, StoredFileDownloadZipQueryParams>, 'path'>;

export const useStoredFileDownloadZip = (props: UseStoredFileDownloadZipProps) =>
  useGet<void, unknown, StoredFileDownloadZipQueryParams>(`/api/StoredFile/DownloadZip`, props);

export interface StoredFileFilesListQueryParams {
  OwnerId?: string | null;
  OwnerType?: string | null;
  FilesCategory?: number | null;
  PropertyName?: string | null;
  AllCategories?: boolean;
}

export type StoredFileFilesListProps = Omit<
  GetProps<StoredFileDto[] | null, unknown, StoredFileFilesListQueryParams>,
  'path'
>;

export const StoredFileFilesList = (props: StoredFileFilesListProps) => (
  <Get<StoredFileDto[] | null, unknown, StoredFileFilesListQueryParams> path={`/api/StoredFile/FilesList`} {...props} />
);

export type UseStoredFileFilesListProps = Omit<
  UseGetProps<StoredFileDto[] | null, StoredFileFilesListQueryParams>,
  'path'
>;

export const useStoredFileFilesList = (props: UseStoredFileFilesListProps) =>
  useGet<StoredFileDto[] | null, unknown, StoredFileFilesListQueryParams>(`/api/StoredFile/FilesList`, props);

export type TenantCreateProps = Omit<MutateProps<TenantDto, unknown, void, CreateTenantDto>, 'path' | 'verb'>;

export const TenantCreate = (props: TenantCreateProps) => (
  <Mutate<TenantDto, unknown, void, CreateTenantDto> verb="POST" path={`/api/services/app/Tenant/Create`} {...props} />
);

export type UseTenantCreateProps = Omit<UseMutateProps<TenantDto, void, CreateTenantDto>, 'path' | 'verb'>;

export const useTenantCreate = (props: UseTenantCreateProps) =>
  useMutate<TenantDto, unknown, void, CreateTenantDto>('POST', `/api/services/app/Tenant/Create`, props);

export interface TenantDeleteQueryParams {
  Id?: number;
}

export type TenantDeleteProps = Omit<MutateProps<void, unknown, TenantDeleteQueryParams, void>, 'path' | 'verb'>;

export const TenantDelete = (props: TenantDeleteProps) => (
  <Mutate<void, unknown, TenantDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/Tenant/Delete`}
    {...props}
  />
);

export type UseTenantDeleteProps = Omit<UseMutateProps<void, TenantDeleteQueryParams, void>, 'path' | 'verb'>;

export const useTenantDelete = (props: UseTenantDeleteProps) =>
  useMutate<void, unknown, TenantDeleteQueryParams, void>('DELETE', `/api/services/app/Tenant/Delete`, props);

export interface TenantGetQueryParams {
  Id?: number;
}

export type TenantGetProps = Omit<GetProps<TenantDto, unknown, TenantGetQueryParams>, 'path'>;

export const TenantGet = (props: TenantGetProps) => (
  <Get<TenantDto, unknown, TenantGetQueryParams> path={`/api/services/app/Tenant/Get`} {...props} />
);

export type UseTenantGetProps = Omit<UseGetProps<TenantDto, TenantGetQueryParams>, 'path'>;

export const useTenantGet = (props: UseTenantGetProps) =>
  useGet<TenantDto, unknown, TenantGetQueryParams>(`/api/services/app/Tenant/Get`, props);

export interface TenantGetAllQueryParams {
  Keyword?: string | null;
  IsActive?: boolean | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type TenantGetAllProps = Omit<GetProps<TenantDtoPagedResultDto, unknown, TenantGetAllQueryParams>, 'path'>;

export const TenantGetAll = (props: TenantGetAllProps) => (
  <Get<TenantDtoPagedResultDto, unknown, TenantGetAllQueryParams> path={`/api/services/app/Tenant/GetAll`} {...props} />
);

export type UseTenantGetAllProps = Omit<UseGetProps<TenantDtoPagedResultDto, TenantGetAllQueryParams>, 'path'>;

export const useTenantGetAll = (props: UseTenantGetAllProps) =>
  useGet<TenantDtoPagedResultDto, unknown, TenantGetAllQueryParams>(`/api/services/app/Tenant/GetAll`, props);

export type TenantUpdateProps = Omit<MutateProps<TenantDto, unknown, void, TenantDto>, 'path' | 'verb'>;

export const TenantUpdate = (props: TenantUpdateProps) => (
  <Mutate<TenantDto, unknown, void, TenantDto> verb="PUT" path={`/api/services/app/Tenant/Update`} {...props} />
);

export type UseTenantUpdateProps = Omit<UseMutateProps<TenantDto, void, TenantDto>, 'path' | 'verb'>;

export const useTenantUpdate = (props: UseTenantUpdateProps) =>
  useMutate<TenantDto, unknown, void, TenantDto>('PUT', `/api/services/app/Tenant/Update`, props);

export type TokenAuthAuthenticateProps = Omit<
  MutateProps<AuthenticateResultModel, unknown, void, AuthenticateModel>,
  'path' | 'verb'
>;

export const TokenAuthAuthenticate = (props: TokenAuthAuthenticateProps) => (
  <Mutate<AuthenticateResultModel, unknown, void, AuthenticateModel>
    verb="POST"
    path={`/api/TokenAuth/Authenticate`}
    {...props}
  />
);

export type UseTokenAuthAuthenticateProps = Omit<
  UseMutateProps<AuthenticateResultModel, void, AuthenticateModel>,
  'path' | 'verb'
>;

export const useTokenAuthAuthenticate = (props: UseTokenAuthAuthenticateProps) =>
  useMutate<AuthenticateResultModel, unknown, void, AuthenticateModel>('POST', `/api/TokenAuth/Authenticate`, props);

export type TokenAuthSignOffProps = Omit<MutateProps<boolean, unknown, void, void>, 'path' | 'verb'>;

export const TokenAuthSignOff = (props: TokenAuthSignOffProps) => (
  <Mutate<boolean, unknown, void, void> verb="POST" path={`/api/TokenAuth/SignOff`} {...props} />
);

export type UseTokenAuthSignOffProps = Omit<UseMutateProps<boolean, void, void>, 'path' | 'verb'>;

export const useTokenAuthSignOff = (props: UseTokenAuthSignOffProps) =>
  useMutate<boolean, unknown, void, void>('POST', `/api/TokenAuth/SignOff`, props);

export type TokenAuthGetExternalAuthenticationProvidersProps = Omit<
  GetProps<ExternalLoginProviderInfoModel[] | null, unknown, void>,
  'path'
>;

export const TokenAuthGetExternalAuthenticationProviders = (
  props: TokenAuthGetExternalAuthenticationProvidersProps
) => (
  <Get<ExternalLoginProviderInfoModel[] | null, unknown, void>
    path={`/api/TokenAuth/GetExternalAuthenticationProviders`}
    {...props}
  />
);

export type UseTokenAuthGetExternalAuthenticationProvidersProps = Omit<
  UseGetProps<ExternalLoginProviderInfoModel[] | null, void>,
  'path'
>;

export const useTokenAuthGetExternalAuthenticationProviders = (
  props: UseTokenAuthGetExternalAuthenticationProvidersProps
) =>
  useGet<ExternalLoginProviderInfoModel[] | null, unknown, void>(
    `/api/TokenAuth/GetExternalAuthenticationProviders`,
    props
  );

export type TokenAuthExternalAuthenticateProps = Omit<
  MutateProps<ExternalAuthenticateResultModel, unknown, void, ExternalAuthenticateModel>,
  'path' | 'verb'
>;

export const TokenAuthExternalAuthenticate = (props: TokenAuthExternalAuthenticateProps) => (
  <Mutate<ExternalAuthenticateResultModel, unknown, void, ExternalAuthenticateModel>
    verb="POST"
    path={`/api/TokenAuth/ExternalAuthenticate`}
    {...props}
  />
);

export type UseTokenAuthExternalAuthenticateProps = Omit<
  UseMutateProps<ExternalAuthenticateResultModel, void, ExternalAuthenticateModel>,
  'path' | 'verb'
>;

export const useTokenAuthExternalAuthenticate = (props: UseTokenAuthExternalAuthenticateProps) =>
  useMutate<ExternalAuthenticateResultModel, unknown, void, ExternalAuthenticateModel>(
    'POST',
    `/api/TokenAuth/ExternalAuthenticate`,
    props
  );

export type UserCreateProps = Omit<MutateProps<UserDto, unknown, void, CreateUserDto>, 'path' | 'verb'>;

export const UserCreate = (props: UserCreateProps) => (
  <Mutate<UserDto, unknown, void, CreateUserDto> verb="POST" path={`/api/services/app/User/Create`} {...props} />
);

export type UseUserCreateProps = Omit<UseMutateProps<UserDto, void, CreateUserDto>, 'path' | 'verb'>;

export const useUserCreate = (props: UseUserCreateProps) =>
  useMutate<UserDto, unknown, void, CreateUserDto>('POST', `/api/services/app/User/Create`, props);

export type UserUpdateProps = Omit<MutateProps<UserDto, unknown, void, UserDto>, 'path' | 'verb'>;

export const UserUpdate = (props: UserUpdateProps) => (
  <Mutate<UserDto, unknown, void, UserDto> verb="PUT" path={`/api/services/app/User/Update`} {...props} />
);

export type UseUserUpdateProps = Omit<UseMutateProps<UserDto, void, UserDto>, 'path' | 'verb'>;

export const useUserUpdate = (props: UseUserUpdateProps) =>
  useMutate<UserDto, unknown, void, UserDto>('PUT', `/api/services/app/User/Update`, props);

export interface UserDeleteQueryParams {
  Id?: number;
}

export type UserDeleteProps = Omit<MutateProps<void, unknown, UserDeleteQueryParams, void>, 'path' | 'verb'>;

export const UserDelete = (props: UserDeleteProps) => (
  <Mutate<void, unknown, UserDeleteQueryParams, void> verb="DELETE" path={`/api/services/app/User/Delete`} {...props} />
);

export type UseUserDeleteProps = Omit<UseMutateProps<void, UserDeleteQueryParams, void>, 'path' | 'verb'>;

export const useUserDelete = (props: UseUserDeleteProps) =>
  useMutate<void, unknown, UserDeleteQueryParams, void>('DELETE', `/api/services/app/User/Delete`, props);

export type UserGetRolesProps = Omit<GetProps<RoleDtoListResultDto, unknown, void>, 'path'>;

export const UserGetRoles = (props: UserGetRolesProps) => (
  <Get<RoleDtoListResultDto, unknown, void> path={`/api/services/app/User/GetRoles`} {...props} />
);

export type UseUserGetRolesProps = Omit<UseGetProps<RoleDtoListResultDto, void>, 'path'>;

export const useUserGetRoles = (props: UseUserGetRolesProps) =>
  useGet<RoleDtoListResultDto, unknown, void>(`/api/services/app/User/GetRoles`, props);

export type UserChangeLanguageProps = Omit<MutateProps<void, unknown, void, ChangeUserLanguageDto>, 'path' | 'verb'>;

export const UserChangeLanguage = (props: UserChangeLanguageProps) => (
  <Mutate<void, unknown, void, ChangeUserLanguageDto>
    verb="POST"
    path={`/api/services/app/User/ChangeLanguage`}
    {...props}
  />
);

export type UseUserChangeLanguageProps = Omit<UseMutateProps<void, void, ChangeUserLanguageDto>, 'path' | 'verb'>;

export const useUserChangeLanguage = (props: UseUserChangeLanguageProps) =>
  useMutate<void, unknown, void, ChangeUserLanguageDto>('POST', `/api/services/app/User/ChangeLanguage`, props);

export interface UserResetPasswordSendOtpQueryParams {
  /**
   * mobile number of the user
   */
  mobileNo?: string | null;
}

export type UserResetPasswordSendOtpProps = Omit<
  MutateProps<ResetPasswordSendOtpResponse, unknown, UserResetPasswordSendOtpQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Send One-time pin for password reset
 */
export const UserResetPasswordSendOtp = (props: UserResetPasswordSendOtpProps) => (
  <Mutate<ResetPasswordSendOtpResponse, unknown, UserResetPasswordSendOtpQueryParams, void>
    verb="POST"
    path={`/api/services/app/User/ResetPasswordSendOtp`}
    {...props}
  />
);

export type UseUserResetPasswordSendOtpProps = Omit<
  UseMutateProps<ResetPasswordSendOtpResponse, UserResetPasswordSendOtpQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Send One-time pin for password reset
 */
export const useUserResetPasswordSendOtp = (props: UseUserResetPasswordSendOtpProps) =>
  useMutate<ResetPasswordSendOtpResponse, unknown, UserResetPasswordSendOtpQueryParams, void>(
    'POST',
    `/api/services/app/User/ResetPasswordSendOtp`,
    props
  );

export type UserResetPasswordVerifyOtpProps = Omit<
  MutateProps<ResetPasswordVerifyOtpResponse, unknown, void, ResetPasswordVerifyOtpInput>,
  'path' | 'verb'
>;

/**
 * Verify one-time pin that was used for password reset. Returns a token that should be used for password update
 */
export const UserResetPasswordVerifyOtp = (props: UserResetPasswordVerifyOtpProps) => (
  <Mutate<ResetPasswordVerifyOtpResponse, unknown, void, ResetPasswordVerifyOtpInput>
    verb="POST"
    path={`/api/services/app/User/ResetPasswordVerifyOtp`}
    {...props}
  />
);

export type UseUserResetPasswordVerifyOtpProps = Omit<
  UseMutateProps<ResetPasswordVerifyOtpResponse, void, ResetPasswordVerifyOtpInput>,
  'path' | 'verb'
>;

/**
 * Verify one-time pin that was used for password reset. Returns a token that should be used for password update
 */
export const useUserResetPasswordVerifyOtp = (props: UseUserResetPasswordVerifyOtpProps) =>
  useMutate<ResetPasswordVerifyOtpResponse, unknown, void, ResetPasswordVerifyOtpInput>(
    'POST',
    `/api/services/app/User/ResetPasswordVerifyOtp`,
    props
  );

export type UserResetPasswordUsingTokenProps = Omit<
  MutateProps<boolean, unknown, void, ResetPasswordUsingTokenInput>,
  'path' | 'verb'
>;

/**
 * Resets a password of the user using token
 */
export const UserResetPasswordUsingToken = (props: UserResetPasswordUsingTokenProps) => (
  <Mutate<boolean, unknown, void, ResetPasswordUsingTokenInput>
    verb="POST"
    path={`/api/services/app/User/ResetPasswordUsingToken`}
    {...props}
  />
);

export type UseUserResetPasswordUsingTokenProps = Omit<
  UseMutateProps<boolean, void, ResetPasswordUsingTokenInput>,
  'path' | 'verb'
>;

/**
 * Resets a password of the user using token
 */
export const useUserResetPasswordUsingToken = (props: UseUserResetPasswordUsingTokenProps) =>
  useMutate<boolean, unknown, void, ResetPasswordUsingTokenInput>(
    'POST',
    `/api/services/app/User/ResetPasswordUsingToken`,
    props
  );

export type UserChangePasswordProps = Omit<MutateProps<boolean, unknown, void, ChangePasswordDto>, 'path' | 'verb'>;

export const UserChangePassword = (props: UserChangePasswordProps) => (
  <Mutate<boolean, unknown, void, ChangePasswordDto>
    verb="POST"
    path={`/api/services/app/User/ChangePassword`}
    {...props}
  />
);

export type UseUserChangePasswordProps = Omit<UseMutateProps<boolean, void, ChangePasswordDto>, 'path' | 'verb'>;

export const useUserChangePassword = (props: UseUserChangePasswordProps) =>
  useMutate<boolean, unknown, void, ChangePasswordDto>('POST', `/api/services/app/User/ChangePassword`, props);

export type UserResetPasswordProps = Omit<MutateProps<boolean, unknown, void, ResetPasswordDto>, 'path' | 'verb'>;

export const UserResetPassword = (props: UserResetPasswordProps) => (
  <Mutate<boolean, unknown, void, ResetPasswordDto>
    verb="POST"
    path={`/api/services/app/User/ResetPassword`}
    {...props}
  />
);

export type UseUserResetPasswordProps = Omit<UseMutateProps<boolean, void, ResetPasswordDto>, 'path' | 'verb'>;

export const useUserResetPassword = (props: UseUserResetPasswordProps) =>
  useMutate<boolean, unknown, void, ResetPasswordDto>('POST', `/api/services/app/User/ResetPassword`, props);

export interface UserGetQueryParams {
  Id?: number;
}

export type UserGetProps = Omit<GetProps<UserDto, unknown, UserGetQueryParams>, 'path'>;

export const UserGet = (props: UserGetProps) => (
  <Get<UserDto, unknown, UserGetQueryParams> path={`/api/services/app/User/Get`} {...props} />
);

export type UseUserGetProps = Omit<UseGetProps<UserDto, UserGetQueryParams>, 'path'>;

export const useUserGet = (props: UseUserGetProps) =>
  useGet<UserDto, unknown, UserGetQueryParams>(`/api/services/app/User/Get`, props);

export interface UserGetAllQueryParams {
  Keyword?: string | null;
  IsActive?: boolean | null;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type UserGetAllProps = Omit<GetProps<UserDtoPagedResultDto, unknown, UserGetAllQueryParams>, 'path'>;

export const UserGetAll = (props: UserGetAllProps) => (
  <Get<UserDtoPagedResultDto, unknown, UserGetAllQueryParams> path={`/api/services/app/User/GetAll`} {...props} />
);

export type UseUserGetAllProps = Omit<UseGetProps<UserDtoPagedResultDto, UserGetAllQueryParams>, 'path'>;

export const useUserGetAll = (props: UseUserGetAllProps) =>
  useGet<UserDtoPagedResultDto, unknown, UserGetAllQueryParams>(`/api/services/app/User/GetAll`, props);
