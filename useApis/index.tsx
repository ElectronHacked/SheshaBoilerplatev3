/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface IsTenantAvailableInput {
  tenancyName: string | null;
}

export type TenantAvailabilityState = number;

export interface IsTenantAvailableOutput {
  state?: TenantAvailabilityState;
  tenantId?: number | null;
}

export interface RegisterInput {
  name: string | null;
  surname: string | null;
  userName: string | null;
  emailAddress: string | null;
  password: string | null;
  captchaResponse?: string | null;
}

export interface RegisterOutput {
  canLogin?: boolean;
}

export interface AutocompleteItemDto {
  value?: string | null;
  displayText?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface AutocompleteItemDtoListAjaxResponse {
  result?: AutocompleteItemDto[] | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface GuidNullableEntityWithDisplayNameDto {
  displayText?: string | null;
  id?: string | null;
}

export interface AreaDto {
  name?: string | null;
  shortName?: string | null;
  parentArea?: GuidNullableEntityWithDisplayNameDto;
  comments?: string | null;
  id?: string;
}

export interface AreaDtoAjaxResponse {
  result?: AreaDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface AreaDtoPagedResultDto {
  totalCount?: number;
  items?: AreaDto[] | null;
}

export interface AreaCreateDto {
  name?: string | null;
  shortName?: string | null;
  parentArea?: GuidNullableEntityWithDisplayNameDto;
  comments?: string | null;
}

export interface ClickatellSettingDto {
  clickatellHost?: string | null;
  clickatellApiUsername?: string | null;
  clickatellApiPassword?: string | null;
  clickatellApiId?: string | null;
}

export interface AjaxResponse {
  result?: { [key: string]: any } | null;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ClickatellSettingDtoAjaxResponse {
  result?: ClickatellSettingDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export type ListSortDirection = number;

export interface DataTableColumnDto {
  propertyName?: string | null;
  filterCaption?: string | null;
  name?: string | null;
  caption?: string | null;
  allowShowHide?: boolean;
  dataType?: string | null;
  visible?: boolean;
  isFilterable?: boolean;
  defaultSorting?: ListSortDirection;
}

export interface DataTableConfigDto {
  id?: string | null;
  pageSize?: number;
  columns?: DataTableColumnDto[] | null;
}

export interface ColumnSortingDto {
  id?: string | null;
  desc?: boolean;
}

export interface ColumnFilterDto {
  columnId?: string | null;
  filterOption?: string | null;
  filter?: { [key: string]: any } | null;
}

export interface DataTableGetDataInput {
  id?: string | null;
  pageSize?: number;
  quickSearch?: string | null;
  currentPage?: number;
  parentEntityId?: string | null;
  sorting?: ColumnSortingDto[] | null;
  filter?: ColumnFilterDto[] | null;
}

export interface DataTableData {
  totalRows?: number;
  totalRowsBeforeFilter?: number;
  totalPages?: number;
  echo?: number;
  rows?:
    | {
        [key: string]: { [key: string]: any };
      }[]
    | null;
}

export interface SmtpSettingsDto {
  host?: string | null;
  port?: number;
  userName?: string | null;
  password?: string | null;
  domain?: string | null;
  enableSsl?: boolean;
  useDefaultCredentials?: boolean;
}

export interface SmtpSettingsDtoAjaxResponse {
  result?: SmtpSettingsDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface SendTestEmailInput {
  to: string | null;
  subject: string | null;
  body: string | null;
}

export interface SendTestEmailDto {
  success?: boolean;
}

export interface SendTestEmailDtoAjaxResponse {
  result?: SendTestEmailDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface FormDto {
  id?: string | null;
  name?: string | null;
  description?: string | null;
  modelType?: string | null;
}

export type OtpSendType = number;

export interface SendPinInput {
  sendTo?: string | null;
  sendType: OtpSendType;
  recipientType?: string | null;
  recipientId?: string | null;
  lifetime?: number | null;
}

export interface SendPinDto {
  operationId?: string;
  sentTo?: string | null;
}

export interface VerifyPinInput {
  operationId?: string;
  pin?: string | null;
}

export interface VerifyPinResponse {
  isSuccess?: boolean;
  errorMessage?: string | null;
}

export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number;
}

export interface CreatePersonAccountDto {
  userName: string | null;
  password: string | null;
  firstName: string | null;
  lastName: string | null;
  mobileNumber?: string | null;
  emailAddress: string | null;
  typeOfAccount?: ReferenceListItemValueDto;
}

export interface PersonAccountDto {
  userName: string | null;
  firstName: string | null;
  lastName: string | null;
  mobileNumber?: string | null;
  emailAddress: string | null;
  typeOfAccount?: ReferenceListItemValueDto;
  id?: string;
}

export interface PersonAccountDtoAjaxResponse {
  result?: PersonAccountDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface PersonAccountDtoPagedResultDto {
  totalCount?: number;
  items?: PersonAccountDto[] | null;
}

export interface CreateRoleDto {
  name: string | null;
  displayName: string | null;
  normalizedName?: string | null;
  description?: string | null;
  grantedPermissions?: string[] | null;
}

export interface RoleDto {
  name: string | null;
  displayName: string | null;
  normalizedName?: string | null;
  description?: string | null;
  grantedPermissions?: string[] | null;
  id?: number;
}

export interface RoleListDto {
  name?: string | null;
  displayName?: string | null;
  isStatic?: boolean;
  isDefault?: boolean;
  creationTime?: string;
  id?: number;
}

export interface RoleListDtoListResultDto {
  items?: RoleListDto[] | null;
}

export interface PermissionDto {
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
  id?: number;
}

export interface PermissionDtoListResultDto {
  items?: PermissionDto[] | null;
}

export interface RoleEditDto {
  name: string | null;
  displayName: string | null;
  description?: string | null;
  isStatic?: boolean;
  id?: number;
}

export interface FlatPermissionDto {
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
}

export interface GetRoleForEditOutput {
  role?: RoleEditDto;
  permissions?: FlatPermissionDto[] | null;
  grantedPermissionNames?: string[] | null;
}

export interface RoleDtoPagedResultDto {
  totalCount?: number;
  items?: RoleDto[] | null;
}

export interface ApplicationInfoDto {
  version?: string | null;
  releaseDate?: string;
  features?: {
    [key: string]: boolean;
  } | null;
}

export interface UserLoginInfoDto {
  accountFound?: boolean;
  userName?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  fullName?: string | null;
  picture?: string | null;
  email?: string | null;
  mobileNumber?: string | null;
  hasRegistered?: boolean;
  loginProvider?: string | null;
  homeUrl?: string | null;
  isSelfServiceUser?: boolean;
  grantedPermissions?: string[] | null;
  id?: number;
}

export interface TenantLoginInfoDto {
  tenancyName?: string | null;
  name?: string | null;
  id?: number;
}

export interface GetCurrentLoginInformationsOutput {
  application?: ApplicationInfoDto;
  user?: UserLoginInfoDto;
  tenant?: TenantLoginInfoDto;
}

export interface CreateShaRoleDto {
  name: string | null;
  nameSpace?: string | null;
  description?: string | null;
  canAssignToMultiple?: boolean;
  canAssignToPerson?: boolean;
  canAssignToRole?: boolean;
  canAssignToOrganisationRoleLevel?: boolean;
  canAssignToUnit?: boolean;
}

export interface ShaRoleDto {
  name: string | null;
  nameSpace?: string | null;
  description?: string | null;
  isRegionSpecific?: boolean;
  canAssignToMultiple?: boolean;
  canAssignToPerson?: boolean;
  canAssignToRole?: boolean;
  canAssignToOrganisationRoleLevel?: boolean;
  canAssignToUnit?: boolean;
  id?: string;
}

export interface ShaRoleDtoAjaxResponse {
  result?: ShaRoleDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ShaRoleDtoPagedResultDto {
  totalCount?: number;
  items?: ShaRoleDto[] | null;
}

export interface GuidEntityWithDisplayNameDto {
  displayText?: string | null;
  id?: string;
}

export interface CreateShaRoleAppointedPersonDto {
  roleId?: string;
  person?: GuidNullableEntityWithDisplayNameDto;
  regions?: GuidEntityWithDisplayNameDto[] | null;
}

export interface ShaRoleAppointedPersonDto {
  roleId?: string;
  person?: GuidNullableEntityWithDisplayNameDto;
  regions?: GuidEntityWithDisplayNameDto[] | null;
  id?: string;
}

export interface ShaRoleAppointedPersonDtoAjaxResponse {
  result?: ShaRoleAppointedPersonDto;
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface GuidEntityDto {
  id?: string;
}

export interface StoredFileDto {
  error?: string | null;
  id?: string | null;
  name?: string | null;
  fileCategory?: number | null;
  url?: string | null;
  size?: number;
  type?: string | null;
}

export interface DeleteStoredFileInput {
  fileId?: string;
  ownerId: string | null;
  ownerType: string | null;
  filesCategory?: number | null;
  propertyName?: string | null;
}

export interface CreateTenantDto {
  tenancyName: string | null;
  name: string | null;
  adminEmailAddress: string | null;
  connectionString?: string | null;
  isActive?: boolean;
}

export interface TenantDto {
  tenancyName: string | null;
  name: string | null;
  isActive?: boolean;
  id?: number;
}

export interface TenantDtoPagedResultDto {
  totalCount?: number;
  items?: TenantDto[] | null;
}

export interface AuthenticateModel {
  userNameOrEmailAddress: string | null;
  password: string | null;
}

export interface AuthenticateResultModel {
  accessToken?: string | null;
  encryptedAccessToken?: string | null;
  expireInSeconds?: number;
  expireOn?: string;
  userId?: number;
  personId?: string | null;
}

export interface ExternalLoginProviderInfoModel {
  name?: string | null;
  clientId?: string | null;
}

export interface ExternalAuthenticateModel {
  authProvider: string | null;
  providerKey: string | null;
  providerAccessCode: string | null;
}

export interface ExternalAuthenticateResultModel {
  accessToken?: string | null;
  encryptedAccessToken?: string | null;
  expireInSeconds?: number;
  waitingForActivation?: boolean;
}

export interface CreateUserDto {
  userName: string | null;
  name: string | null;
  surname: string | null;
  emailAddress: string | null;
  isActive?: boolean;
  roleNames?: string[] | null;
  password: string | null;
}

export interface UserDto {
  userName: string | null;
  name: string | null;
  surname: string | null;
  emailAddress: string | null;
  isActive?: boolean;
  fullName?: string | null;
  lastLoginTime?: string | null;
  creationTime?: string;
  roleNames?: string[] | null;
  id?: number;
}

export interface RoleDtoListResultDto {
  items?: RoleDto[] | null;
}

export interface ChangeUserLanguageDto {
  languageName: string | null;
}

export interface ResetPasswordSendOtpResponse {
  operationId?: string;
}

export interface ResetPasswordVerifyOtpInput {
  mobileNo: string | null;
  operationId?: string;
  pin?: string | null;
}

export interface ResetPasswordVerifyOtpResponse {
  token?: string | null;
  username?: string | null;
  isSuccess?: boolean;
  errorMessage?: string | null;
}

export interface ResetPasswordUsingTokenInput {
  username: string | null;
  token: string | null;
  newPassword: string | null;
}

export interface ChangePasswordDto {
  currentPassword: string | null;
  newPassword: string | null;
}

export interface ResetPasswordDto {
  adminPassword: string | null;
  userId: number;
  newPassword: string | null;
}

export interface AbpUserAuthConfigDto {
  allPermissions?: {
    [key: string]: string;
  } | null;
  grantedPermissions?: {
    [key: string]: string;
  } | null;
}

export interface UserDtoPagedResultDto {
  totalCount?: number;
  items?: UserDto[] | null;
}

export type AccountIsTenantAvailableProps = Omit<
  MutateProps<IsTenantAvailableOutput, unknown, void, IsTenantAvailableInput>,
  'path' | 'verb'
>;

export const AccountIsTenantAvailable = (props: AccountIsTenantAvailableProps) => (
  <Mutate<IsTenantAvailableOutput, unknown, void, IsTenantAvailableInput>
    verb="POST"
    path={`/api/services/app/Account/IsTenantAvailable`}
    {...props}
  />
);

export type UseAccountIsTenantAvailableProps = Omit<
  UseMutateProps<IsTenantAvailableOutput, void, IsTenantAvailableInput>,
  'path' | 'verb'
>;

export const useAccountIsTenantAvailable = (props: UseAccountIsTenantAvailableProps) =>
  useMutate<IsTenantAvailableOutput, unknown, void, IsTenantAvailableInput>(
    'POST',
    `/api/services/app/Account/IsTenantAvailable`,
    props
  );

export type AccountRegisterProps = Omit<MutateProps<RegisterOutput, unknown, void, RegisterInput>, 'path' | 'verb'>;

export const AccountRegister = (props: AccountRegisterProps) => (
  <Mutate<RegisterOutput, unknown, void, RegisterInput>
    verb="POST"
    path={`/api/services/app/Account/Register`}
    {...props}
  />
);

export type UseAccountRegisterProps = Omit<UseMutateProps<RegisterOutput, void, RegisterInput>, 'path' | 'verb'>;

export const useAccountRegister = (props: UseAccountRegisterProps) =>
  useMutate<RegisterOutput, unknown, void, RegisterInput>('POST', `/api/services/app/Account/Register`, props);

export interface AreaAutocompleteQueryParams {
  term?: string;
}

export type AreaAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, AreaAutocompleteQueryParams>,
  'path'
>;

export const AreaAutocomplete = (props: AreaAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, AreaAutocompleteQueryParams>
    path={`/api/services/app/Area/Autocomplete`}
    {...props}
  />
);

export type UseAreaAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AreaAutocompleteQueryParams>,
  'path'
>;

export const useAreaAutocomplete = (props: UseAreaAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, AreaAutocompleteQueryParams>(
    `/api/services/app/Area/Autocomplete`,
    props
  );

export interface AreaGetQueryParams {
  Id?: string;
}

export type AreaGetProps = Omit<GetProps<AreaDtoAjaxResponse, AjaxResponseBase, AreaGetQueryParams>, 'path'>;

export const AreaGet = (props: AreaGetProps) => (
  <Get<AreaDtoAjaxResponse, AjaxResponseBase, AreaGetQueryParams> path={`/api/services/app/Area/Get`} {...props} />
);

export type UseAreaGetProps = Omit<UseGetProps<AreaDtoAjaxResponse, AreaGetQueryParams>, 'path'>;

export const useAreaGet = (props: UseAreaGetProps) =>
  useGet<AreaDtoAjaxResponse, AjaxResponseBase, AreaGetQueryParams>(`/api/services/app/Area/Get`, props);

export interface AreaGetAllQueryParams {
  Sorting?: string;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type AreaGetAllProps = Omit<GetProps<AreaDtoPagedResultDto, AjaxResponseBase, AreaGetAllQueryParams>, 'path'>;

export const AreaGetAll = (props: AreaGetAllProps) => (
  <Get<AreaDtoPagedResultDto, AjaxResponseBase, AreaGetAllQueryParams>
    path={`/api/services/app/Area/GetAll`}
    {...props}
  />
);

export type UseAreaGetAllProps = Omit<UseGetProps<AreaDtoPagedResultDto, AreaGetAllQueryParams>, 'path'>;

export const useAreaGetAll = (props: UseAreaGetAllProps) =>
  useGet<AreaDtoPagedResultDto, AjaxResponseBase, AreaGetAllQueryParams>(`/api/services/app/Area/GetAll`, props);

export type AreaCreateProps = Omit<MutateProps<AreaDto, AjaxResponseBase, void, AreaCreateDto>, 'path' | 'verb'>;

export const AreaCreate = (props: AreaCreateProps) => (
  <Mutate<AreaDto, AjaxResponseBase, void, AreaCreateDto>
    verb="POST"
    path={`/api/services/app/Area/Create`}
    {...props}
  />
);

export type UseAreaCreateProps = Omit<UseMutateProps<AreaDto, void, AreaCreateDto>, 'path' | 'verb'>;

export const useAreaCreate = (props: UseAreaCreateProps) =>
  useMutate<AreaDto, AjaxResponseBase, void, AreaCreateDto>('POST', `/api/services/app/Area/Create`, props);

export type AreaUpdateProps = Omit<MutateProps<AreaDto, AjaxResponseBase, void, AreaDto>, 'path' | 'verb'>;

export const AreaUpdate = (props: AreaUpdateProps) => (
  <Mutate<AreaDto, AjaxResponseBase, void, AreaDto> verb="PUT" path={`/api/services/app/Area/Update`} {...props} />
);

export type UseAreaUpdateProps = Omit<UseMutateProps<AreaDto, void, AreaDto>, 'path' | 'verb'>;

export const useAreaUpdate = (props: UseAreaUpdateProps) =>
  useMutate<AreaDto, AjaxResponseBase, void, AreaDto>('PUT', `/api/services/app/Area/Update`, props);

export interface AreaDeleteQueryParams {
  Id?: string;
}

export type AreaDeleteProps = Omit<MutateProps<void, AjaxResponseBase, AreaDeleteQueryParams, void>, 'path' | 'verb'>;

export const AreaDelete = (props: AreaDeleteProps) => (
  <Mutate<void, AjaxResponseBase, AreaDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/Area/Delete`}
    {...props}
  />
);

export type UseAreaDeleteProps = Omit<UseMutateProps<void, AreaDeleteQueryParams, void>, 'path' | 'verb'>;

export const useAreaDelete = (props: UseAreaDeleteProps) =>
  useMutate<void, AjaxResponseBase, AreaDeleteQueryParams, void>('DELETE', `/api/services/app/Area/Delete`, props);

export type ClickatellUpdateSettingsProps = Omit<
  MutateProps<AjaxResponse, unknown, void, ClickatellSettingDto>,
  'path' | 'verb'
>;

export const ClickatellUpdateSettings = (props: ClickatellUpdateSettingsProps) => (
  <Mutate<AjaxResponse, unknown, void, ClickatellSettingDto>
    verb="POST"
    path={`/api/services/app/Clickatell/UpdateSettings`}
    {...props}
  />
);

export type UseClickatellUpdateSettingsProps = Omit<
  UseMutateProps<AjaxResponse, void, ClickatellSettingDto>,
  'path' | 'verb'
>;

export const useClickatellUpdateSettings = (props: UseClickatellUpdateSettingsProps) =>
  useMutate<AjaxResponse, unknown, void, ClickatellSettingDto>(
    'POST',
    `/api/services/app/Clickatell/UpdateSettings`,
    props
  );

export type ClickatellGetSettingsProps = Omit<GetProps<ClickatellSettingDtoAjaxResponse, unknown, void>, 'path'>;

export const ClickatellGetSettings = (props: ClickatellGetSettingsProps) => (
  <Get<ClickatellSettingDtoAjaxResponse, unknown, void> path={`/api/services/app/Clickatell/GetSettings`} {...props} />
);

export type UseClickatellGetSettingsProps = Omit<UseGetProps<ClickatellSettingDtoAjaxResponse, void>, 'path'>;

export const useClickatellGetSettings = (props: UseClickatellGetSettingsProps) =>
  useGet<ClickatellSettingDtoAjaxResponse, unknown, void>(`/api/services/app/Clickatell/GetSettings`, props);

export interface DataTableGetConfigurationQueryParams {
  id?: string;
}

export type DataTableGetConfigurationProps = Omit<
  GetProps<DataTableConfigDto, unknown, DataTableGetConfigurationQueryParams>,
  'path'
>;

export const DataTableGetConfiguration = (props: DataTableGetConfigurationProps) => (
  <Get<DataTableConfigDto, unknown, DataTableGetConfigurationQueryParams>
    path={`/api/DataTable/GetConfiguration`}
    {...props}
  />
);

export type UseDataTableGetConfigurationProps = Omit<
  UseGetProps<DataTableConfigDto, DataTableGetConfigurationQueryParams>,
  'path'
>;

export const useDataTableGetConfiguration = (props: UseDataTableGetConfigurationProps) =>
  useGet<DataTableConfigDto, unknown, DataTableGetConfigurationQueryParams>(`/api/DataTable/GetConfiguration`, props);

export type DataTableGetDataProps = Omit<
  MutateProps<DataTableData, unknown, void, DataTableGetDataInput>,
  'path' | 'verb'
>;

export const DataTableGetData = (props: DataTableGetDataProps) => (
  <Mutate<DataTableData, unknown, void, DataTableGetDataInput> verb="POST" path={`/api/DataTable/GetData`} {...props} />
);

export type UseDataTableGetDataProps = Omit<
  UseMutateProps<DataTableData, void, DataTableGetDataInput>,
  'path' | 'verb'
>;

export const useDataTableGetData = (props: UseDataTableGetDataProps) =>
  useMutate<DataTableData, unknown, void, DataTableGetDataInput>('POST', `/api/DataTable/GetData`, props);

export type DataTableExportToExcelProps = Omit<
  MutateProps<void, unknown, void, DataTableGetDataInput>,
  'path' | 'verb'
>;

export const DataTableExportToExcel = (props: DataTableExportToExcelProps) => (
  <Mutate<void, unknown, void, DataTableGetDataInput> verb="POST" path={`/api/DataTable/ExportToExcel`} {...props} />
);

export type UseDataTableExportToExcelProps = Omit<UseMutateProps<void, void, DataTableGetDataInput>, 'path' | 'verb'>;

export const useDataTableExportToExcel = (props: UseDataTableExportToExcelProps) =>
  useMutate<void, unknown, void, DataTableGetDataInput>('POST', `/api/DataTable/ExportToExcel`, props);

export type EmailSenderUpdateSmtpSettingsProps = Omit<
  MutateProps<AjaxResponse, unknown, void, SmtpSettingsDto>,
  'path' | 'verb'
>;

export const EmailSenderUpdateSmtpSettings = (props: EmailSenderUpdateSmtpSettingsProps) => (
  <Mutate<AjaxResponse, unknown, void, SmtpSettingsDto>
    verb="POST"
    path={`/api/services/app/EmailSender/UpdateSmtpSettings`}
    {...props}
  />
);

export type UseEmailSenderUpdateSmtpSettingsProps = Omit<
  UseMutateProps<AjaxResponse, void, SmtpSettingsDto>,
  'path' | 'verb'
>;

export const useEmailSenderUpdateSmtpSettings = (props: UseEmailSenderUpdateSmtpSettingsProps) =>
  useMutate<AjaxResponse, unknown, void, SmtpSettingsDto>(
    'POST',
    `/api/services/app/EmailSender/UpdateSmtpSettings`,
    props
  );

export type EmailSenderGetSmtpSettingsProps = Omit<GetProps<SmtpSettingsDtoAjaxResponse, unknown, void>, 'path'>;

export const EmailSenderGetSmtpSettings = (props: EmailSenderGetSmtpSettingsProps) => (
  <Get<SmtpSettingsDtoAjaxResponse, unknown, void> path={`/api/services/app/EmailSender/GetSmtpSettings`} {...props} />
);

export type UseEmailSenderGetSmtpSettingsProps = Omit<UseGetProps<SmtpSettingsDtoAjaxResponse, void>, 'path'>;

export const useEmailSenderGetSmtpSettings = (props: UseEmailSenderGetSmtpSettingsProps) =>
  useGet<SmtpSettingsDtoAjaxResponse, unknown, void>(`/api/services/app/EmailSender/GetSmtpSettings`, props);

export type EmailSenderSendEmailProps = Omit<
  MutateProps<SendTestEmailDtoAjaxResponse, unknown, void, SendTestEmailInput>,
  'path' | 'verb'
>;

export const EmailSenderSendEmail = (props: EmailSenderSendEmailProps) => (
  <Mutate<SendTestEmailDtoAjaxResponse, unknown, void, SendTestEmailInput>
    verb="POST"
    path={`/api/services/app/EmailSender/SendEmail`}
    {...props}
  />
);

export type UseEmailSenderSendEmailProps = Omit<
  UseMutateProps<SendTestEmailDtoAjaxResponse, void, SendTestEmailInput>,
  'path' | 'verb'
>;

export const useEmailSenderSendEmail = (props: UseEmailSenderSendEmailProps) =>
  useMutate<SendTestEmailDtoAjaxResponse, unknown, void, SendTestEmailInput>(
    'POST',
    `/api/services/app/EmailSender/SendEmail`,
    props
  );

export type FormListProps = Omit<GetProps<FormDto[], unknown, void>, 'path'>;

export const FormList = (props: FormListProps) => <Get<FormDto[], unknown, void> path={`/api/Form/List`} {...props} />;

export type UseFormListProps = Omit<UseGetProps<FormDto[], void>, 'path'>;

export const useFormList = (props: UseFormListProps) => useGet<FormDto[], unknown, void>(`/api/Form/List`, props);

export type FormList2Props = Omit<GetProps<FormDto[], unknown, void>, 'path'>;

export const FormList2 = (props: FormList2Props) => (
  <Get<FormDto[], unknown, void> path={`/api/Form/List2`} {...props} />
);

export type UseFormList2Props = Omit<UseGetProps<FormDto[], void>, 'path'>;

export const useFormList2 = (props: UseFormList2Props) => useGet<FormDto[], unknown, void>(`/api/Form/List2`, props);

export type FrameworkTestDynamicRepoProps = Omit<GetProps<string, unknown, void>, 'path'>;

export const FrameworkTestDynamicRepo = (props: FrameworkTestDynamicRepoProps) => (
  <Get<string, unknown, void> path={`/api/Framework/TestDynamicRepo`} {...props} />
);

export type UseFrameworkTestDynamicRepoProps = Omit<UseGetProps<string, void>, 'path'>;

export const useFrameworkTestDynamicRepo = (props: UseFrameworkTestDynamicRepoProps) =>
  useGet<string, unknown, void>(`/api/Framework/TestDynamicRepo`, props);

export type FrameworkTestSettingsProps = Omit<GetProps<string, unknown, void>, 'path'>;

export const FrameworkTestSettings = (props: FrameworkTestSettingsProps) => (
  <Get<string, unknown, void> path={`/api/Framework/TestSettings`} {...props} />
);

export type UseFrameworkTestSettingsProps = Omit<UseGetProps<string, void>, 'path'>;

export const useFrameworkTestSettings = (props: UseFrameworkTestSettingsProps) =>
  useGet<string, unknown, void>(`/api/Framework/TestSettings`, props);

export type FrameworkConfigureTestLdapProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

export const FrameworkConfigureTestLdap = (props: FrameworkConfigureTestLdapProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Framework/ConfigureTestLdap`} {...props} />
);

export type UseFrameworkConfigureTestLdapProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

export const useFrameworkConfigureTestLdap = (props: UseFrameworkConfigureTestLdapProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Framework/ConfigureTestLdap`, props);

export type FrameworkConfigureTestAzureADProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

export const FrameworkConfigureTestAzureAD = (props: FrameworkConfigureTestAzureADProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Framework/ConfigureTestAzureAD`} {...props} />
);

export type UseFrameworkConfigureTestAzureADProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

export const useFrameworkConfigureTestAzureAD = (props: UseFrameworkConfigureTestAzureADProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Framework/ConfigureTestAzureAD`, props);

export type FrameworkTestEntitiesProps = Omit<GetProps<string, unknown, void>, 'path'>;

export const FrameworkTestEntities = (props: FrameworkTestEntitiesProps) => (
  <Get<string, unknown, void> path={`/api/Framework/TestEntities`} {...props} />
);

export type UseFrameworkTestEntitiesProps = Omit<UseGetProps<string, void>, 'path'>;

export const useFrameworkTestEntities = (props: UseFrameworkTestEntitiesProps) =>
  useGet<string, unknown, void>(`/api/Framework/TestEntities`, props);

export type FrameworkBootstrapReferenceListsProps = Omit<MutateProps<string, unknown, void, void>, 'path' | 'verb'>;

export const FrameworkBootstrapReferenceLists = (props: FrameworkBootstrapReferenceListsProps) => (
  <Mutate<string, unknown, void, void> verb="POST" path={`/api/Framework/BootstrapReferenceLists`} {...props} />
);

export type UseFrameworkBootstrapReferenceListsProps = Omit<UseMutateProps<string, void, void>, 'path' | 'verb'>;

export const useFrameworkBootstrapReferenceLists = (props: UseFrameworkBootstrapReferenceListsProps) =>
  useMutate<string, unknown, void, void>('POST', `/api/Framework/BootstrapReferenceLists`, props);

export interface FrameworkConfigureUploadFolderQueryParams {
  folder?: string;
}

export type FrameworkConfigureUploadFolderProps = Omit<
  MutateProps<void, unknown, FrameworkConfigureUploadFolderQueryParams, void>,
  'path' | 'verb'
>;

export const FrameworkConfigureUploadFolder = (props: FrameworkConfigureUploadFolderProps) => (
  <Mutate<void, unknown, FrameworkConfigureUploadFolderQueryParams, void>
    verb="POST"
    path={`/api/Framework/ConfigureUploadFolder`}
    {...props}
  />
);

export type UseFrameworkConfigureUploadFolderProps = Omit<
  UseMutateProps<void, FrameworkConfigureUploadFolderQueryParams, void>,
  'path' | 'verb'
>;

export const useFrameworkConfigureUploadFolder = (props: UseFrameworkConfigureUploadFolderProps) =>
  useMutate<void, unknown, FrameworkConfigureUploadFolderQueryParams, void>(
    'POST',
    `/api/Framework/ConfigureUploadFolder`,
    props
  );

export type OtpSendPinProps = Omit<MutateProps<SendPinDto, unknown, void, SendPinInput>, 'path' | 'verb'>;

export const OtpSendPin = (props: OtpSendPinProps) => (
  <Mutate<SendPinDto, unknown, void, SendPinInput> verb="POST" path={`/api/services/app/Otp/SendPin`} {...props} />
);

export type UseOtpSendPinProps = Omit<UseMutateProps<SendPinDto, void, SendPinInput>, 'path' | 'verb'>;

export const useOtpSendPin = (props: UseOtpSendPinProps) =>
  useMutate<SendPinDto, unknown, void, SendPinInput>('POST', `/api/services/app/Otp/SendPin`, props);

export type OtpVerifyPinProps = Omit<MutateProps<VerifyPinResponse, unknown, void, VerifyPinInput>, 'path' | 'verb'>;

export const OtpVerifyPin = (props: OtpVerifyPinProps) => (
  <Mutate<VerifyPinResponse, unknown, void, VerifyPinInput>
    verb="POST"
    path={`/api/services/app/Otp/VerifyPin`}
    {...props}
  />
);

export type UseOtpVerifyPinProps = Omit<UseMutateProps<VerifyPinResponse, void, VerifyPinInput>, 'path' | 'verb'>;

export const useOtpVerifyPin = (props: UseOtpVerifyPinProps) =>
  useMutate<VerifyPinResponse, unknown, void, VerifyPinInput>('POST', `/api/services/app/Otp/VerifyPin`, props);

export type PersonCreateProps = Omit<
  MutateProps<PersonAccountDto, AjaxResponseBase, void, CreatePersonAccountDto>,
  'path' | 'verb'
>;

export const PersonCreate = (props: PersonCreateProps) => (
  <Mutate<PersonAccountDto, AjaxResponseBase, void, CreatePersonAccountDto>
    verb="POST"
    path={`/api/services/app/Person/Create`}
    {...props}
  />
);

export type UsePersonCreateProps = Omit<
  UseMutateProps<PersonAccountDto, void, CreatePersonAccountDto>,
  'path' | 'verb'
>;

export const usePersonCreate = (props: UsePersonCreateProps) =>
  useMutate<PersonAccountDto, AjaxResponseBase, void, CreatePersonAccountDto>(
    'POST',
    `/api/services/app/Person/Create`,
    props
  );

export interface PersonGetQueryParams {
  Id?: string;
}

export type PersonGetProps = Omit<
  GetProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams>,
  'path'
>;

export const PersonGet = (props: PersonGetProps) => (
  <Get<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams>
    path={`/api/services/app/Person/Get`}
    {...props}
  />
);

export type UsePersonGetProps = Omit<UseGetProps<PersonAccountDtoAjaxResponse, PersonGetQueryParams>, 'path'>;

export const usePersonGet = (props: UsePersonGetProps) =>
  useGet<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams>(`/api/services/app/Person/Get`, props);

export interface PersonAutocompleteByNameQueryParams {
  term?: string;
}

export type PersonAutocompleteByNameProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams>,
  'path'
>;

export const PersonAutocompleteByName = (props: PersonAutocompleteByNameProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams>
    path={`/api/services/app/Person/AutocompleteByName`}
    {...props}
  />
);

export type UsePersonAutocompleteByNameProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, PersonAutocompleteByNameQueryParams>,
  'path'
>;

export const usePersonAutocompleteByName = (props: UsePersonAutocompleteByNameProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams>(
    `/api/services/app/Person/AutocompleteByName`,
    props
  );

export interface PersonGetAllQueryParams {
  Sorting?: string;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type PersonGetAllProps = Omit<
  GetProps<PersonAccountDtoPagedResultDto, AjaxResponseBase, PersonGetAllQueryParams>,
  'path'
>;

export const PersonGetAll = (props: PersonGetAllProps) => (
  <Get<PersonAccountDtoPagedResultDto, AjaxResponseBase, PersonGetAllQueryParams>
    path={`/api/services/app/Person/GetAll`}
    {...props}
  />
);

export type UsePersonGetAllProps = Omit<UseGetProps<PersonAccountDtoPagedResultDto, PersonGetAllQueryParams>, 'path'>;

export const usePersonGetAll = (props: UsePersonGetAllProps) =>
  useGet<PersonAccountDtoPagedResultDto, AjaxResponseBase, PersonGetAllQueryParams>(
    `/api/services/app/Person/GetAll`,
    props
  );

export type PersonUpdateProps = Omit<
  MutateProps<PersonAccountDto, AjaxResponseBase, void, PersonAccountDto>,
  'path' | 'verb'
>;

export const PersonUpdate = (props: PersonUpdateProps) => (
  <Mutate<PersonAccountDto, AjaxResponseBase, void, PersonAccountDto>
    verb="PUT"
    path={`/api/services/app/Person/Update`}
    {...props}
  />
);

export type UsePersonUpdateProps = Omit<UseMutateProps<PersonAccountDto, void, PersonAccountDto>, 'path' | 'verb'>;

export const usePersonUpdate = (props: UsePersonUpdateProps) =>
  useMutate<PersonAccountDto, AjaxResponseBase, void, PersonAccountDto>(
    'PUT',
    `/api/services/app/Person/Update`,
    props
  );

export interface PersonDeleteQueryParams {
  Id?: string;
}

export type PersonDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, PersonDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const PersonDelete = (props: PersonDeleteProps) => (
  <Mutate<void, AjaxResponseBase, PersonDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/Person/Delete`}
    {...props}
  />
);

export type UsePersonDeleteProps = Omit<UseMutateProps<void, PersonDeleteQueryParams, void>, 'path' | 'verb'>;

export const usePersonDelete = (props: UsePersonDeleteProps) =>
  useMutate<void, AjaxResponseBase, PersonDeleteQueryParams, void>('DELETE', `/api/services/app/Person/Delete`, props);

export type RoleCreateProps = Omit<MutateProps<RoleDto, unknown, void, CreateRoleDto>, 'path' | 'verb'>;

export const RoleCreate = (props: RoleCreateProps) => (
  <Mutate<RoleDto, unknown, void, CreateRoleDto> verb="POST" path={`/api/services/app/Role/Create`} {...props} />
);

export type UseRoleCreateProps = Omit<UseMutateProps<RoleDto, void, CreateRoleDto>, 'path' | 'verb'>;

export const useRoleCreate = (props: UseRoleCreateProps) =>
  useMutate<RoleDto, unknown, void, CreateRoleDto>('POST', `/api/services/app/Role/Create`, props);

export interface RoleGetRolesQueryParams {
  Permission?: string;
}

export type RoleGetRolesProps = Omit<GetProps<RoleListDtoListResultDto, unknown, RoleGetRolesQueryParams>, 'path'>;

export const RoleGetRoles = (props: RoleGetRolesProps) => (
  <Get<RoleListDtoListResultDto, unknown, RoleGetRolesQueryParams>
    path={`/api/services/app/Role/GetRoles`}
    {...props}
  />
);

export type UseRoleGetRolesProps = Omit<UseGetProps<RoleListDtoListResultDto, RoleGetRolesQueryParams>, 'path'>;

export const useRoleGetRoles = (props: UseRoleGetRolesProps) =>
  useGet<RoleListDtoListResultDto, unknown, RoleGetRolesQueryParams>(`/api/services/app/Role/GetRoles`, props);

export type RoleUpdateProps = Omit<MutateProps<RoleDto, unknown, void, RoleDto>, 'path' | 'verb'>;

export const RoleUpdate = (props: RoleUpdateProps) => (
  <Mutate<RoleDto, unknown, void, RoleDto> verb="PUT" path={`/api/services/app/Role/Update`} {...props} />
);

export type UseRoleUpdateProps = Omit<UseMutateProps<RoleDto, void, RoleDto>, 'path' | 'verb'>;

export const useRoleUpdate = (props: UseRoleUpdateProps) =>
  useMutate<RoleDto, unknown, void, RoleDto>('PUT', `/api/services/app/Role/Update`, props);

export interface RoleDeleteQueryParams {
  Id?: number;
}

export type RoleDeleteProps = Omit<MutateProps<void, unknown, RoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const RoleDelete = (props: RoleDeleteProps) => (
  <Mutate<void, unknown, RoleDeleteQueryParams, void> verb="DELETE" path={`/api/services/app/Role/Delete`} {...props} />
);

export type UseRoleDeleteProps = Omit<UseMutateProps<void, RoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const useRoleDelete = (props: UseRoleDeleteProps) =>
  useMutate<void, unknown, RoleDeleteQueryParams, void>('DELETE', `/api/services/app/Role/Delete`, props);

export type RoleGetAllPermissionsProps = Omit<GetProps<PermissionDtoListResultDto, unknown, void>, 'path'>;

export const RoleGetAllPermissions = (props: RoleGetAllPermissionsProps) => (
  <Get<PermissionDtoListResultDto, unknown, void> path={`/api/services/app/Role/GetAllPermissions`} {...props} />
);

export type UseRoleGetAllPermissionsProps = Omit<UseGetProps<PermissionDtoListResultDto, void>, 'path'>;

export const useRoleGetAllPermissions = (props: UseRoleGetAllPermissionsProps) =>
  useGet<PermissionDtoListResultDto, unknown, void>(`/api/services/app/Role/GetAllPermissions`, props);

export interface RoleGetRoleForEditQueryParams {
  Id?: number;
}

export type RoleGetRoleForEditProps = Omit<
  GetProps<GetRoleForEditOutput, unknown, RoleGetRoleForEditQueryParams>,
  'path'
>;

export const RoleGetRoleForEdit = (props: RoleGetRoleForEditProps) => (
  <Get<GetRoleForEditOutput, unknown, RoleGetRoleForEditQueryParams>
    path={`/api/services/app/Role/GetRoleForEdit`}
    {...props}
  />
);

export type UseRoleGetRoleForEditProps = Omit<UseGetProps<GetRoleForEditOutput, RoleGetRoleForEditQueryParams>, 'path'>;

export const useRoleGetRoleForEdit = (props: UseRoleGetRoleForEditProps) =>
  useGet<GetRoleForEditOutput, unknown, RoleGetRoleForEditQueryParams>(`/api/services/app/Role/GetRoleForEdit`, props);

export interface RoleGetQueryParams {
  Id?: number;
}

export type RoleGetProps = Omit<GetProps<RoleDto, unknown, RoleGetQueryParams>, 'path'>;

export const RoleGet = (props: RoleGetProps) => (
  <Get<RoleDto, unknown, RoleGetQueryParams> path={`/api/services/app/Role/Get`} {...props} />
);

export type UseRoleGetProps = Omit<UseGetProps<RoleDto, RoleGetQueryParams>, 'path'>;

export const useRoleGet = (props: UseRoleGetProps) =>
  useGet<RoleDto, unknown, RoleGetQueryParams>(`/api/services/app/Role/Get`, props);

export interface RoleGetAllQueryParams {
  Keyword?: string;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type RoleGetAllProps = Omit<GetProps<RoleDtoPagedResultDto, unknown, RoleGetAllQueryParams>, 'path'>;

export const RoleGetAll = (props: RoleGetAllProps) => (
  <Get<RoleDtoPagedResultDto, unknown, RoleGetAllQueryParams> path={`/api/services/app/Role/GetAll`} {...props} />
);

export type UseRoleGetAllProps = Omit<UseGetProps<RoleDtoPagedResultDto, RoleGetAllQueryParams>, 'path'>;

export const useRoleGetAll = (props: UseRoleGetAllProps) =>
  useGet<RoleDtoPagedResultDto, unknown, RoleGetAllQueryParams>(`/api/services/app/Role/GetAll`, props);

export type SessionGetCurrentLoginInformationsProps = Omit<
  GetProps<GetCurrentLoginInformationsOutput, unknown, void>,
  'path'
>;

export const SessionGetCurrentLoginInformations = (props: SessionGetCurrentLoginInformationsProps) => (
  <Get<GetCurrentLoginInformationsOutput, unknown, void>
    path={`/api/services/app/Session/GetCurrentLoginInformations`}
    {...props}
  />
);

export type UseSessionGetCurrentLoginInformationsProps = Omit<
  UseGetProps<GetCurrentLoginInformationsOutput, void>,
  'path'
>;

export const useSessionGetCurrentLoginInformations = (props: UseSessionGetCurrentLoginInformationsProps) =>
  useGet<GetCurrentLoginInformationsOutput, unknown, void>(
    `/api/services/app/Session/GetCurrentLoginInformations`,
    props
  );

export type ShaRoleCreateProps = Omit<
  MutateProps<ShaRoleDto, AjaxResponseBase, void, CreateShaRoleDto>,
  'path' | 'verb'
>;

export const ShaRoleCreate = (props: ShaRoleCreateProps) => (
  <Mutate<ShaRoleDto, AjaxResponseBase, void, CreateShaRoleDto>
    verb="POST"
    path={`/api/services/app/ShaRole/Create`}
    {...props}
  />
);

export type UseShaRoleCreateProps = Omit<UseMutateProps<ShaRoleDto, void, CreateShaRoleDto>, 'path' | 'verb'>;

export const useShaRoleCreate = (props: UseShaRoleCreateProps) =>
  useMutate<ShaRoleDto, AjaxResponseBase, void, CreateShaRoleDto>('POST', `/api/services/app/ShaRole/Create`, props);

export type ShaRoleUpdateProps = Omit<MutateProps<ShaRoleDto, AjaxResponseBase, void, ShaRoleDto>, 'path' | 'verb'>;

export const ShaRoleUpdate = (props: ShaRoleUpdateProps) => (
  <Mutate<ShaRoleDto, AjaxResponseBase, void, ShaRoleDto>
    verb="PUT"
    path={`/api/services/app/ShaRole/Update`}
    {...props}
  />
);

export type UseShaRoleUpdateProps = Omit<UseMutateProps<ShaRoleDto, void, ShaRoleDto>, 'path' | 'verb'>;

export const useShaRoleUpdate = (props: UseShaRoleUpdateProps) =>
  useMutate<ShaRoleDto, AjaxResponseBase, void, ShaRoleDto>('PUT', `/api/services/app/ShaRole/Update`, props);

export interface ShaRoleDeleteQueryParams {
  Id?: string;
}

export type ShaRoleDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, ShaRoleDeleteQueryParams, void>,
  'path' | 'verb'
>;

export const ShaRoleDelete = (props: ShaRoleDeleteProps) => (
  <Mutate<void, AjaxResponseBase, ShaRoleDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/ShaRole/Delete`}
    {...props}
  />
);

export type UseShaRoleDeleteProps = Omit<UseMutateProps<void, ShaRoleDeleteQueryParams, void>, 'path' | 'verb'>;

export const useShaRoleDelete = (props: UseShaRoleDeleteProps) =>
  useMutate<void, AjaxResponseBase, ShaRoleDeleteQueryParams, void>(
    'DELETE',
    `/api/services/app/ShaRole/Delete`,
    props
  );

export interface ShaRoleGetQueryParams {
  Id?: string;
}

export type ShaRoleGetProps = Omit<GetProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams>, 'path'>;

export const ShaRoleGet = (props: ShaRoleGetProps) => (
  <Get<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams>
    path={`/api/services/app/ShaRole/Get`}
    {...props}
  />
);

export type UseShaRoleGetProps = Omit<UseGetProps<ShaRoleDtoAjaxResponse, ShaRoleGetQueryParams>, 'path'>;

export const useShaRoleGet = (props: UseShaRoleGetProps) =>
  useGet<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams>(`/api/services/app/ShaRole/Get`, props);

export interface ShaRoleGetAllQueryParams {
  Keyword?: string;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type ShaRoleGetAllProps = Omit<
  GetProps<ShaRoleDtoPagedResultDto, AjaxResponseBase, ShaRoleGetAllQueryParams>,
  'path'
>;

export const ShaRoleGetAll = (props: ShaRoleGetAllProps) => (
  <Get<ShaRoleDtoPagedResultDto, AjaxResponseBase, ShaRoleGetAllQueryParams>
    path={`/api/services/app/ShaRole/GetAll`}
    {...props}
  />
);

export type UseShaRoleGetAllProps = Omit<UseGetProps<ShaRoleDtoPagedResultDto, ShaRoleGetAllQueryParams>, 'path'>;

export const useShaRoleGetAll = (props: UseShaRoleGetAllProps) =>
  useGet<ShaRoleDtoPagedResultDto, AjaxResponseBase, ShaRoleGetAllQueryParams>(
    `/api/services/app/ShaRole/GetAll`,
    props
  );

export type ShaRoleAppointedPersonCreateProps = Omit<
  MutateProps<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, void, CreateShaRoleAppointedPersonDto>,
  'path' | 'verb'
>;

export const ShaRoleAppointedPersonCreate = (props: ShaRoleAppointedPersonCreateProps) => (
  <Mutate<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, void, CreateShaRoleAppointedPersonDto>
    verb="POST"
    path={`/api/services/app/ShaRoleAppointedPerson/Create`}
    {...props}
  />
);

export type UseShaRoleAppointedPersonCreateProps = Omit<
  UseMutateProps<ShaRoleAppointedPersonDtoAjaxResponse, void, CreateShaRoleAppointedPersonDto>,
  'path' | 'verb'
>;

export const useShaRoleAppointedPersonCreate = (props: UseShaRoleAppointedPersonCreateProps) =>
  useMutate<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, void, CreateShaRoleAppointedPersonDto>(
    'POST',
    `/api/services/app/ShaRoleAppointedPerson/Create`,
    props
  );

export type ShaRoleAppointedPersonUpdateProps = Omit<
  MutateProps<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, void, ShaRoleAppointedPersonDto>,
  'path' | 'verb'
>;

export const ShaRoleAppointedPersonUpdate = (props: ShaRoleAppointedPersonUpdateProps) => (
  <Mutate<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, void, ShaRoleAppointedPersonDto>
    verb="PUT"
    path={`/api/services/app/ShaRoleAppointedPerson/Update`}
    {...props}
  />
);

export type UseShaRoleAppointedPersonUpdateProps = Omit<
  UseMutateProps<ShaRoleAppointedPersonDtoAjaxResponse, void, ShaRoleAppointedPersonDto>,
  'path' | 'verb'
>;

export const useShaRoleAppointedPersonUpdate = (props: UseShaRoleAppointedPersonUpdateProps) =>
  useMutate<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, void, ShaRoleAppointedPersonDto>(
    'PUT',
    `/api/services/app/ShaRoleAppointedPerson/Update`,
    props
  );

export type ShaRoleAppointedPersonDeleteProps = Omit<
  MutateProps<void, AjaxResponseBase, void, GuidEntityDto>,
  'path' | 'verb'
>;

export const ShaRoleAppointedPersonDelete = (props: ShaRoleAppointedPersonDeleteProps) => (
  <Mutate<void, AjaxResponseBase, void, GuidEntityDto>
    verb="POST"
    path={`/api/services/app/ShaRoleAppointedPerson/Delete`}
    {...props}
  />
);

export type UseShaRoleAppointedPersonDeleteProps = Omit<UseMutateProps<void, void, GuidEntityDto>, 'path' | 'verb'>;

export const useShaRoleAppointedPersonDelete = (props: UseShaRoleAppointedPersonDeleteProps) =>
  useMutate<void, AjaxResponseBase, void, GuidEntityDto>(
    'POST',
    `/api/services/app/ShaRoleAppointedPerson/Delete`,
    props
  );

export interface ShaRoleAppointedPersonGetQueryParams {
  Id?: string;
}

export type ShaRoleAppointedPersonGetProps = Omit<
  GetProps<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, ShaRoleAppointedPersonGetQueryParams>,
  'path'
>;

export const ShaRoleAppointedPersonGet = (props: ShaRoleAppointedPersonGetProps) => (
  <Get<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, ShaRoleAppointedPersonGetQueryParams>
    path={`/api/services/app/ShaRoleAppointedPerson/Get`}
    {...props}
  />
);

export type UseShaRoleAppointedPersonGetProps = Omit<
  UseGetProps<ShaRoleAppointedPersonDtoAjaxResponse, ShaRoleAppointedPersonGetQueryParams>,
  'path'
>;

export const useShaRoleAppointedPersonGet = (props: UseShaRoleAppointedPersonGetProps) =>
  useGet<ShaRoleAppointedPersonDtoAjaxResponse, AjaxResponseBase, ShaRoleAppointedPersonGetQueryParams>(
    `/api/services/app/ShaRoleAppointedPerson/Get`,
    props
  );

export interface ShaRoleAppointedPersonGetAllQueryParams {
  Keyword?: string;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type ShaRoleAppointedPersonGetAllProps = Omit<
  GetProps<void, AjaxResponseBase, ShaRoleAppointedPersonGetAllQueryParams>,
  'path'
>;

export const ShaRoleAppointedPersonGetAll = (props: ShaRoleAppointedPersonGetAllProps) => (
  <Get<void, AjaxResponseBase, ShaRoleAppointedPersonGetAllQueryParams>
    path={`/api/services/app/ShaRoleAppointedPerson/GetAll`}
    {...props}
  />
);

export type UseShaRoleAppointedPersonGetAllProps = Omit<
  UseGetProps<void, ShaRoleAppointedPersonGetAllQueryParams>,
  'path'
>;

export const useShaRoleAppointedPersonGetAll = (props: UseShaRoleAppointedPersonGetAllProps) =>
  useGet<void, AjaxResponseBase, ShaRoleAppointedPersonGetAllQueryParams>(
    `/api/services/app/ShaRoleAppointedPerson/GetAll`,
    props
  );

export interface StoredFileDownloadQueryParams {
  id?: string;
  versionNo?: number;
}

export type StoredFileDownloadProps = Omit<GetProps<void, unknown, StoredFileDownloadQueryParams>, 'path'>;

export const StoredFileDownload = (props: StoredFileDownloadProps) => (
  <Get<void, unknown, StoredFileDownloadQueryParams> path={`/api/StoredFile/Download`} {...props} />
);

export type UseStoredFileDownloadProps = Omit<UseGetProps<void, StoredFileDownloadQueryParams>, 'path'>;

export const useStoredFileDownload = (props: UseStoredFileDownloadProps) =>
  useGet<void, unknown, StoredFileDownloadQueryParams>(`/api/StoredFile/Download`, props);

export type StoredFileUploadProps = Omit<MutateProps<StoredFileDto, unknown, void, void>, 'path' | 'verb'>;

export const StoredFileUpload = (props: StoredFileUploadProps) => (
  <Mutate<StoredFileDto, unknown, void, void> verb="POST" path={`/api/StoredFile/Upload`} {...props} />
);

export type UseStoredFileUploadProps = Omit<UseMutateProps<StoredFileDto, void, void>, 'path' | 'verb'>;

export const useStoredFileUpload = (props: UseStoredFileUploadProps) =>
  useMutate<StoredFileDto, unknown, void, void>('POST', `/api/StoredFile/Upload`, props);

export type StoredFileDeleteProps = Omit<MutateProps<boolean, unknown, void, DeleteStoredFileInput>, 'path' | 'verb'>;

export const StoredFileDelete = (props: StoredFileDeleteProps) => (
  <Mutate<boolean, unknown, void, DeleteStoredFileInput> verb="DELETE" path={`/api/StoredFile/Delete`} {...props} />
);

export type UseStoredFileDeleteProps = Omit<UseMutateProps<boolean, void, DeleteStoredFileInput>, 'path' | 'verb'>;

export const useStoredFileDelete = (props: UseStoredFileDeleteProps) =>
  useMutate<boolean, unknown, void, DeleteStoredFileInput>('DELETE', `/api/StoredFile/Delete`, props);

export interface StoredFileDownloadZipQueryParams {
  AllCategories?: boolean;
  OwnerId: string;
  OwnerType: string;
  FilesCategory?: number;
  PropertyName?: string;
}

export type StoredFileDownloadZipProps = Omit<GetProps<void, unknown, StoredFileDownloadZipQueryParams>, 'path'>;

export const StoredFileDownloadZip = (props: StoredFileDownloadZipProps) => (
  <Get<void, unknown, StoredFileDownloadZipQueryParams> path={`/api/StoredFile/DownloadZip`} {...props} />
);

export type UseStoredFileDownloadZipProps = Omit<UseGetProps<void, StoredFileDownloadZipQueryParams>, 'path'>;

export const useStoredFileDownloadZip = (props: UseStoredFileDownloadZipProps) =>
  useGet<void, unknown, StoredFileDownloadZipQueryParams>(`/api/StoredFile/DownloadZip`, props);

export interface StoredFileFilesListQueryParams {
  OwnerId: string;
  OwnerType: string;
  FilesCategory?: number;
  PropertyName?: string;
  AllCategories?: boolean;
}

export type StoredFileFilesListProps = Omit<GetProps<StoredFileDto[], unknown, StoredFileFilesListQueryParams>, 'path'>;

export const StoredFileFilesList = (props: StoredFileFilesListProps) => (
  <Get<StoredFileDto[], unknown, StoredFileFilesListQueryParams> path={`/api/StoredFile/FilesList`} {...props} />
);

export type UseStoredFileFilesListProps = Omit<UseGetProps<StoredFileDto[], StoredFileFilesListQueryParams>, 'path'>;

export const useStoredFileFilesList = (props: UseStoredFileFilesListProps) =>
  useGet<StoredFileDto[], unknown, StoredFileFilesListQueryParams>(`/api/StoredFile/FilesList`, props);

export type TenantCreateProps = Omit<MutateProps<TenantDto, unknown, void, CreateTenantDto>, 'path' | 'verb'>;

export const TenantCreate = (props: TenantCreateProps) => (
  <Mutate<TenantDto, unknown, void, CreateTenantDto> verb="POST" path={`/api/services/app/Tenant/Create`} {...props} />
);

export type UseTenantCreateProps = Omit<UseMutateProps<TenantDto, void, CreateTenantDto>, 'path' | 'verb'>;

export const useTenantCreate = (props: UseTenantCreateProps) =>
  useMutate<TenantDto, unknown, void, CreateTenantDto>('POST', `/api/services/app/Tenant/Create`, props);

export interface TenantDeleteQueryParams {
  Id?: number;
}

export type TenantDeleteProps = Omit<MutateProps<void, unknown, TenantDeleteQueryParams, void>, 'path' | 'verb'>;

export const TenantDelete = (props: TenantDeleteProps) => (
  <Mutate<void, unknown, TenantDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/app/Tenant/Delete`}
    {...props}
  />
);

export type UseTenantDeleteProps = Omit<UseMutateProps<void, TenantDeleteQueryParams, void>, 'path' | 'verb'>;

export const useTenantDelete = (props: UseTenantDeleteProps) =>
  useMutate<void, unknown, TenantDeleteQueryParams, void>('DELETE', `/api/services/app/Tenant/Delete`, props);

export interface TenantGetQueryParams {
  Id?: number;
}

export type TenantGetProps = Omit<GetProps<TenantDto, unknown, TenantGetQueryParams>, 'path'>;

export const TenantGet = (props: TenantGetProps) => (
  <Get<TenantDto, unknown, TenantGetQueryParams> path={`/api/services/app/Tenant/Get`} {...props} />
);

export type UseTenantGetProps = Omit<UseGetProps<TenantDto, TenantGetQueryParams>, 'path'>;

export const useTenantGet = (props: UseTenantGetProps) =>
  useGet<TenantDto, unknown, TenantGetQueryParams>(`/api/services/app/Tenant/Get`, props);

export interface TenantGetAllQueryParams {
  Keyword?: string;
  IsActive?: boolean;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type TenantGetAllProps = Omit<GetProps<TenantDtoPagedResultDto, unknown, TenantGetAllQueryParams>, 'path'>;

export const TenantGetAll = (props: TenantGetAllProps) => (
  <Get<TenantDtoPagedResultDto, unknown, TenantGetAllQueryParams> path={`/api/services/app/Tenant/GetAll`} {...props} />
);

export type UseTenantGetAllProps = Omit<UseGetProps<TenantDtoPagedResultDto, TenantGetAllQueryParams>, 'path'>;

export const useTenantGetAll = (props: UseTenantGetAllProps) =>
  useGet<TenantDtoPagedResultDto, unknown, TenantGetAllQueryParams>(`/api/services/app/Tenant/GetAll`, props);

export type TenantUpdateProps = Omit<MutateProps<TenantDto, unknown, void, TenantDto>, 'path' | 'verb'>;

export const TenantUpdate = (props: TenantUpdateProps) => (
  <Mutate<TenantDto, unknown, void, TenantDto> verb="PUT" path={`/api/services/app/Tenant/Update`} {...props} />
);

export type UseTenantUpdateProps = Omit<UseMutateProps<TenantDto, void, TenantDto>, 'path' | 'verb'>;

export const useTenantUpdate = (props: UseTenantUpdateProps) =>
  useMutate<TenantDto, unknown, void, TenantDto>('PUT', `/api/services/app/Tenant/Update`, props);

export type TokenAuthAuthenticateProps = Omit<
  MutateProps<AuthenticateResultModel, unknown, void, AuthenticateModel>,
  'path' | 'verb'
>;

export const TokenAuthAuthenticate = (props: TokenAuthAuthenticateProps) => (
  <Mutate<AuthenticateResultModel, unknown, void, AuthenticateModel>
    verb="POST"
    path={`/api/TokenAuth/Authenticate`}
    {...props}
  />
);

export type UseTokenAuthAuthenticateProps = Omit<
  UseMutateProps<AuthenticateResultModel, void, AuthenticateModel>,
  'path' | 'verb'
>;

export const useTokenAuthAuthenticate = (props: UseTokenAuthAuthenticateProps) =>
  useMutate<AuthenticateResultModel, unknown, void, AuthenticateModel>('POST', `/api/TokenAuth/Authenticate`, props);

export type TokenAuthSignOffProps = Omit<MutateProps<boolean, unknown, void, void>, 'path' | 'verb'>;

export const TokenAuthSignOff = (props: TokenAuthSignOffProps) => (
  <Mutate<boolean, unknown, void, void> verb="POST" path={`/api/TokenAuth/SignOff`} {...props} />
);

export type UseTokenAuthSignOffProps = Omit<UseMutateProps<boolean, void, void>, 'path' | 'verb'>;

export const useTokenAuthSignOff = (props: UseTokenAuthSignOffProps) =>
  useMutate<boolean, unknown, void, void>('POST', `/api/TokenAuth/SignOff`, props);

export type TokenAuthGetExternalAuthenticationProvidersProps = Omit<
  GetProps<ExternalLoginProviderInfoModel[], unknown, void>,
  'path'
>;

export const TokenAuthGetExternalAuthenticationProviders = (
  props: TokenAuthGetExternalAuthenticationProvidersProps
) => (
  <Get<ExternalLoginProviderInfoModel[], unknown, void>
    path={`/api/TokenAuth/GetExternalAuthenticationProviders`}
    {...props}
  />
);

export type UseTokenAuthGetExternalAuthenticationProvidersProps = Omit<
  UseGetProps<ExternalLoginProviderInfoModel[], void>,
  'path'
>;

export const useTokenAuthGetExternalAuthenticationProviders = (
  props: UseTokenAuthGetExternalAuthenticationProvidersProps
) =>
  useGet<ExternalLoginProviderInfoModel[], unknown, void>(`/api/TokenAuth/GetExternalAuthenticationProviders`, props);

export type TokenAuthExternalAuthenticateProps = Omit<
  MutateProps<ExternalAuthenticateResultModel, unknown, void, ExternalAuthenticateModel>,
  'path' | 'verb'
>;

export const TokenAuthExternalAuthenticate = (props: TokenAuthExternalAuthenticateProps) => (
  <Mutate<ExternalAuthenticateResultModel, unknown, void, ExternalAuthenticateModel>
    verb="POST"
    path={`/api/TokenAuth/ExternalAuthenticate`}
    {...props}
  />
);

export type UseTokenAuthExternalAuthenticateProps = Omit<
  UseMutateProps<ExternalAuthenticateResultModel, void, ExternalAuthenticateModel>,
  'path' | 'verb'
>;

export const useTokenAuthExternalAuthenticate = (props: UseTokenAuthExternalAuthenticateProps) =>
  useMutate<ExternalAuthenticateResultModel, unknown, void, ExternalAuthenticateModel>(
    'POST',
    `/api/TokenAuth/ExternalAuthenticate`,
    props
  );

export type UserCreateProps = Omit<MutateProps<UserDto, unknown, void, CreateUserDto>, 'path' | 'verb'>;

export const UserCreate = (props: UserCreateProps) => (
  <Mutate<UserDto, unknown, void, CreateUserDto> verb="POST" path={`/api/services/app/User/Create`} {...props} />
);

export type UseUserCreateProps = Omit<UseMutateProps<UserDto, void, CreateUserDto>, 'path' | 'verb'>;

export const useUserCreate = (props: UseUserCreateProps) =>
  useMutate<UserDto, unknown, void, CreateUserDto>('POST', `/api/services/app/User/Create`, props);

export type UserUpdateProps = Omit<MutateProps<UserDto, unknown, void, UserDto>, 'path' | 'verb'>;

export const UserUpdate = (props: UserUpdateProps) => (
  <Mutate<UserDto, unknown, void, UserDto> verb="PUT" path={`/api/services/app/User/Update`} {...props} />
);

export type UseUserUpdateProps = Omit<UseMutateProps<UserDto, void, UserDto>, 'path' | 'verb'>;

export const useUserUpdate = (props: UseUserUpdateProps) =>
  useMutate<UserDto, unknown, void, UserDto>('PUT', `/api/services/app/User/Update`, props);

export interface UserDeleteQueryParams {
  Id?: number;
}

export type UserDeleteProps = Omit<MutateProps<void, unknown, UserDeleteQueryParams, void>, 'path' | 'verb'>;

export const UserDelete = (props: UserDeleteProps) => (
  <Mutate<void, unknown, UserDeleteQueryParams, void> verb="DELETE" path={`/api/services/app/User/Delete`} {...props} />
);

export type UseUserDeleteProps = Omit<UseMutateProps<void, UserDeleteQueryParams, void>, 'path' | 'verb'>;

export const useUserDelete = (props: UseUserDeleteProps) =>
  useMutate<void, unknown, UserDeleteQueryParams, void>('DELETE', `/api/services/app/User/Delete`, props);

export type UserGetRolesProps = Omit<GetProps<RoleDtoListResultDto, unknown, void>, 'path'>;

export const UserGetRoles = (props: UserGetRolesProps) => (
  <Get<RoleDtoListResultDto, unknown, void> path={`/api/services/app/User/GetRoles`} {...props} />
);

export type UseUserGetRolesProps = Omit<UseGetProps<RoleDtoListResultDto, void>, 'path'>;

export const useUserGetRoles = (props: UseUserGetRolesProps) =>
  useGet<RoleDtoListResultDto, unknown, void>(`/api/services/app/User/GetRoles`, props);

export type UserChangeLanguageProps = Omit<MutateProps<void, unknown, void, ChangeUserLanguageDto>, 'path' | 'verb'>;

export const UserChangeLanguage = (props: UserChangeLanguageProps) => (
  <Mutate<void, unknown, void, ChangeUserLanguageDto>
    verb="POST"
    path={`/api/services/app/User/ChangeLanguage`}
    {...props}
  />
);

export type UseUserChangeLanguageProps = Omit<UseMutateProps<void, void, ChangeUserLanguageDto>, 'path' | 'verb'>;

export const useUserChangeLanguage = (props: UseUserChangeLanguageProps) =>
  useMutate<void, unknown, void, ChangeUserLanguageDto>('POST', `/api/services/app/User/ChangeLanguage`, props);

export interface UserResetPasswordSendOtpQueryParams {
  mobileNo?: string;
}

export type UserResetPasswordSendOtpProps = Omit<
  MutateProps<ResetPasswordSendOtpResponse, unknown, UserResetPasswordSendOtpQueryParams, void>,
  'path' | 'verb'
>;

export const UserResetPasswordSendOtp = (props: UserResetPasswordSendOtpProps) => (
  <Mutate<ResetPasswordSendOtpResponse, unknown, UserResetPasswordSendOtpQueryParams, void>
    verb="POST"
    path={`/api/services/app/User/ResetPasswordSendOtp`}
    {...props}
  />
);

export type UseUserResetPasswordSendOtpProps = Omit<
  UseMutateProps<ResetPasswordSendOtpResponse, UserResetPasswordSendOtpQueryParams, void>,
  'path' | 'verb'
>;

export const useUserResetPasswordSendOtp = (props: UseUserResetPasswordSendOtpProps) =>
  useMutate<ResetPasswordSendOtpResponse, unknown, UserResetPasswordSendOtpQueryParams, void>(
    'POST',
    `/api/services/app/User/ResetPasswordSendOtp`,
    props
  );

export type UserResetPasswordVerifyOtpProps = Omit<
  MutateProps<ResetPasswordVerifyOtpResponse, unknown, void, ResetPasswordVerifyOtpInput>,
  'path' | 'verb'
>;

export const UserResetPasswordVerifyOtp = (props: UserResetPasswordVerifyOtpProps) => (
  <Mutate<ResetPasswordVerifyOtpResponse, unknown, void, ResetPasswordVerifyOtpInput>
    verb="POST"
    path={`/api/services/app/User/ResetPasswordVerifyOtp`}
    {...props}
  />
);

export type UseUserResetPasswordVerifyOtpProps = Omit<
  UseMutateProps<ResetPasswordVerifyOtpResponse, void, ResetPasswordVerifyOtpInput>,
  'path' | 'verb'
>;

export const useUserResetPasswordVerifyOtp = (props: UseUserResetPasswordVerifyOtpProps) =>
  useMutate<ResetPasswordVerifyOtpResponse, unknown, void, ResetPasswordVerifyOtpInput>(
    'POST',
    `/api/services/app/User/ResetPasswordVerifyOtp`,
    props
  );

export type UserResetPasswordUsingTokenProps = Omit<
  MutateProps<boolean, unknown, void, ResetPasswordUsingTokenInput>,
  'path' | 'verb'
>;

export const UserResetPasswordUsingToken = (props: UserResetPasswordUsingTokenProps) => (
  <Mutate<boolean, unknown, void, ResetPasswordUsingTokenInput>
    verb="POST"
    path={`/api/services/app/User/ResetPasswordUsingToken`}
    {...props}
  />
);

export type UseUserResetPasswordUsingTokenProps = Omit<
  UseMutateProps<boolean, void, ResetPasswordUsingTokenInput>,
  'path' | 'verb'
>;

export const useUserResetPasswordUsingToken = (props: UseUserResetPasswordUsingTokenProps) =>
  useMutate<boolean, unknown, void, ResetPasswordUsingTokenInput>(
    'POST',
    `/api/services/app/User/ResetPasswordUsingToken`,
    props
  );

export type UserChangePasswordProps = Omit<MutateProps<boolean, unknown, void, ChangePasswordDto>, 'path' | 'verb'>;

export const UserChangePassword = (props: UserChangePasswordProps) => (
  <Mutate<boolean, unknown, void, ChangePasswordDto>
    verb="POST"
    path={`/api/services/app/User/ChangePassword`}
    {...props}
  />
);

export type UseUserChangePasswordProps = Omit<UseMutateProps<boolean, void, ChangePasswordDto>, 'path' | 'verb'>;

export const useUserChangePassword = (props: UseUserChangePasswordProps) =>
  useMutate<boolean, unknown, void, ChangePasswordDto>('POST', `/api/services/app/User/ChangePassword`, props);

export type UserResetPasswordProps = Omit<MutateProps<boolean, unknown, void, ResetPasswordDto>, 'path' | 'verb'>;

export const UserResetPassword = (props: UserResetPasswordProps) => (
  <Mutate<boolean, unknown, void, ResetPasswordDto>
    verb="POST"
    path={`/api/services/app/User/ResetPassword`}
    {...props}
  />
);

export type UseUserResetPasswordProps = Omit<UseMutateProps<boolean, void, ResetPasswordDto>, 'path' | 'verb'>;

export const useUserResetPassword = (props: UseUserResetPasswordProps) =>
  useMutate<boolean, unknown, void, ResetPasswordDto>('POST', `/api/services/app/User/ResetPassword`, props);

export type UserGetUserAuthConfigProps = Omit<GetProps<AbpUserAuthConfigDto, unknown, void>, 'path'>;

export const UserGetUserAuthConfig = (props: UserGetUserAuthConfigProps) => (
  <Get<AbpUserAuthConfigDto, unknown, void> path={`/api/services/app/User/GetUserAuthConfig`} {...props} />
);

export type UseUserGetUserAuthConfigProps = Omit<UseGetProps<AbpUserAuthConfigDto, void>, 'path'>;

export const useUserGetUserAuthConfig = (props: UseUserGetUserAuthConfigProps) =>
  useGet<AbpUserAuthConfigDto, unknown, void>(`/api/services/app/User/GetUserAuthConfig`, props);

export interface UserGetQueryParams {
  Id?: number;
}

export type UserGetProps = Omit<GetProps<UserDto, unknown, UserGetQueryParams>, 'path'>;

export const UserGet = (props: UserGetProps) => (
  <Get<UserDto, unknown, UserGetQueryParams> path={`/api/services/app/User/Get`} {...props} />
);

export type UseUserGetProps = Omit<UseGetProps<UserDto, UserGetQueryParams>, 'path'>;

export const useUserGet = (props: UseUserGetProps) =>
  useGet<UserDto, unknown, UserGetQueryParams>(`/api/services/app/User/Get`, props);

export interface UserGetAllQueryParams {
  Keyword?: string;
  IsActive?: boolean;
  SkipCount?: number;
  MaxResultCount?: number;
}

export type UserGetAllProps = Omit<GetProps<UserDtoPagedResultDto, unknown, UserGetAllQueryParams>, 'path'>;

export const UserGetAll = (props: UserGetAllProps) => (
  <Get<UserDtoPagedResultDto, unknown, UserGetAllQueryParams> path={`/api/services/app/User/GetAll`} {...props} />
);

export type UseUserGetAllProps = Omit<UseGetProps<UserDtoPagedResultDto, UserGetAllQueryParams>, 'path'>;

export const useUserGetAll = (props: UseUserGetAllProps) =>
  useGet<UserDtoPagedResultDto, unknown, UserGetAllQueryParams>(`/api/services/app/User/GetAll`, props);
