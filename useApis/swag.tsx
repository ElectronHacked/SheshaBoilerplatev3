/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface Articles {
  id: string;
  title?: string;
  content?: string;
  createdAt: string;
  authorId: string;
}

export interface Author {
  id: string;
  name?: string;
  surname?: string;
  jobTitle?: string;
  driverExperience?: string;
}

export interface Comments {
  id: string;
  comment?: string;
  photo?: string;
  articleId: string;
  userId: string;
}

export interface FeedBack {
  id: string;
  authorId: string;
  userId: string;
  messages?: string;
}

export interface FuelWise {
  id: string;
  title?: string;
  body?: string;
  authorId: string;
}

export interface Likes {
  id: string;
  userId: string;
  articleId: string;
}

export interface TipsForEveryOne {
  id: string;
  content?: string;
  userId: string;
}

export interface User {
  id: string;
  name?: string;
  email?: string;
}

export interface LoginViewModel {
  email: string;
  password: string;
  rememberMe: boolean;
}

export interface RegisterViewModel {
  email: string;
  password: string;
  confirmPassword?: string;
}

export interface ChangePasswordViewModel {
  oldPassword: string;
  newPassword: string;
  confirmPassword?: string;
}

export type AuthorRequestBody = Author;

export type FeedBackRequestBody = FeedBack;

export type ValuesPostValueRequestBody = string;

export type ArticlesRequestBody = Articles;

export type CommentsRequestBody = Comments;

export type FuelWiseRequestBody = FuelWise;

export type LikesRequestBody = Likes;

export type TipsForEveryOneRequestBody = TipsForEveryOne;

export type UserRequestBody = User;

export type ValuesGetAllProps = Omit<GetProps<string[], unknown, void>, 'path'>;

export const ValuesGetAll = (props: ValuesGetAllProps) => (
  <Get<string[], unknown, void> path={`/api/Values`} {...props} />
);

export type UseValuesGetAllProps = Omit<UseGetProps<string[], void>, 'path'>;

export const useValuesGetAll = (props: UseValuesGetAllProps) => useGet<string[], unknown, void>(`/api/Values`, props);

export type ValuesPostProps = Omit<MutateProps<void, unknown, void, ValuesPostValueRequestBody>, 'path' | 'verb'>;

export const ValuesPost = (props: ValuesPostProps) => (
  <Mutate<void, unknown, void, ValuesPostValueRequestBody> verb="POST" path={`/api/Values`} {...props} />
);

export type UseValuesPostProps = Omit<UseMutateProps<void, void, ValuesPostValueRequestBody>, 'path' | 'verb'>;

export const useValuesPost = (props: UseValuesPostProps) =>
  useMutate<void, unknown, void, ValuesPostValueRequestBody>('POST', `/api/Values`, props);

export type ValuesGetProps = Omit<GetProps<string, unknown, void>, 'path'> & { id: number };

export const ValuesGet = ({ id, ...props }: ValuesGetProps) => (
  <Get<string, unknown, void> path={`/api/Values/${id}`} {...props} />
);

export type UseValuesGetProps = Omit<UseGetProps<string, void>, 'path'> & { id: number };

export const useValuesGet = ({ id, ...props }: UseValuesGetProps) =>
  useGet<string, unknown, void>(`/api/Values/${id}`, props);

export type ValuesPutProps = Omit<MutateProps<void, unknown, void, ValuesPostValueRequestBody>, 'path' | 'verb'> & {
  id: number;
};

export const ValuesPut = ({ id, ...props }: ValuesPutProps) => (
  <Mutate<void, unknown, void, ValuesPostValueRequestBody> verb="PUT" path={`/api/Values/${id}`} {...props} />
);

export type UseValuesPutProps = Omit<UseMutateProps<void, void, ValuesPostValueRequestBody>, 'path' | 'verb'> & {
  id: number;
};

export const useValuesPut = ({ id, ...props }: UseValuesPutProps) =>
  useMutate<void, unknown, void, ValuesPostValueRequestBody>('PUT', `/api/Values/${id}`, props);

export type ValuesDeleteProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const ValuesDelete = (props: ValuesDeleteProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Values`} {...props} />
);

export type UseValuesDeleteProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useValuesDelete = (props: UseValuesDeleteProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Values`, props);

export type ArticlesGetArticlesAllProps = Omit<GetProps<Articles[], unknown, void>, 'path'>;

export const ArticlesGetArticlesAll = (props: ArticlesGetArticlesAllProps) => (
  <Get<Articles[], unknown, void> path={`/api/Articles`} {...props} />
);

export type UseArticlesGetArticlesAllProps = Omit<UseGetProps<Articles[], void>, 'path'>;

export const useArticlesGetArticlesAll = (props: UseArticlesGetArticlesAllProps) =>
  useGet<Articles[], unknown, void>(`/api/Articles`, props);

export type ArticlesPostArticlesProps = Omit<MutateProps<void, unknown, void, ArticlesRequestBody>, 'path' | 'verb'>;

export const ArticlesPostArticles = (props: ArticlesPostArticlesProps) => (
  <Mutate<void, unknown, void, ArticlesRequestBody> verb="POST" path={`/api/Articles`} {...props} />
);

export type UseArticlesPostArticlesProps = Omit<UseMutateProps<void, void, ArticlesRequestBody>, 'path' | 'verb'>;

export const useArticlesPostArticles = (props: UseArticlesPostArticlesProps) =>
  useMutate<void, unknown, void, ArticlesRequestBody>('POST', `/api/Articles`, props);

export type ArticlesGetArticlesProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const ArticlesGetArticles = ({ id, ...props }: ArticlesGetArticlesProps) => (
  <Get<void, unknown, void> path={`/api/Articles/${id}`} {...props} />
);

export type UseArticlesGetArticlesProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useArticlesGetArticles = ({ id, ...props }: UseArticlesGetArticlesProps) =>
  useGet<void, unknown, void>(`/api/Articles/${id}`, props);

export type ArticlesPutArticlesProps = Omit<MutateProps<void, unknown, void, ArticlesRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const ArticlesPutArticles = ({ id, ...props }: ArticlesPutArticlesProps) => (
  <Mutate<void, unknown, void, ArticlesRequestBody> verb="PUT" path={`/api/Articles/${id}`} {...props} />
);

export type UseArticlesPutArticlesProps = Omit<UseMutateProps<void, void, ArticlesRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const useArticlesPutArticles = ({ id, ...props }: UseArticlesPutArticlesProps) =>
  useMutate<void, unknown, void, ArticlesRequestBody>('PUT', `/api/Articles/${id}`, props);

export type ArticlesDeleteArticlesProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const ArticlesDeleteArticles = (props: ArticlesDeleteArticlesProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Articles`} {...props} />
);

export type UseArticlesDeleteArticlesProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useArticlesDeleteArticles = (props: UseArticlesDeleteArticlesProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Articles`, props);

export type AuthorsGetAuthorAllProps = Omit<GetProps<Author[], unknown, void>, 'path'>;

export const AuthorsGetAuthorAll = (props: AuthorsGetAuthorAllProps) => (
  <Get<Author[], unknown, void> path={`/api/Authors`} {...props} />
);

export type UseAuthorsGetAuthorAllProps = Omit<UseGetProps<Author[], void>, 'path'>;

export const useAuthorsGetAuthorAll = (props: UseAuthorsGetAuthorAllProps) =>
  useGet<Author[], unknown, void>(`/api/Authors`, props);

export type AuthorsPostAuthorProps = Omit<MutateProps<void, unknown, void, AuthorRequestBody>, 'path' | 'verb'>;

export const AuthorsPostAuthor = (props: AuthorsPostAuthorProps) => (
  <Mutate<void, unknown, void, AuthorRequestBody> verb="POST" path={`/api/Authors`} {...props} />
);

export type UseAuthorsPostAuthorProps = Omit<UseMutateProps<void, void, AuthorRequestBody>, 'path' | 'verb'>;

export const useAuthorsPostAuthor = (props: UseAuthorsPostAuthorProps) =>
  useMutate<void, unknown, void, AuthorRequestBody>('POST', `/api/Authors`, props);

export type AuthorsGetAuthorProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const AuthorsGetAuthor = ({ id, ...props }: AuthorsGetAuthorProps) => (
  <Get<void, unknown, void> path={`/api/Authors/${id}`} {...props} />
);

export type UseAuthorsGetAuthorProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useAuthorsGetAuthor = ({ id, ...props }: UseAuthorsGetAuthorProps) =>
  useGet<void, unknown, void>(`/api/Authors/${id}`, props);

export type AuthorsPutAuthorProps = Omit<MutateProps<void, unknown, void, AuthorRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const AuthorsPutAuthor = ({ id, ...props }: AuthorsPutAuthorProps) => (
  <Mutate<void, unknown, void, AuthorRequestBody> verb="PUT" path={`/api/Authors/${id}`} {...props} />
);

export type UseAuthorsPutAuthorProps = Omit<UseMutateProps<void, void, AuthorRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const useAuthorsPutAuthor = ({ id, ...props }: UseAuthorsPutAuthorProps) =>
  useMutate<void, unknown, void, AuthorRequestBody>('PUT', `/api/Authors/${id}`, props);

export type AuthorsDeleteAuthorProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const AuthorsDeleteAuthor = (props: AuthorsDeleteAuthorProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Authors`} {...props} />
);

export type UseAuthorsDeleteAuthorProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useAuthorsDeleteAuthor = (props: UseAuthorsDeleteAuthorProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Authors`, props);

export type CommentsGetCommentsAllProps = Omit<GetProps<Comments[], unknown, void>, 'path'>;

export const CommentsGetCommentsAll = (props: CommentsGetCommentsAllProps) => (
  <Get<Comments[], unknown, void> path={`/api/Comments`} {...props} />
);

export type UseCommentsGetCommentsAllProps = Omit<UseGetProps<Comments[], void>, 'path'>;

export const useCommentsGetCommentsAll = (props: UseCommentsGetCommentsAllProps) =>
  useGet<Comments[], unknown, void>(`/api/Comments`, props);

export type CommentsPostCommentsProps = Omit<MutateProps<void, unknown, void, CommentsRequestBody>, 'path' | 'verb'>;

export const CommentsPostComments = (props: CommentsPostCommentsProps) => (
  <Mutate<void, unknown, void, CommentsRequestBody> verb="POST" path={`/api/Comments`} {...props} />
);

export type UseCommentsPostCommentsProps = Omit<UseMutateProps<void, void, CommentsRequestBody>, 'path' | 'verb'>;

export const useCommentsPostComments = (props: UseCommentsPostCommentsProps) =>
  useMutate<void, unknown, void, CommentsRequestBody>('POST', `/api/Comments`, props);

export type CommentsGetCommentsProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const CommentsGetComments = ({ id, ...props }: CommentsGetCommentsProps) => (
  <Get<void, unknown, void> path={`/api/Comments/${id}`} {...props} />
);

export type UseCommentsGetCommentsProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useCommentsGetComments = ({ id, ...props }: UseCommentsGetCommentsProps) =>
  useGet<void, unknown, void>(`/api/Comments/${id}`, props);

export type CommentsPutCommentsProps = Omit<MutateProps<void, unknown, void, CommentsRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const CommentsPutComments = ({ id, ...props }: CommentsPutCommentsProps) => (
  <Mutate<void, unknown, void, CommentsRequestBody> verb="PUT" path={`/api/Comments/${id}`} {...props} />
);

export type UseCommentsPutCommentsProps = Omit<UseMutateProps<void, void, CommentsRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const useCommentsPutComments = ({ id, ...props }: UseCommentsPutCommentsProps) =>
  useMutate<void, unknown, void, CommentsRequestBody>('PUT', `/api/Comments/${id}`, props);

export type CommentsDeleteCommentsProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const CommentsDeleteComments = (props: CommentsDeleteCommentsProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Comments`} {...props} />
);

export type UseCommentsDeleteCommentsProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useCommentsDeleteComments = (props: UseCommentsDeleteCommentsProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Comments`, props);

export type FeedBacksGetFeedBackAllProps = Omit<GetProps<FeedBack[], unknown, void>, 'path'>;

export const FeedBacksGetFeedBackAll = (props: FeedBacksGetFeedBackAllProps) => (
  <Get<FeedBack[], unknown, void> path={`/api/FeedBacks`} {...props} />
);

export type UseFeedBacksGetFeedBackAllProps = Omit<UseGetProps<FeedBack[], void>, 'path'>;

export const useFeedBacksGetFeedBackAll = (props: UseFeedBacksGetFeedBackAllProps) =>
  useGet<FeedBack[], unknown, void>(`/api/FeedBacks`, props);

export type FeedBacksPostFeedBackProps = Omit<MutateProps<void, unknown, void, FeedBackRequestBody>, 'path' | 'verb'>;

export const FeedBacksPostFeedBack = (props: FeedBacksPostFeedBackProps) => (
  <Mutate<void, unknown, void, FeedBackRequestBody> verb="POST" path={`/api/FeedBacks`} {...props} />
);

export type UseFeedBacksPostFeedBackProps = Omit<UseMutateProps<void, void, FeedBackRequestBody>, 'path' | 'verb'>;

export const useFeedBacksPostFeedBack = (props: UseFeedBacksPostFeedBackProps) =>
  useMutate<void, unknown, void, FeedBackRequestBody>('POST', `/api/FeedBacks`, props);

export type FeedBacksGetFeedBackProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const FeedBacksGetFeedBack = ({ id, ...props }: FeedBacksGetFeedBackProps) => (
  <Get<void, unknown, void> path={`/api/FeedBacks/${id}`} {...props} />
);

export type UseFeedBacksGetFeedBackProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useFeedBacksGetFeedBack = ({ id, ...props }: UseFeedBacksGetFeedBackProps) =>
  useGet<void, unknown, void>(`/api/FeedBacks/${id}`, props);

export type FeedBacksPutFeedBackProps = Omit<MutateProps<void, unknown, void, FeedBackRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const FeedBacksPutFeedBack = ({ id, ...props }: FeedBacksPutFeedBackProps) => (
  <Mutate<void, unknown, void, FeedBackRequestBody> verb="PUT" path={`/api/FeedBacks/${id}`} {...props} />
);

export type UseFeedBacksPutFeedBackProps = Omit<UseMutateProps<void, void, FeedBackRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const useFeedBacksPutFeedBack = ({ id, ...props }: UseFeedBacksPutFeedBackProps) =>
  useMutate<void, unknown, void, FeedBackRequestBody>('PUT', `/api/FeedBacks/${id}`, props);

export type FeedBacksDeleteFeedBackProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const FeedBacksDeleteFeedBack = (props: FeedBacksDeleteFeedBackProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/FeedBacks`} {...props} />
);

export type UseFeedBacksDeleteFeedBackProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useFeedBacksDeleteFeedBack = (props: UseFeedBacksDeleteFeedBackProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/FeedBacks`, props);

export type FuelWisesGetFuelWiseAllProps = Omit<GetProps<FuelWise[], unknown, void>, 'path'>;

export const FuelWisesGetFuelWiseAll = (props: FuelWisesGetFuelWiseAllProps) => (
  <Get<FuelWise[], unknown, void> path={`/api/FuelWises`} {...props} />
);

export type UseFuelWisesGetFuelWiseAllProps = Omit<UseGetProps<FuelWise[], void>, 'path'>;

export const useFuelWisesGetFuelWiseAll = (props: UseFuelWisesGetFuelWiseAllProps) =>
  useGet<FuelWise[], unknown, void>(`/api/FuelWises`, props);

export type FuelWisesPostFuelWiseProps = Omit<MutateProps<void, unknown, void, FuelWiseRequestBody>, 'path' | 'verb'>;

export const FuelWisesPostFuelWise = (props: FuelWisesPostFuelWiseProps) => (
  <Mutate<void, unknown, void, FuelWiseRequestBody> verb="POST" path={`/api/FuelWises`} {...props} />
);

export type UseFuelWisesPostFuelWiseProps = Omit<UseMutateProps<void, void, FuelWiseRequestBody>, 'path' | 'verb'>;

export const useFuelWisesPostFuelWise = (props: UseFuelWisesPostFuelWiseProps) =>
  useMutate<void, unknown, void, FuelWiseRequestBody>('POST', `/api/FuelWises`, props);

export type FuelWisesGetFuelWiseProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const FuelWisesGetFuelWise = ({ id, ...props }: FuelWisesGetFuelWiseProps) => (
  <Get<void, unknown, void> path={`/api/FuelWises/${id}`} {...props} />
);

export type UseFuelWisesGetFuelWiseProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useFuelWisesGetFuelWise = ({ id, ...props }: UseFuelWisesGetFuelWiseProps) =>
  useGet<void, unknown, void>(`/api/FuelWises/${id}`, props);

export type FuelWisesPutFuelWiseProps = Omit<MutateProps<void, unknown, void, FuelWiseRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const FuelWisesPutFuelWise = ({ id, ...props }: FuelWisesPutFuelWiseProps) => (
  <Mutate<void, unknown, void, FuelWiseRequestBody> verb="PUT" path={`/api/FuelWises/${id}`} {...props} />
);

export type UseFuelWisesPutFuelWiseProps = Omit<UseMutateProps<void, void, FuelWiseRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const useFuelWisesPutFuelWise = ({ id, ...props }: UseFuelWisesPutFuelWiseProps) =>
  useMutate<void, unknown, void, FuelWiseRequestBody>('PUT', `/api/FuelWises/${id}`, props);

export type FuelWisesDeleteFuelWiseProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const FuelWisesDeleteFuelWise = (props: FuelWisesDeleteFuelWiseProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/FuelWises`} {...props} />
);

export type UseFuelWisesDeleteFuelWiseProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useFuelWisesDeleteFuelWise = (props: UseFuelWisesDeleteFuelWiseProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/FuelWises`, props);

export type LikesGetLikesAllProps = Omit<GetProps<Likes[], unknown, void>, 'path'>;

export const LikesGetLikesAll = (props: LikesGetLikesAllProps) => (
  <Get<Likes[], unknown, void> path={`/api/Likes`} {...props} />
);

export type UseLikesGetLikesAllProps = Omit<UseGetProps<Likes[], void>, 'path'>;

export const useLikesGetLikesAll = (props: UseLikesGetLikesAllProps) =>
  useGet<Likes[], unknown, void>(`/api/Likes`, props);

export type LikesPostLikesProps = Omit<MutateProps<void, unknown, void, LikesRequestBody>, 'path' | 'verb'>;

export const LikesPostLikes = (props: LikesPostLikesProps) => (
  <Mutate<void, unknown, void, LikesRequestBody> verb="POST" path={`/api/Likes`} {...props} />
);

export type UseLikesPostLikesProps = Omit<UseMutateProps<void, void, LikesRequestBody>, 'path' | 'verb'>;

export const useLikesPostLikes = (props: UseLikesPostLikesProps) =>
  useMutate<void, unknown, void, LikesRequestBody>('POST', `/api/Likes`, props);

export type LikesGetLikesProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const LikesGetLikes = ({ id, ...props }: LikesGetLikesProps) => (
  <Get<void, unknown, void> path={`/api/Likes/${id}`} {...props} />
);

export type UseLikesGetLikesProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useLikesGetLikes = ({ id, ...props }: UseLikesGetLikesProps) =>
  useGet<void, unknown, void>(`/api/Likes/${id}`, props);

export type LikesPutLikesProps = Omit<MutateProps<void, unknown, void, LikesRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const LikesPutLikes = ({ id, ...props }: LikesPutLikesProps) => (
  <Mutate<void, unknown, void, LikesRequestBody> verb="PUT" path={`/api/Likes/${id}`} {...props} />
);

export type UseLikesPutLikesProps = Omit<UseMutateProps<void, void, LikesRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const useLikesPutLikes = ({ id, ...props }: UseLikesPutLikesProps) =>
  useMutate<void, unknown, void, LikesRequestBody>('PUT', `/api/Likes/${id}`, props);

export type LikesDeleteLikesProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const LikesDeleteLikes = (props: LikesDeleteLikesProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Likes`} {...props} />
);

export type UseLikesDeleteLikesProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useLikesDeleteLikes = (props: UseLikesDeleteLikesProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Likes`, props);

export type TipsForEveryOnesGetTipsForEveryOneAllProps = Omit<GetProps<TipsForEveryOne[], unknown, void>, 'path'>;

export const TipsForEveryOnesGetTipsForEveryOneAll = (props: TipsForEveryOnesGetTipsForEveryOneAllProps) => (
  <Get<TipsForEveryOne[], unknown, void> path={`/api/TipsForEveryOnes`} {...props} />
);

export type UseTipsForEveryOnesGetTipsForEveryOneAllProps = Omit<UseGetProps<TipsForEveryOne[], void>, 'path'>;

export const useTipsForEveryOnesGetTipsForEveryOneAll = (props: UseTipsForEveryOnesGetTipsForEveryOneAllProps) =>
  useGet<TipsForEveryOne[], unknown, void>(`/api/TipsForEveryOnes`, props);

export type TipsForEveryOnesPostTipsForEveryOneProps = Omit<
  MutateProps<void, unknown, void, TipsForEveryOneRequestBody>,
  'path' | 'verb'
>;

export const TipsForEveryOnesPostTipsForEveryOne = (props: TipsForEveryOnesPostTipsForEveryOneProps) => (
  <Mutate<void, unknown, void, TipsForEveryOneRequestBody> verb="POST" path={`/api/TipsForEveryOnes`} {...props} />
);

export type UseTipsForEveryOnesPostTipsForEveryOneProps = Omit<
  UseMutateProps<void, void, TipsForEveryOneRequestBody>,
  'path' | 'verb'
>;

export const useTipsForEveryOnesPostTipsForEveryOne = (props: UseTipsForEveryOnesPostTipsForEveryOneProps) =>
  useMutate<void, unknown, void, TipsForEveryOneRequestBody>('POST', `/api/TipsForEveryOnes`, props);

export type TipsForEveryOnesGetTipsForEveryOneProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const TipsForEveryOnesGetTipsForEveryOne = ({ id, ...props }: TipsForEveryOnesGetTipsForEveryOneProps) => (
  <Get<void, unknown, void> path={`/api/TipsForEveryOnes/${id}`} {...props} />
);

export type UseTipsForEveryOnesGetTipsForEveryOneProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useTipsForEveryOnesGetTipsForEveryOne = ({ id, ...props }: UseTipsForEveryOnesGetTipsForEveryOneProps) =>
  useGet<void, unknown, void>(`/api/TipsForEveryOnes/${id}`, props);

export type TipsForEveryOnesPutTipsForEveryOneProps = Omit<
  MutateProps<void, unknown, void, TipsForEveryOneRequestBody>,
  'path' | 'verb'
> & { id: string };

export const TipsForEveryOnesPutTipsForEveryOne = ({ id, ...props }: TipsForEveryOnesPutTipsForEveryOneProps) => (
  <Mutate<void, unknown, void, TipsForEveryOneRequestBody> verb="PUT" path={`/api/TipsForEveryOnes/${id}`} {...props} />
);

export type UseTipsForEveryOnesPutTipsForEveryOneProps = Omit<
  UseMutateProps<void, void, TipsForEveryOneRequestBody>,
  'path' | 'verb'
> & { id: string };

export const useTipsForEveryOnesPutTipsForEveryOne = ({ id, ...props }: UseTipsForEveryOnesPutTipsForEveryOneProps) =>
  useMutate<void, unknown, void, TipsForEveryOneRequestBody>('PUT', `/api/TipsForEveryOnes/${id}`, props);

export type TipsForEveryOnesDeleteTipsForEveryOneProps = Omit<
  MutateProps<void, unknown, void, string>,
  'path' | 'verb'
>;

export const TipsForEveryOnesDeleteTipsForEveryOne = (props: TipsForEveryOnesDeleteTipsForEveryOneProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/TipsForEveryOnes`} {...props} />
);

export type UseTipsForEveryOnesDeleteTipsForEveryOneProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useTipsForEveryOnesDeleteTipsForEveryOne = (props: UseTipsForEveryOnesDeleteTipsForEveryOneProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/TipsForEveryOnes`, props);

export type UsersGetUserAllProps = Omit<GetProps<User[], unknown, void>, 'path'>;

export const UsersGetUserAll = (props: UsersGetUserAllProps) => (
  <Get<User[], unknown, void> path={`/api/Users`} {...props} />
);

export type UseUsersGetUserAllProps = Omit<UseGetProps<User[], void>, 'path'>;

export const useUsersGetUserAll = (props: UseUsersGetUserAllProps) =>
  useGet<User[], unknown, void>(`/api/Users`, props);

export type UsersPostUserProps = Omit<MutateProps<void, unknown, void, UserRequestBody>, 'path' | 'verb'>;

export const UsersPostUser = (props: UsersPostUserProps) => (
  <Mutate<void, unknown, void, UserRequestBody> verb="POST" path={`/api/Users`} {...props} />
);

export type UseUsersPostUserProps = Omit<UseMutateProps<void, void, UserRequestBody>, 'path' | 'verb'>;

export const useUsersPostUser = (props: UseUsersPostUserProps) =>
  useMutate<void, unknown, void, UserRequestBody>('POST', `/api/Users`, props);

export type UsersGetUserProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const UsersGetUser = ({ id, ...props }: UsersGetUserProps) => (
  <Get<void, unknown, void> path={`/api/Users/${id}`} {...props} />
);

export type UseUsersGetUserProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useUsersGetUser = ({ id, ...props }: UseUsersGetUserProps) =>
  useGet<void, unknown, void>(`/api/Users/${id}`, props);

export type UsersPutUserProps = Omit<MutateProps<void, unknown, void, UserRequestBody>, 'path' | 'verb'> & {
  id: string;
};

export const UsersPutUser = ({ id, ...props }: UsersPutUserProps) => (
  <Mutate<void, unknown, void, UserRequestBody> verb="PUT" path={`/api/Users/${id}`} {...props} />
);

export type UseUsersPutUserProps = Omit<UseMutateProps<void, void, UserRequestBody>, 'path' | 'verb'> & { id: string };

export const useUsersPutUser = ({ id, ...props }: UseUsersPutUserProps) =>
  useMutate<void, unknown, void, UserRequestBody>('PUT', `/api/Users/${id}`, props);

export type UsersDeleteUserProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const UsersDeleteUser = (props: UsersDeleteUserProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Users`} {...props} />
);

export type UseUsersDeleteUserProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useUsersDeleteUser = (props: UseUsersDeleteUserProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Users`, props);

export type AccountLoginProps = Omit<MutateProps<void, unknown, void, LoginViewModel>, 'path' | 'verb'>;

export const AccountLogin = (props: AccountLoginProps) => (
  <Mutate<void, unknown, void, LoginViewModel> verb="POST" path={`/api/Account/Login`} {...props} />
);

export type UseAccountLoginProps = Omit<UseMutateProps<void, void, LoginViewModel>, 'path' | 'verb'>;

export const useAccountLogin = (props: UseAccountLoginProps) =>
  useMutate<void, unknown, void, LoginViewModel>('POST', `/api/Account/Login`, props);

export type AccountLogoutProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

export const AccountLogout = (props: AccountLogoutProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Account/Logout`} {...props} />
);

export type UseAccountLogoutProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

export const useAccountLogout = (props: UseAccountLogoutProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Account/Logout`, props);

export type AccountRegisterProps = Omit<MutateProps<void, unknown, void, RegisterViewModel>, 'path' | 'verb'>;

export const AccountRegister = (props: AccountRegisterProps) => (
  <Mutate<void, unknown, void, RegisterViewModel> verb="POST" path={`/api/Account/Register`} {...props} />
);

export type UseAccountRegisterProps = Omit<UseMutateProps<void, void, RegisterViewModel>, 'path' | 'verb'>;

export const useAccountRegister = (props: UseAccountRegisterProps) =>
  useMutate<void, unknown, void, RegisterViewModel>('POST', `/api/Account/Register`, props);

export type AccountChangePasswordProps = Omit<
  MutateProps<void, unknown, void, ChangePasswordViewModel>,
  'path' | 'verb'
>;

export const AccountChangePassword = (props: AccountChangePasswordProps) => (
  <Mutate<void, unknown, void, ChangePasswordViewModel> verb="PUT" path={`/api/Account/Password`} {...props} />
);

export type UseAccountChangePasswordProps = Omit<UseMutateProps<void, void, ChangePasswordViewModel>, 'path' | 'verb'>;

export const useAccountChangePassword = (props: UseAccountChangePasswordProps) =>
  useMutate<void, unknown, void, ChangePasswordViewModel>('PUT', `/api/Account/Password`, props);

export type AccountIsAuthenticatedProps = Omit<GetProps<boolean, unknown, void>, 'path'>;

export const AccountIsAuthenticated = (props: AccountIsAuthenticatedProps) => (
  <Get<boolean, unknown, void> path={`/api/Account/Authenticated`} {...props} />
);

export type UseAccountIsAuthenticatedProps = Omit<UseGetProps<boolean, void>, 'path'>;

export const useAccountIsAuthenticated = (props: UseAccountIsAuthenticatedProps) =>
  useGet<boolean, unknown, void>(`/api/Account/Authenticated`, props);
